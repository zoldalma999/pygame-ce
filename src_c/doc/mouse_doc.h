/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_MOUSE "pygame.mouse\n\n\n\npygame module to work with the mouse\n\nThe mouse functions can be used to get the current state of the mouse device.\nThese functions can also alter the system cursor for the mouse.\n\nWhen the display mode is set, the event queue will start receiving mouse\nevents. The mouse buttons generate pygame.MOUSEBUTTONDOWN and\npygame.MOUSEBUTTONUP events when they are pressed and released. These\nevents contain a button attribute representing which button was pressed. The\nmouse wheel will generate pygame.MOUSEBUTTONDOWN and\npygame.MOUSEBUTTONUP events when rolled. The button will be set to 4\nwhen the wheel is rolled up, and to button 5 when the wheel is rolled down.\nWhenever the mouse is moved it generates a pygame.MOUSEMOTION event. The\nmouse movement is broken into small and accurate motion events. As the mouse\nis moving many motion events will be placed on the queue. Mouse motion events\nthat are not properly cleaned from the event queue are the primary reason the\nevent queue fills up.\n\nIf the mouse cursor is hidden, and input is grabbed to the current display the\nmouse will enter a virtual input mode, where the relative movements of the\nmouse will never be stopped by the borders of the screen. See the functions\npygame.mouse.set_visible() and pygame.event.set_grab() to get this\nconfigured.\n\nMouse Wheel Behavior in pygame 2\n\nThere is proper functionality for mouse wheel behaviour with pygame 2 supporting\npygame.MOUSEWHEEL events.  The new events support horizontal and vertical\nscroll movements, with signed integer values representing the amount scrolled\n(x and y), as well as flipped direction (the set positive and\nnegative values for each axis is flipped). Read more about SDL2\ninput-related changes here https://wiki.libsdl.org/MigrationGuide#input\n\nIn pygame 2, the mouse wheel functionality can be used by listening for the\npygame.MOUSEWHEEL type of an event (Bear in mind they still emit\npygame.MOUSEBUTTONDOWN events like in pygame 1.x, as well).\nWhen this event is triggered, a developer can access the appropriate Event object\nwith pygame.event.get(). The object can be used to access data about the mouse\nscroll, such as which (it will tell you what exact mouse device trigger the event).\n\nCode example of mouse scroll (tested on 2.0.0.dev7)\n\n# Taken from husano896's PR thread (slightly modified)\nimport pygame\nfrom pygame.locals import *\npygame.init()\nscreen = pygame.display.set_mode((640, 480))\nclock = pygame.time.Clock()\n\ndef main():\n   while True:\n      for event in pygame.event.get():\n            if event.type == QUIT:\n               pygame.quit()\n               return\n            elif event.type == MOUSEWHEEL:\n               print(event)\n               print(event.x, event.y)\n               print(event.flipped)\n               print(event.which)\n               # can access properties with\n               # proper notation(ex: event.y)\n      clock.tick(60)\n\n# Execute game:\nmain()"
#define DOC_MOUSE_GETPRESSED "pygame.mouse.get_pressed()\n\nget the state of the mouse buttons\n\nget_pressed(num_buttons=3, desktop=False) -> (left_button, middle_button, right_button)\n\nget_pressed(num_buttons=5, desktop=False) -> (left_button, middle_button, right_button, x1_button, x2_button)\n\nReturns a sequence of booleans representing the state of all the mouse\nbuttons. A true value means the mouse is currently being pressed at the time\nof the call.\n\nTo get all of the mouse events it is better to use either\npygame.event.wait() or pygame.event.get() and check all of those\nevents to see if they are MOUSEBUTTONDOWN, MOUSEBUTTONUP, or\nMOUSEMOTION. Remember to call pygame.event.get() or pygame.event.pump()\nbefore this function, otherwise it will not work as expected.\n\nTo support five button mice, an optional parameter num_buttons has been\nadded in pygame 2. When this is set to 5, button4 and button5\nare added to the returned tuple. Only 3 and 5 are valid values\nfor this parameter.\n\nIf the desktop argument is True the mouse state will be correct even\nif the window has no focus. In addition since it queries the OS it does not depend\non the last event pump while being slightly slower.\n\nOn X11 some X servers use middle button emulation. When you\nclick both buttons 1 and 3 at the same time a 2 button event\ncan be emitted.\n\nDue to design constraints it is impossible to retrieve the desktop\nmouse state on Wayland. The normal mouse state is returned instead.\n\nChanged in pygame 2.0.0: num_buttons argument added\n\nChanged in pygame-ce 2.5.2: Added the desktop argument"
#define DOC_MOUSE_GETJUSTPRESSED "pygame.mouse.get_just_pressed()\n\nget the most recently pressed buttons\n\nget_just_pressed() -> (left_button, middle_button, right_button, x1_button, x2_button)\n\nVery similar to pygame.mouse.get_pressed(), returning a tuple\nof length 5 with the important difference that the buttons are\nTrue only in the frame they start being pressed. This can be convenient\nfor checking the buttons pressed \"this frame\", but for more precise results\nand correct ordering prefer using the pygame.MOUSEBUTTONDOWN event.\n\nThe result of this function is updated when new events are processed,\ne.g. in pygame.event.get() or pygame.event.pump().\n\npygame.mouse.get_just_released()\n\nif pygame.mouse.get_just_pressed()[0]:\n   print(\"LMB just pressed\")\n\nNew in pygame-ce 2.5.0."
#define DOC_MOUSE_GETJUSTRELEASED "pygame.mouse.get_just_released()\n\nget the most recently released buttons\n\nget_just_released() -> (left_button, middle_button, right_button, x1_button, x2_button)\n\nSimilar to pygame.mouse.get_pressed(), returning a tuple\nof length 5 with the important difference that the buttons are\nTrue only in the frame they stop being pressed. This can be convenient\nfor checking the buttons released \"this frame\", but for more precise results\nand correct ordering prefer using the pygame.MOUSEBUTTONUP event.\n\nThe result of this function is updated when new events are processed,\ne.g. in pygame.event.get() or pygame.event.pump().\n\npygame.mouse.get_just_pressed()\n\nif pygame.mouse.get_just_released()[0]:\n   print(\"LMB just released\")\n\nNew in pygame-ce 2.5.0."
#define DOC_MOUSE_GETPOS "pygame.mouse.get_pos()\n\nget the mouse cursor position\n\nget_pos(desktop=False) -> (x, y)\n\nBy default returns the x and y position of the mouse cursor. The position\nis relative to the top-left corner of the display. The cursor position can be\nlocated outside of the display window, but is always constrained to the screen.\n\nIf the desktop argument is True, the position will be instead relative to the\ntop-left corner of the primary monitor. The position might be negative or exceed\nthe desktop bounds if multiple monitors are present.\n\nDue to design constraints it is impossible to retrieve the desktop\nmouse state on Wayland. The relative mouse position is returned instead.\n\nChanged in pygame-ce 2.5.2: Added the desktop argument"
#define DOC_MOUSE_GETREL "pygame.mouse.get_rel()\n\nget the amount of mouse movement\n\nget_rel() -> (x, y)\n\nReturns the amount of movement in x and y since the previous call to\nthis function. The relative movement of the mouse cursor is constrained to\nthe edges of the screen, but see the virtual input mouse mode for a way\naround this. Virtual input mode is described at the top of the page."
#define DOC_MOUSE_SETPOS "pygame.mouse.set_pos()\n\nset the mouse cursor position\n\nset_pos([x, y], /) -> None\n\nSet the current mouse position to arguments given. If the mouse cursor is\nvisible it will jump to the new coordinates. Moving the mouse will generate\na new pygame.MOUSEMOTION event."
#define DOC_MOUSE_SETVISIBLE "pygame.mouse.set_visible()\n\nhide or show the mouse cursor\n\nset_visible(bool, /) -> bool\n\nIf the bool argument is true, the mouse cursor will be visible. This will\nreturn the previous visible state of the cursor."
#define DOC_MOUSE_GETVISIBLE "pygame.mouse.get_visible()\n\nget the current visibility state of the mouse cursor\n\nget_visible() -> bool\n\nGet the current visibility state of the mouse cursor. True if the mouse is\nvisible, False otherwise.\n\nNew in pygame 2.0.0."
#define DOC_MOUSE_GETFOCUSED "pygame.mouse.get_focused()\n\ncheck if the display is receiving mouse input\n\nget_focused() -> bool\n\nReturns true when pygame is receiving mouse input events (or, in windowing\nterminology, is \"active\" or has the \"focus\").\n\nThis method is most useful when working in a window. By contrast, in\nfull-screen mode, this method always returns true.\n\nNote: under MS Windows, the window that has the mouse focus also has the\nkeyboard focus. But under X-Windows, one window can receive mouse events and\nanother receive keyboard events. pygame.mouse.get_focused() indicates\nwhether the pygame window receives mouse events."
#define DOC_MOUSE_SETCURSOR "pygame.mouse.set_cursor()\n\nset the mouse cursor to a new cursor\n\nset_cursor(pygame.cursors.Cursor) -> None\n\nset_cursor(size, hotspot, xormasks, andmasks) -> None\n\nset_cursor(hotspot, surface) -> None\n\nset_cursor(constant) -> None\n\nSet the mouse cursor to something new. This function accepts either an explicit\nCursor object or arguments to create a Cursor object.\n\nSee pygame.cursors.Cursor for help creating cursors and for examples.\n\nChanged in pygame 2.0.1."
#define DOC_MOUSE_GETCURSOR "pygame.mouse.get_cursor()\n\nget the current mouse cursor\n\nget_cursor() -> pygame.cursors.Cursor\n\nGet the information about the mouse system cursor. The return value contains\nthe same data as the arguments passed into pygame.mouse.set_cursor().\n\nCode that unpacked a get_cursor() call into\nsize, hotspot, xormasks, andmasks will still work,\nassuming the call returns an old school type cursor.\n\nChanged in pygame 2.0.1."
#define DOC_MOUSE_GETRELATIVEMODE "pygame.mouse.get_relative_mode()\n\nquery whether relative mouse mode is enabled\n\nget_relative_mode() -> bool\n\nQuery whether relative mouse mode is enabled.\n\nNew in pygame-ce 2.4.0."
#define DOC_MOUSE_SETRELATIVEMODE "pygame.mouse.set_relative_mode()\n\nset relative mouse mode\n\nset_relative_mode(enable, /) -> None\n\nSets the relative mouse mode state.\nWhile the mouse is in relative mode, the cursor is hidden,\nthe mouse position is constrained to the window, and pygame\nwill report continuous relative mouse motion even if the\nmouse is at the edge of the window.\n\nThis function will flush any pending mouse motion.\"\n\nCalling pygame.mouse.set_visible() with argument\nTrue will exit relative mouse mode.\n\nNew in pygame-ce 2.4.0."
