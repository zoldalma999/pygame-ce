/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_ "pygame\n\n\n\nthe top level pygame package\n\nThe pygame package represents the top-level package for others to use. Pygame\nitself is broken into many submodules, but this does not affect programs that\nuse pygame.\n\nAs a convenience, most of the top-level variables in pygame have been placed\ninside a module named pygame.locals. This is meant to be used with\nfrom pygame.locals import *, in addition to import pygame.\n\nWhen you import pygame all available pygame submodules are automatically\nimported. Be aware that some of the pygame modules are considered optional,\nand may not be available. In that case, pygame will provide a placeholder\nobject instead of the module, which can be used to test for availability."
#define DOC_ISCE "pygame.IS_CE\n\nexists if current pygame is pygame-ce\n\nIS_CE = 1\n\nUse getattr(pygame, \"IS_CE\", False) to check if current pygame is pygame-ce"
#define DOC_INIT "pygame.init()\n\ninitialize all imported pygame modules\n\ninit() -> (numpass, numfail)\n\nInitialize all imported pygame modules. No exceptions will be raised if a\nmodule fails, but the total number if successful and failed inits will be\nreturned as a tuple. You can always initialize individual modules manually,\nbut pygame.init() is a convenient way to get everything started. The\ninit() functions for individual modules will raise exceptions when they\nfail.\n\nYou may want to initialize the different modules separately to speed up your\nprogram or to not use modules your game does not require.\n\nIt is safe to call this init() more than once as repeated calls will have\nno effect. This is true even if you have pygame.quit() all the modules."
#define DOC_QUIT "pygame.quit()\n\nuninitialize all pygame modules\n\nquit() -> None\n\nUninitialize all pygame modules that have previously been initialized. When\nthe Python interpreter shuts down, this method is called regardless, so your\nprogram should not need it, except when it wants to terminate its pygame\nresources and continue. It is safe to call this function more than once as\nrepeated calls have no effect.\n\nCalling pygame.quit() will not exit your program. Consider letting\nyour program end in the same way a normal Python program will end."
#define DOC_GETINIT "pygame.get_init()\n\nreturns True if pygame is currently initialized\n\nget_init() -> bool\n\nReturns True if pygame is currently initialized.\n\nNew in pygame 1.9.5."
#define DOC_ERROR "exception pygame.error\n\nstandard pygame exception\n\nraise pygame.error(message)\n\nThis exception is raised whenever a pygame or SDL operation fails. You\ncan catch any anticipated problems and deal with the error. The exception is\nalways raised with a descriptive message about the problem.\n\nDerived from the RuntimeError exception, which can also be used to catch\nthese raised errors."
#define DOC_GETERROR "pygame.get_error()\n\nget the current error message\n\nget_error() -> errorstr\n\nSDL maintains an internal error message. This message will usually be\ngiven to you when pygame.error() is raised, so this function will\nrarely be needed."
#define DOC_SETERROR "pygame.set_error()\n\nset the current error message\n\nset_error(error_msg, /) -> None\n\nSDL maintains an internal error message. This message will usually be\ngiven to you when pygame.error() is raised, so this function will\nrarely be needed."
#define DOC_GETSDLVERSION "pygame.get_sdl_version()\n\nget the version number of SDL\n\nget_sdl_version(linked=True) -> major, minor, patch\n\nReturns the three version numbers of the SDL library. linked=True\nwill cause the function to return the version of the library that pygame\nis linked against while linked=False will cause the function to return\nthe version of the library that pygame is compiled against.\nIt can be used to detect which features may or may not be\navailable through pygame.\n\nNew in pygame 1.7.0.\n\nChanged in pygame-ce 2.1.4: linked keyword argument added"
#define DOC_GETSDLBYTEORDER "pygame.get_sdl_byteorder()\n\nget the byte order of SDL\n\nget_sdl_byteorder() -> int\n\nReturns the byte order of the SDL library. It returns 1234 for little\nendian byte order and 4321 for big endian byte order.\n\nNew in pygame 1.8."
#define DOC_REGISTERQUIT "pygame.register_quit()\n\nregister a function to be called when pygame quits\n\nregister_quit(callable, /) -> None\n\nWhen pygame.quit() is called, all registered quit functions are\ncalled. Pygame modules do this automatically when they are initializing, so\nthis function will rarely be needed."
#define DOC_ENCODESTRING "pygame.encode_string()\n\nEncode a Unicode or bytes object\n\nencode_string([obj [, encoding [, errors [, etype]]]]) -> bytes or None\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else,\nreturn None; if not given, raise SyntaxError.\n\nencoding (string): If present, encoding to use. The default is\n'unicode_escape'.\n\nerrors (string): If given, how to handle unencodable characters. The default\nis 'backslashreplace'.\n\netype (exception type): If given, the exception type to raise for an\nencoding error. The default is UnicodeEncodeError, as returned by\nPyUnicode_AsEncodedString(). For the default encoding and errors values\nthere should be no encoding errors.\n\nThis function is used in encoding file paths. Keyword arguments are\nsupported.\n\nThis function is not needed for normal pygame-ce usage.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)"
#define DOC_ENCODEFILEPATH "pygame.encode_file_path()\n\nEncode a Unicode or bytes object as a file system path\n\nencode_file_path([obj [, etype]]) -> bytes or None\n\nobj: If Unicode, encode; if bytes, return unaltered; if anything else,\nreturn None; if not given, raise SyntaxError.\n\netype (exception type): If given, the exception type to raise for an\nencoding error. The default is UnicodeEncodeError, as returned by\nPyUnicode_AsEncodedString().\n\nThis function is used to encode file paths in pygame. Encoding is to the\ncodec as returned by sys.getfilesystemencoding(). Keyword arguments are\nsupported.\n\nThis function is not needed for normal pygame-ce usage.\n\nNew in pygame 1.9.2: (primarily for use in unit tests)"
#define DOC_PRINTDEBUGINFO "pygame.print_debug_info()\n\nretrieves useful information for debugging and issue-reporting purposes\n\nprint_debug_info(filename=None) -> None\n\nConstructs a string containing details on the system, the python interpreter,\nthe pygame version, and the linked and compiled versions of the libraries that\npygame wraps. If filename is None, then the string is printed into the\nconsole. Otherwise, the debug string is written to the specified file.\n\nIf pygame.freetype has not been initialized with pygame.init() or pygame.freetype.init(),\nthen the linked and compiled versions of FreeType will be \"Unk\" since this information is not\navailable before initialization.\n\nNew in pygame-ce 2.1.4."
#define DOC_VERSION "pygame.version\n\n\n\nsmall module containing version information\n\nThis module is automatically imported into the pygame package and can be used to\ncheck which version of pygame has been imported.\n\n\n\nSetting Environment Variables\n\nSome aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide\nrange of the library's functionality. Some of the variables are from pygame itself, while others come from\nthe underlying C SDL library that pygame uses.\n\nIn python, environment variables are usually set in code like this:\n\nimport os\nos.environ['NAME_OF_ENVIRONMENT_VARIABLE'] = 'value_to_set'\n\nOr to preserve users ability to override the variable:\n\nimport os\nos.environ['ENV_VAR'] = os.environ.get('ENV_VAR', 'value')\n\nIf the variable is more useful for users of an app to set than the developer then they can set it like this:\n\nWindows:\n\nset NAME_OF_ENVIRONMENT_VARIABLE=value_to_set\npython my_application.py\n\nLinux/Mac:\n\nENV_VAR=value python my_application.py\n\nFor some variables they need to be set before initialising pygame, some must be set before even importing pygame,\nand others can simply be set right before the area of code they control is run.\n\nBelow is a list of environment variables, their settable values, and a brief description of what they do.\n\n\n\nPygame Environment Variables\n\nThese variables are defined by pygame itself.\n\n\n\nPYGAME_DISPLAY - Experimental (subject to change)\nSet index of the display to use, \"0\" is the default.\n\nThis sets the display where pygame will open its window\nor screen. The value set here will be used if set before\ncalling pygame.display.set_mode(), and as long as no\n'display' parameter is passed into pygame.display.set_mode().\n\n\n\nPYGAME_FORCE_SCALE -\nSet to \"photo\" or \"default\".\n\nThis forces set_mode() to use the SCALED display mode and,\nif \"photo\" is set, makes the scaling use the slowest, but\nhighest quality anisotropic scaling algorithm, if it is\navailable. Must be set before calling pygame.display.set_mode().\n\n\n\nPYGAME_BLEND_ALPHA_SDL2 - New in pygame 2.0.0\nSet to \"1\" to enable the SDL2 blitter.\n\nThis makes pygame use the SDL2 blitter for all alpha\nblending. The SDL2 blitter is sometimes faster than\nthe default blitter but uses a different formula so\nthe final colors may differ. Must be set before\npygame.init() is called.\n\n\n\nPYGAME_HIDE_SUPPORT_PROMPT -\nSet to \"1\" to hide the prompt.\n\nThis stops the welcome message popping up in the\nconsole that tells you which version of python,\npygame & SDL you are using. Must be set before\nimporting pygame.\n\n\n\nPYGAME_FREETYPE -\nSet to \"1\" to enable.\n\nThis switches the pygame.font module to a pure\nfreetype implementation that bypasses SDL_ttf.\nSee the font module for why you might want to\ndo this. Must be set before importing pygame.\n\n\n\nPYGAME_CAMERA -\nSet to \"opencv\"\n\nForces the library backend used in the camera\nmodule, overriding the platform defaults. Must\nbe set before calling pygame.camera.init().\n\nIn pygame 2.0.3, backends can be set programmatically instead, and the old\nOpenCV backend has been replaced with one on top of \"opencv-python,\" rather\nthan the old \"highgui\" OpenCV port. Also, there is a new native Windows\nbackend available.\n\n\n\n\n\nSDL Environment Variables\n\nThese variables are defined by SDL.\n\nFor documentation on the environment variables available in\npygame 1 try here.\nFor Pygame 2, some selected environment variables are listed below.\n\n\n\nSDL_VIDEO_CENTERED -\nSet to \"1\" to enable centering the window.\n\nThis will make the pygame window open in the centre of the display.\nMust be set before calling pygame.display.set_mode().\n\n\n\nSDL_VIDEO_WINDOW_POS -\nSet to \"x,y\" to position the top left corner of the window.\n\nThis allows control over the placement of the pygame window within\nthe display. Must be set before calling pygame.display.set_mode().\n\n\n\nSDL_VIDEODRIVER -\nSet to \"drivername\" to change the video driver used.\n\nOn some platforms there are multiple video drivers available and\nthis allows users to pick between them. More information is available\nhere. Must be set before\ncalling pygame.init() or pygame.display.init().\n\n\n\nSDL_AUDIODRIVER -\nSet to \"drivername\" to change the audio driver used.\n\nOn some platforms there are multiple audio drivers available and\nthis allows users to pick between them. More information is available\nhere. Must be set before\ncalling pygame.init() or pygame.mixer.init().\n\n\n\nSDL_VIDEO_ALLOW_SCREENSAVER\nSet to \"1\" to allow screensavers while pygame apps are running.\n\nBy default pygame apps disable screensavers while\nthey are running. Setting this environment variable allows users or\ndevelopers to change that and make screensavers run again.\n\n\n\nSDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\nSet to \"0\" to re-enable the compositor.\n\nBy default SDL tries to disable the X11 compositor for all pygame\napps. This is usually a good thing as it's faster, however if you\nhave an app which doesn't update every frame and are using linux\nyou may want to disable this bypass. The bypass has reported problems\non KDE linux. This variable is only used on x11/linux platforms.\n\n\n\nSDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\nSet to \"1\" to allow joysticks to be updated even when the window is out of focus\n\nBy default, when the window is not in focus, input devices do not get\nupdated. However, using this environment variable it is possible to get\njoystick updates even when the window is in the background. Must be set\nbefore calling pygame.init() or pygame.joystick.init().\n\n\n\nSDL_MOUSE_TOUCH_EVENTS\nSet to \"1\" to make mouse events also generate touch events.\n\nUseful for testing touch events on desktop platforms (e.g. with a trackpad)\nwhere this is set to 0 by default.\n\n\n\n\"SDL_WINDOWS_DPI_AWARENESS\"\nSet to \"permonitorv2\" on windows 10 (and later) to declare the pygame\nwindow DPI aware and ignore the desktop scaling, \"permonitor\" for\nwindows 8.1 and later DPI awareness and \"system\" for windows Vista\nand later DPI awareness (not per monitor). Finally set it to \"unaware\",\nto have the pygame window scale with the desktop scaling.\n\nThis hint only affects the windows platform, other platforms can control DPI awareness\nvia a Window creation keyword parameter called \"allow_high_dpi\"."
#define DOC_VERSION_VER "pygame.version.ver\n\nversion number as a string\n\nver = '1.2'\n\nThis is the version represented as a string. It can contain a micro release\nnumber as well, e.g. '1.5.2'"
#define DOC_VERSION_VERNUM "pygame.version.vernum\n\ntupled integers of the version\n\nvernum = (1, 5, 3)\n\nThis version information can easily be compared with other version\nnumbers of the same format. An example of checking pygame version numbers\nwould look like this:\n\nif pygame.version.vernum < (1, 5):\n    print('Warning, older version of pygame (%s)' %  pygame.version.ver)\n    disable_advanced_features = True\n\nNew in pygame 1.9.6: Attributes major, minor, and patch.\n\nvernum.major == vernum[0]\nvernum.minor == vernum[1]\nvernum.patch == vernum[2]\n\nChanged in pygame 1.9.6: str(pygame.version.vernum) returns a string like \"2.0.0\" instead\nof \"(2, 0, 0)\".\n\nChanged in pygame 1.9.6: repr(pygame.version.vernum) returns a string like\n\"PygameVersion(major=2, minor=0, patch=0)\" instead of \"(2, 0, 0)\"."
#define DOC_VERSION_REV "pygame.version.rev\n\nrepository revision of the build\n\nrev = 'a6f89747b551+'\n\nThe Mercurial node identifier of the repository checkout from which this\npackage was built. If the identifier ends with a plus sign '+' then the\npackage contains uncommitted changes. Please include this revision number\nin bug reports, especially for non-release pygame builds.\n\nImportant note: pygame development has moved to github, this variable is\nobsolete now. As soon as development shifted to github, this variable started\nreturning an empty string \"\".\nIt has always been returning an empty string since v1.9.5.\n\nChanged in pygame 1.9.5: Always returns an empty string \"\"."
#define DOC_VERSION_SDL "pygame.version.SDL\n\ntupled integers of the SDL library version\n\nSDL = '(2, 26, 5)'\n\nThis is the SDL library version represented as an extended tuple. It also has\nattributes 'major', 'minor' & 'patch' that can be accessed like this:\n\n>>> pygame.version.SDL.major\n2\n\nprinting the whole thing returns a string like this:\n\n>>> pygame.version.SDL\nSDLVersion(major=2, minor=26, patch=5)\n\nNew in pygame 2.0.0."
