/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_SURFARRAY "pygame.surfarray\n\n\n\npygame module for accessing surface pixel data using array interfaces\n\nFunctions to convert between NumPy arrays and Surface objects. This module\nwill only be functional when pygame can use the external NumPy package.\nIf NumPy can't be imported, surfarray becomes a MissingModule object.\n\nEvery pixel is stored as a single integer value to represent the red, green,\nand blue colors. The 8-bit images use a value that looks into a colormap. Pixels\nwith higher depth use a bit packing process to place three or four values into\na single number.\n\nThe arrays are indexed by the X axis first, followed by the Y axis.\nArrays that treat the pixels as a single integer are referred to as 2D arrays.\nThis module can also separate the red, green, and blue color values into\nseparate indices. These types of arrays are referred to as 3D arrays, and the\nlast index is 0 for red, 1 for green, and 2 for blue.\n\nThe pixels of a 2D array as returned by array2d() and pixels2d()\nare mapped to the specific surface. Use pygame.Surface.unmap_rgb()\nto convert to a color, and pygame.Surface.map_rgb() to get the surface\nspecific pixel value of a color. Integer pixel values can only be used directly\nbetween surfaces with matching pixel layouts (see pygame.Surface).\n\nAll functions that refer to \"array\" will copy the surface information to a new\nNumPy array. All functions that refer to \"pixels\" will directly reference the\npixels from the surface and any changes performed to the array will make changes\nin the surface. As this last functions share memory with the surface, this one\nwill be locked during the lifetime of the array."
#define DOC_SURFARRAY_ARRAY2D "pygame.surfarray.array2d()\n\nCopy pixels into a 2d array\n\narray2d(Surface) -> array\n\nCopy the mapped (raw) pixels from a Surface\ninto a 2D array.\nThe bit depth of the surface will control the size of the integer values,\nand will work for any type of pixel format.\n\nThis function will temporarily lock the Surface as pixels are copied\n(see the pygame.Surface.lock() - lock the Surface memory for pixel\naccess method)."
#define DOC_SURFARRAY_PIXELS2D "pygame.surfarray.pixels2d()\n\nReference pixels into a 2d array\n\npixels2d(Surface) -> array\n\nCreate a new 2D array that directly references the pixel values in a\nSurface. Any changes to the array will affect the pixels in the Surface.\nThis is a fast operation since no data is copied.\n\nPixels from a 24-bit Surface cannot be referenced, but all other Surface bit\ndepths can.\n\nThe Surface this references will remain locked for the lifetime of the array,\nsince the array generated by this function shares memory with the surface.\nSee the pygame.Surface.lock() - lock the Surface memory for pixel\naccess method."
#define DOC_SURFARRAY_ARRAY3D "pygame.surfarray.array3d()\n\nCopy pixels into a 3d array\n\narray3d(Surface) -> array\n\nCopy the pixels from a Surface into a 3D array. The bit depth of the surface\nwill control the size of the integer values, and will work for any type of\npixel format.\n\nThis function will temporarily lock the Surface as pixels are copied (see\nthe pygame.Surface.lock() - lock the Surface memory for pixel\naccess method)."
#define DOC_SURFARRAY_PIXELS3D "pygame.surfarray.pixels3d()\n\nReference pixels into a 3d array\n\npixels3d(Surface) -> array\n\nCreate a new 3D array that directly references the pixel values in a\nSurface. Any changes to the array will affect the pixels in the Surface.\nThis is a fast operation since no data is copied.\n\nThis will only work on Surfaces that have 24-bit or 32-bit formats. Lower\npixel formats cannot be referenced.\n\nThe Surface this references will remain locked for the lifetime of the array,\nsince the array generated by this function shares memory with the surface.\nSee the pygame.Surface.lock() - lock the Surface memory for pixel\naccess method."
#define DOC_SURFARRAY_ARRAYALPHA "pygame.surfarray.array_alpha()\n\nCopy pixel alphas into a 2d array\n\narray_alpha(Surface) -> array\n\nCopy the pixel alpha values (degree of transparency) from a Surface into a\n2D array. This will work for any type of Surface format. Surfaces without a\npixel alpha will return an array with all opaque values.\n\nThis function will temporarily lock the Surface as pixels are copied (see\nthe pygame.Surface.lock() - lock the Surface memory for pixel\naccess method)."
#define DOC_SURFARRAY_PIXELSALPHA "pygame.surfarray.pixels_alpha()\n\nReference pixel alphas into a 2d array\n\npixels_alpha(Surface) -> array\n\nCreate a new 2D array that directly references the alpha values (degree of\ntransparency) in a Surface. Any changes to the array will affect the pixels\nin the Surface. This is a fast operation since no data is copied.\n\nThis can only work on 32-bit Surfaces with a per-pixel alpha value.\n\nThe Surface this references will remain locked for the lifetime of the array,\nsince the array generated by this function shares memory with the surface.\nSee the pygame.Surface.lock() - lock the Surface memory for pixel\naccess method."
#define DOC_SURFARRAY_ARRAYRED "pygame.surfarray.array_red()\n\nCopy red pixels into a 2d array\n\narray_red(Surface) -> array\n\nCopy the pixel red values from a Surface into a 2D array. This will work\nfor any type of Surface format.\n\nThis function will temporarily lock the Surface as pixels are copied (see\nthe pygame.Surface.lock() - lock the Surface memory for pixel\naccess method).\n\nNew in pygame 2.0.2."
#define DOC_SURFARRAY_PIXELSRED "pygame.surfarray.pixels_red()\n\nReference pixel red into a 2d array.\n\npixels_red (Surface) -> array\n\nCreate a new 2D array that directly references the red values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a\nfast operation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this references will remain locked for the lifetime of the array,\nsince the array generated by this function shares memory with the surface.\nSee the pygame.Surface.lock() - lock the Surface memory for pixel\naccess method."
#define DOC_SURFARRAY_ARRAYGREEN "pygame.surfarray.array_green()\n\nCopy green pixels into a 2d array\n\narray_green(Surface) -> array\n\nCopy the pixel green values from a Surface into a 2D array. This will work\nfor any type of Surface format.\n\nThis function will temporarily lock the Surface as pixels are copied (see\nthe pygame.Surface.lock() - lock the Surface memory for pixel\naccess method).\n\nNew in pygame 2.0.2."
#define DOC_SURFARRAY_PIXELSGREEN "pygame.surfarray.pixels_green()\n\nReference pixel green into a 2d array.\n\npixels_green (Surface) -> array\n\nCreate a new 2D array that directly references the green values in a\nSurface. Any changes to the array will affect the pixels in the Surface.\nThis is a fast operation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this references will remain locked for the lifetime of the array,\nsince the array generated by this function shares memory with the surface.\nSee the pygame.Surface.lock() - lock the Surface memory for pixel\naccess method."
#define DOC_SURFARRAY_ARRAYBLUE "pygame.surfarray.array_blue()\n\nCopy blue pixels into a 2d array\n\narray_blue(Surface) -> array\n\nCopy the pixel blue values from a Surface into a 2D array. This will work\nfor any type of Surface format.\n\nThis function will temporarily lock the Surface as pixels are copied (see\nthe pygame.Surface.lock() - lock the Surface memory for pixel\naccess method).\n\nNew in pygame 2.0.2."
#define DOC_SURFARRAY_PIXELSBLUE "pygame.surfarray.pixels_blue()\n\nReference pixel blue into a 2d array.\n\npixels_blue (Surface) -> array\n\nCreate a new 2D array that directly references the blue values in a Surface.\nAny changes to the array will affect the pixels in the Surface. This is a\nfast operation since no data is copied.\n\nThis can only work on 24-bit or 32-bit Surfaces.\n\nThe Surface this references will remain locked for the lifetime of the array,\nsince the array generated by this function shares memory with the surface.\nSee the pygame.Surface.lock() - lock the Surface memory for pixel\naccess method."
#define DOC_SURFARRAY_ARRAYCOLORKEY "pygame.surfarray.array_colorkey()\n\nCopy the colorkey values into a 2d array\n\narray_colorkey(Surface) -> array\n\nCreate a new array with the colorkey transparency value from each pixel. If\nthe pixel matches the colorkey it will be fully transparent; otherwise it\nwill be fully opaque.\n\nThis will work on any type of Surface format. If the image has no colorkey a\nsolid opaque array will be returned.\n\nThis function will temporarily lock the Surface as pixels are copied."
#define DOC_SURFARRAY_MAKESURFACE "pygame.surfarray.make_surface()\n\nCopy an array to a new surface\n\nmake_surface(array) -> Surface\n\nCreate a new Surface that best resembles the data and format on the array.\nThe array can be 2D or 3D with any sized integer values. Function\nmake_surface uses the array struct interface to acquire array properties,\nso is not limited to just NumPy arrays. See pygame.pixelcopy.\n\nNew in pygame 1.9.2: array struct interface support."
#define DOC_SURFARRAY_BLITARRAY "pygame.surfarray.blit_array()\n\nBlit directly from a array values\n\nblit_array(Surface, array) -> None\n\nDirectly copy values from an array into a Surface. This is faster than\nconverting the array into a Surface and blitting. The array must be the same\ndimensions as the Surface and will completely replace all pixel values. Only\ninteger, ASCII character and record arrays are accepted.\n\nThis function will temporarily lock the Surface as the new values are\ncopied."
#define DOC_SURFARRAY_MAPARRAY "pygame.surfarray.map_array()\n\nMap a 3d array into a 2d array\n\nmap_array(Surface, array3d) -> array2d\n\nConvert a 3D array into a 2D array. This will use the given Surface format\nto control the conversion. Palette surface formats are supported for NumPy\narrays."
#define DOC_SURFARRAY_USEARRAYTYPE "pygame.surfarray.use_arraytype()\n\nSets the array system to be used for surface arrays\n\nuse_arraytype (arraytype) -> None\n\nDEPRECATED: Uses the requested array type for the module functions.\nThe only supported arraytype is 'numpy'. Other values will raise\nValueError. Using this function will raise a DeprecationWarning."
#define DOC_SURFARRAY_GETARRAYTYPE "pygame.surfarray.get_arraytype()\n\nGets the currently active array type.\n\nget_arraytype () -> str\n\nDEPRECATED: Returns the currently active array type. This will be a value of the\nget_arraytypes() tuple and indicates which type of array module is used\nfor the array creation. Using this function will raise a DeprecationWarning.\n\nNew in pygame 1.8."
#define DOC_SURFARRAY_GETARRAYTYPES "pygame.surfarray.get_arraytypes()\n\nGets the array system types currently supported.\n\nget_arraytypes () -> tuple\n\nDEPRECATED: Checks, which array systems are available and returns them as a tuple of\nstrings. The values of the tuple can be used directly in the\npygame.surfarray.use_arraytype() () method. If no supported array\nsystem could be found, None will be returned.  Using this function will raise a\nDeprecationWarning.\n\nNew in pygame 1.8."
