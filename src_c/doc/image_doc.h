/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_IMAGE "pygame.image\n\n\n\nPygame module for image transfer.\n\nThe image module contains functions for loading and saving pictures, as well as\ntransferring Surfaces to formats usable by other packages.\n\nNote that there is no Image class; an image is loaded as a Surface object. The\nSurface class allows manipulation (drawing lines, setting pixels, capturing\nregions, etc.).\n\nIn the vast majority of installations, pygame is built to support extended\nformats, using the SDL_Image library behind the scenes. However, some\ninstallations may only support uncompressed BMP images. With full image\nsupport, the pygame.image.load() function can load the following\nformats.\n\nBMP\n\nGIF (non-animated)\n\nJPEG\n\nLBM\n\nPCX\n\nPNG\n\nPNM (PBM, PGM, PPM)\n\nQOI\n\nSVG (limited support, using Nano SVG)\n\nTGA (uncompressed)\n\nTIFF\n\nWEBP\n\nXPM\n\nXCF\n\nNew in pygame 2.0: Loading SVG, WebP, PNM\n\nNew in pygame-ce 2.4.0: Loading QOI (Relies on SDL_Image 2.6.0+)\n\nSaving images only supports a limited set of formats. You can save to the\nfollowing formats.\n\nBMP\n\nJPEG\n\nPNG\n\nTGA\n\nJPEG and JPG, as well as TIF and TIFF refer to the same file format\n\nNew in pygame 1.8: Saving PNG and JPEG files."
#define DOC_IMAGE_LOAD "pygame.image.load()\n\nLoad new image from a file (or file-like object).\n\nload(file, namehint='') -> Surface\n\nLoad an image from a file source. You can pass either a filename, a Python\nfile-like object, or a pathlib.Path.\n\nPygame will automatically determine the image type (e.g., GIF or bitmap)\nand create a new Surface object from the data. In some cases it will need to\nknow the file extension (e.g., GIF images should end in \".gif\"). If you\npass a raw file-like object, you may also want to pass the original filename\nas the namehint argument.\n\nThe returned Surface will contain the same color format, colorkey and alpha\ntransparency as the file it came from. You will often want to call\npygame.Surface.convert() with no arguments, to create a copy that\nwill draw more quickly on the screen.\n\nFor alpha transparency, like in .png images, use the\npygame.Surface.convert_alpha() method after loading so that the\nimage has per pixel transparency.\n\nPygame may not always be built to support all image formats. At minimum it\nwill support uncompressed BMP. If pygame.image.get_extended()\nreturns True, you should be able to load most images (including PNG, JPG\nand GIF).\n\nYou should use os.path.join() for compatibility.\n\neg. asurf = pygame.image.load(os.path.join('data', 'bla.png'))\n\nChanged in pygame-ce 2.2.0: Now supports keyword arguments."
#define DOC_IMAGE_LOADSIZEDSVG "pygame.image.load_sized_svg()\n\nLoad an SVG image from a file (or file-like object) with the given size.\n\nload_sized_svg(file, size) -> Surface\n\nThis function rasterizes the input SVG at the size specified by the size\nargument. The file argument can be either a filename, a Python file-like\nobject, or a pathlib.Path.\n\nThe usage of this function for handling SVGs is recommended, as calling the\nregular load function and then scaling the returned surface would not\npreserve the quality that an SVG can provide.\n\nIt is to be noted that this function does not return a surface whose\ndimensions exactly match the size argument. This function preserves\naspect ratio, so the returned surface could be smaller along at most one\ndimension.\n\nThis function requires SDL_image 2.6.0 or above. If pygame was compiled with\nan older version, pygame.error will be raised when this function is\ncalled.\n\nNew in pygame-ce 2.4.0."
#define DOC_IMAGE_LOADANIMATION "pygame.image.load_animation()\n\nLoad an animation (GIF/WEBP) from a file (or file-like object).\n\nload_animation(file, namehint='') -> list[tuple[Surface, int]]\n\nLoad an animation (GIF/WEBP) from a file source. You can pass either a\nfilename, a Python file-like object, or a pathlib.Path. If you pass a raw\nfile-like object, you may also want to pass the original filename as the\nnamehint argument so that the file extension can be used to infer the file\nformat.\n\nThis returns a list of tuples (corresponding to every frame of the animation),\nwhere each tuple is a (surface, delay) pair for that frame.\n\nThis function requires SDL_image 2.6.0 or above. If pygame was compiled with\nan older version, pygame.error will be raised when this function is\ncalled.\n\nNew in pygame-ce 2.5.4."
#define DOC_IMAGE_SAVE "pygame.image.save()\n\nSave an image to file (or file-like object).\n\nsave(surface, file, namehint='') -> None\n\nThis will save your Surface as either a BMP, TGA, PNG, or\nJPEG image. If the filename extension is unrecognized it will default to\nTGA. Both TGA, and BMP file formats create uncompressed files.\nYou can pass a filename, a pathlib.Path or a Python file-like object.\nFor file-like object, the image is saved to TGA format unless\na namehint with a recognizable extension is passed in.\n\nWhen saving to a file-like object, it seems that for most formats,\nthe object needs to be flushed after saving to it to make loading\nfrom it possible.\n\nChanged in pygame 1.8: Saving PNG and JPEG files.\n\nChanged in pygame 2.0.0: The namehint parameter was added to make it possible\nto save other formats than TGA to a file-like object.\nSaving to a file-like object with JPEG is possible.\n\nChanged in pygame-ce 2.2.0: Now supports keyword arguments."
#define DOC_IMAGE_GETSDLIMAGEVERSION "pygame.image.get_sdl_image_version()\n\nGet version number of the SDL_Image library being used.\n\nget_sdl_image_version(linked=True) -> Optional[tuple[int, int, int]]\n\nIf pygame is built with extended image formats, then this function will\nreturn the SDL_Image library's version number as a tuple of 3 integers\n(major, minor, patch). If not, then it will return None.\n\nlinked=True is the default behavior and the function will return the\nversion of the library that Pygame is linked against, while linked=False\nwill return the version of the library that Pygame is compiled against.\n\nNew in pygame 2.0.0.\n\nChanged in pygame-ce 2.1.4: linked keyword argument added and default\nbehavior changed from returning compiled version to returning linked\nversion"
#define DOC_IMAGE_GETEXTENDED "pygame.image.get_extended()\n\nTest if extended image formats can be loaded.\n\nget_extended() -> bool\n\nIf pygame is built with extended image formats this function will return\nTrue. It is still not possible to determine which formats will be available,\nbut generally you will be able to load them all."
#define DOC_IMAGE_TOSTRING "pygame.image.tostring()\n\nTransfer image to byte buffer.\n\ntostring(surface, format, flipped=False, pitch=-1) -> bytes\n\nDEPRECATED: This function has the same functionality as tobytes(),\nwhich is preferred and should be used.\n\nDeprecated since pygame-ce 2.3.0."
#define DOC_IMAGE_TOBYTES "pygame.image.tobytes()\n\nTransfer image to byte buffer.\n\ntobytes(surface, format, flipped=False, pitch=-1) -> bytes\n\nCreates a string of bytes that can be transferred with the fromstring\nor frombytes methods in other Python imaging packages. Some Python\nimage packages prefer their images in bottom-to-top format (PyOpenGL for\nexample). If you pass True for the flipped argument, the byte buffer\nwill be vertically flipped.\n\nThe format argument is a string of one of the following values. Note that\nonly 8-bit Surfaces can use the \"P\" format. The other formats will work for\nany Surface. Also note that other Python image packages support more formats\nthan pygame.\n\nP, 8-bit palettized Surfaces\n\nRGB, 24-bit image\n\nRGBX, 32-bit image with unused space\n\nRGBA, 32-bit image with an alpha channel\n\nARGB, 32-bit image with alpha channel first\n\nBGRA, 32-bit image with alpha channel, red and blue channels swapped\n\nABGR, 32-bit image with alpha channel, reverse order\n\nRGBA_PREMULT, 32-bit image with colors scaled by alpha channel\n\nARGB_PREMULT, 32-bit image with colors scaled by alpha channel, alpha channel first\n\nThe 'pitch' argument can be used to specify the pitch/stride per horizontal line\nof the image in bytes. It must be equal to or greater than how many bytes\nthe pixel data of each horizontal line in the image bytes occupies without any\nextra padding. By default, it is -1, which means that the pitch/stride is\nthe same size as how many bytes the pure pixel data of each horizontal line takes.\n\nThe use of this function is recommended over tostring() as of pygame 2.1.3.\nThis function was introduced so it matches nicely with other\nlibraries (PIL, NumPy, etc), and with people's expectations.\n\nNew in pygame-ce 2.1.3.\n\nChanged in pygame-ce 2.2.0: Now supports keyword arguments.\n\nChanged in pygame-ce 2.5.0: Added a 'pitch' argument.\n\nChanged in pygame-ce 2.5.1: Added support for ABGR image format"
#define DOC_IMAGE_FROMSTRING "pygame.image.fromstring()\n\nCreate new Surface from a byte buffer.\n\nfromstring(bytes, size, format, flipped=False, pitch=-1) -> Surface\n\nDEPRECATED: This function has the same functionality as frombytes(),\nwhich is preferred and should be used.\n\nDeprecated since pygame-ce 2.3.0."
#define DOC_IMAGE_FROMBYTES "pygame.image.frombytes()\n\nCreate new Surface from a byte buffer.\n\nfrombytes(bytes, size, format, flipped=False, pitch=-1) -> Surface\n\nThis function takes arguments similar to pygame.image.tobytes().\nThe size argument is a pair of numbers representing the width and height.\nOnce the new Surface is created it is independent from the memory of the\nbytes passed in.\n\nThe bytes and format passed must compute to the exact size of image\nspecified. Otherwise a ValueError will be raised.\n\nThe 'pitch' argument can be used specify the pitch/stride per horizontal line\nof the image bytes in bytes. It must be equal to or greater than how many bytes\nthe pixel data of each horizontal line in the image bytes occupies without any\nextra padding. By default, it is -1, which means that the pitch/stride is\nthe same size as how many bytes the pure pixel data of each horizontal line takes.\n\nSee the pygame.image.frombuffer() method for a potentially faster\nway to transfer images into pygame.\n\nThe use of this function is recommended over fromstring() as of pygame 2.1.3.\nThis function was introduced so it matches nicely with other\nlibraries (PIL, NumPy, etc), and with people's expectations.\n\nNew in pygame-ce 2.1.3.\n\nNew in pygame-ce 2.1.4: Added a 'pitch' argument and support for keyword arguments."
#define DOC_IMAGE_FROMBUFFER "pygame.image.frombuffer()\n\nCreate a new Surface that shares data inside a bytes buffer.\n\nfrombuffer(buffer, size, format, pitch=-1) -> Surface\n\nCreate a new Surface that shares pixel data directly from a buffer. This\nbuffer can be bytes, a bytearray, a memoryview, a\npygame.BufferProxy, or any object that supports the buffer protocol.\nThis method takes similar arguments to pygame.image.fromstring(), but\nis unable to vertically flip the source data.\n\nThis will run much faster than pygame.image.fromstring(), since no\npixel data must be allocated and copied.\n\nIt accepts the following 'format' arguments:\n\nP, 8-bit palettized Surfaces\n\nRGB, 24-bit image\n\nBGR, 24-bit image, red and blue channels swapped.\n\nRGBX, 32-bit image with unused space\n\nRGBA, 32-bit image with an alpha channel\n\nARGB, 32-bit image with alpha channel first\n\nBGRA, 32-bit image with alpha channel, red and blue channels swapped\n\nThe 'pitch' argument can be used specify the pitch/stride per horizontal line\nof the image buffer in bytes. It must be equal to or greater than how many bytes\nthe pixel data of each horizontal line in the image buffer occupies without any\nextra padding. By default, it is -1, which means that the pitch/stride is\nthe same size as how many bytes the pure pixel data of each horizontal line takes.\n\nNew in pygame-ce 2.1.3: BGRA format\n\nNew in pygame-ce 2.1.4: Added a 'pitch' argument and support for keyword arguments."
#define DOC_IMAGE_LOADBASIC "pygame.image.load_basic()\n\nLoad new BMP image from a file (or file-like object).\n\nload_basic(file, /) -> Surface\n\nLoad an image from a file source. You can pass either a filename or a Python\nfile-like object, or a pathlib.Path.\n\nThis function only supports loading \"basic\" image format, ie BMP\nformat. This function is always available, no matter how pygame was built."
#define DOC_IMAGE_LOADEXTENDED "pygame.image.load_extended()\n\nLoad an image from a file (or file-like object).\n\nload_extended(file, namehint='') -> Surface\n\nThis function is similar to pygame.image.load(), except that this\nfunction can only be used if pygame was built with extended image format\nsupport.\n\nChanged in pygame 2.0.1: This function is always available, but raises an\nNotImplementedError if extended image formats are not supported.\nPreviously, this function may or may not be available, depending on the\nstate of extended image format support.\n\nChanged in pygame-ce 2.2.0: Now supports keyword arguments."
#define DOC_IMAGE_SAVEEXTENDED "pygame.image.save_extended()\n\nSave a png/jpg image to file (or file-like object).\n\nsave_extended(surface, file, namehint='') -> None\n\nThis will save your Surface as either a PNG or JPEG image.\n\nIn case the image is being saved to a file-like object, this function\nuses the namehint argument to determine the format of the file being\nsaved. Saves to JPEG in case the namehint was not specified while\nsaving to a file-like object.\n\nChanged in pygame 2.0.1: This function is always available, but raises an\nNotImplementedError if extended image formats are not supported.\nPreviously, this function may or may not be available, depending on the\nstate of extended image format support.\n\nChanged in pygame-ce 2.2.0: Now supports keyword arguments."
