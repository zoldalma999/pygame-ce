/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_CURSORS "pygame.cursors\n\n\n\nPygame module for cursor resources.\n\nPygame offers control over the system hardware cursor. Pygame supports\nblack and white cursors (bitmap cursors), as well as system variant cursors and color cursors.\nYou control the cursor with functions inside pygame.mouse.\n\nThis cursors module contains functions for loading and decoding various\ncursor formats. These allow you to easily store your cursors in external files\nor directly as encoded python strings.\n\nThe module includes several standard cursors. The pygame.mouse.set_cursor()\nfunction takes several arguments. All those arguments have been stored in a\nsingle tuple you can call like this:\n\n>>> pygame.mouse.set_cursor(*pygame.cursors.arrow)\n\nThe following variables can be passed to pygame.mouse.set_cursor function:\n\npygame.cursors.arrow\n\npygame.cursors.diamond\n\npygame.cursors.broken_x\n\npygame.cursors.tri_left\n\npygame.cursors.tri_right\n\nThis module also contains a few cursors as formatted strings. You'll need to\npass these to pygame.cursors.compile() function before you can use them.\nThe example call would look like this:\n\n>>> cursor = pygame.cursors.compile(pygame.cursors.textmarker_strings)\n>>> pygame.mouse.set_cursor((8, 16), (0, 0), *cursor)\n\nThe following strings can be converted into cursor bitmaps with\npygame.cursors.compile() :\n\npygame.cursors.thickarrow_strings\n\npygame.cursors.sizer_x_strings\n\npygame.cursors.sizer_y_strings\n\npygame.cursors.sizer_xy_strings\n\npygame.cursor.textmarker_strings\n\nExample code for creating and settings cursors. (Click the mouse to switch cursor)\n\n# pygame setup\nimport pygame\n\npygame.init()\nscreen = pygame.display.set_mode([600, 400])\npygame.display.set_caption(\"Example code for the cursors module\")\n\n# create a system cursor\nsystem = pygame.cursors.Cursor(pygame.SYSTEM_CURSOR_NO)\n\n# create bitmap cursors\nbitmap_1 = pygame.cursors.Cursor(*pygame.cursors.arrow)\nbitmap_2 = pygame.cursors.Cursor(\n    (24, 24), (0, 0), *pygame.cursors.compile(pygame.cursors.thickarrow_strings)\n)\n\n# create a color cursor\nsurf = pygame.Surface((40, 40)) # you could also load an image\nsurf.fill((120, 50, 50))        # and use that as your surface\ncolor = pygame.cursors.Cursor((20, 20), surf)\n\ncursors = [system, bitmap_1, bitmap_2, color]\ncursor_index = 0\n\npygame.mouse.set_cursor(cursors[cursor_index])\n\nclock = pygame.time.Clock()\ngoing = True\nwhile going:\n    clock.tick(60)\n    screen.fill((0, 75, 30))\n    pygame.display.flip()\n\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):\n            going = False\n\n        # if the mouse is clicked it will switch to a new cursor\n        if event.type == pygame.MOUSEBUTTONDOWN:\n            cursor_index += 1\n            cursor_index %= len(cursors)\n            pygame.mouse.set_cursor(cursors[cursor_index])\n\npygame.quit()"
#define DOC_CURSORS_COMPILE "pygame.cursors.compile()\n\nCreate binary cursor data from simple strings.\n\ncompile(strings, black='X', white='.', xor='o') -> tuple\n\nA sequence of strings can be used to create binary cursor data for the\nsystem cursor. This returns the binary data in the form of two tuples.\nThose can be passed as the third and fourth arguments respectively of the\npygame.mouse.set_cursor() function.\n\nIf you are creating your own cursor strings, you can use any value represent\nthe black and white pixels. Some system allow you to set a special toggle\ncolor for the system color, this is also called the xor color. If the system\ndoes not support xor cursors, that color will simply be black.\n\nThe height must be divisible by 8. The width of the strings must all be equal\nand be divisible by 8. If these two conditions are not met, ValueError is\nraised.\nAn example set of cursor strings looks like this\n\nthickarrow_strings = (               #sized 24x24\n  \"XX                      \",\n  \"XXX                     \",\n  \"XXXX                    \",\n  \"XX.XX                   \",\n  \"XX..XX                  \",\n  \"XX...XX                 \",\n  \"XX....XX                \",\n  \"XX.....XX               \",\n  \"XX......XX              \",\n  \"XX.......XX             \",\n  \"XX........XX            \",\n  \"XX........XXX           \",\n  \"XX......XXXXX           \",\n  \"XX.XXX..XX              \",\n  \"XXXX XX..XX             \",\n  \"XX   XX..XX             \",\n  \"     XX..XX             \",\n  \"      XX..XX            \",\n  \"      XX..XX            \",\n  \"       XXXX             \",\n  \"       XX               \",\n  \"                        \",\n  \"                        \",\n  \"                        \")"
#define DOC_CURSORS_LOADXBM "pygame.cursors.load_xbm()\n\nLoad cursor data from an XBM file.\n\nload_xbm(curs, mask) -> tuple\n\nThis loads cursors for a simple subset of XBM files. XBM files are\ntraditionally used to store cursors on UNIX systems, they are an ASCII\nformat used to represent simple images.\n\nSometimes the black and white color values will be split into two separate\nXBM files. You can pass a second maskfile argument to load the two\nimages into a single cursor.\n\nThe cursorfile and maskfile arguments can either be filenames or file-like\nobject with the readlines method.\n\nThe return value cursor_args can be passed directly to the\npygame.mouse.set_cursor() function."
#define DOC_CURSORS_CURSOR "pygame.cursors.Cursor\n\nPygame object representing a cursor.\n\nCursor(constant=...) -> Cursor\n\nCursor(cursor) -> Cursor\n\nCursor(size, hotspot, xormasks, andmasks) -> Cursor\n\nCursor(hotspot, surface) -> Cursor\n\nIn pygame 2, there are 3 types of cursors you can create to give your\ngame that little bit of extra polish. There's bitmap type cursors,\nwhich existed in pygame 1.x, and are compiled from a string or load from an xbm file.\nThen there are system type cursors, where you choose a preset that will\nconvey the same meaning but look native across different operating systems.\nFinally you can create a color cursor, which displays a pygame surface as the cursor.\n\nCreating a system cursor\n\nChoose a constant from this list, pass it into pygame.cursors.Cursor(constant),\nand you're good to go. Be advised that not all systems support every system\ncursor, and you may get a substitution instead. For example, on macOS,\nWAIT/WAITARROW should show up as an arrow, and SIZENWSE/SIZENESW/SIZEALL\nshould show up as a closed hand. And on Wayland, every SIZE cursor should\nshow up as a hand.\n\nPygame Cursor Constant           Description\n--------------------------------------------\npygame.SYSTEM_CURSOR_ARROW       arrow\npygame.SYSTEM_CURSOR_IBEAM       i-beam\npygame.SYSTEM_CURSOR_WAIT        wait\npygame.SYSTEM_CURSOR_CROSSHAIR   crosshair\npygame.SYSTEM_CURSOR_WAITARROW   small wait cursor\n                                 (or wait if not available)\npygame.SYSTEM_CURSOR_SIZENWSE    double arrow pointing\n                                 northwest and southeast\npygame.SYSTEM_CURSOR_SIZENESW    double arrow pointing\n                                 northeast and southwest\npygame.SYSTEM_CURSOR_SIZEWE      double arrow pointing\n                                 west and east\npygame.SYSTEM_CURSOR_SIZENS      double arrow pointing\n                                 north and south\npygame.SYSTEM_CURSOR_SIZEALL     four pointed arrow pointing\n                                 north, south, east, and west\npygame.SYSTEM_CURSOR_NO          slashed circle or crossbones\npygame.SYSTEM_CURSOR_HAND        hand\n\nCreating a cursor without passing arguments\n\nIn addition to the cursor constants available and described above, you can\nalso call pygame.cursors.Cursor(), and your cursor is ready (doing that\nis the same as calling pygame.cursors.Cursor(pygame.SYSTEM_CURSOR_ARROW).\nDoing one of those calls actually creates a system cursor using the default\nnative image.\n\nCreating a color cursor\n\nTo create a color cursor, create a Cursor from a hotspot and a surface.\nhotspot are (x,y) coordinates that determine where in the cursor the exact point is.\nThe hotspot position must be within the bounds of the surface.\n\nCreating a bitmap cursor\n\nWhen the mouse cursor is visible, it will be displayed as a black and white\nbitmap using the given bitmask arrays. The size is a sequence containing\nthe cursor width and height. hotspot is a sequence containing the cursor\nhotspot position.\n\nA cursor has a width and height, but a mouse position is represented by a\nset of point coordinates. So the value passed into the cursor hotspot\nvariable helps pygame to actually determine at what exact point the cursor\nis at.\n\nxormasks is a sequence of bytes containing the cursor xor data masks.\nLastly andmasks, a sequence of bytes containing the cursor bitmask data.\nTo create these variables, we can make use of the\npygame.cursors.compile() function.\n\nWidth and height must be a multiple of 8, and the mask arrays must be the\ncorrect size for the given width and height. Otherwise an exception is raised.\n\nNew in pygame 2.0.1.\n\n"
#define DOC_CURSORS_CURSOR_COPY "copy()\n\nCopy the current cursor.\n\ncopy() -> Cursor\n\nReturns a new Cursor object with the same data and hotspot as the original."
#define DOC_CURSORS_CURSOR_TYPE "type\n\nGet the cursor type.\n\ntype -> Literal['system', 'color', 'bitmap']\n\nThe type will be \"system\", \"bitmap\", or \"color\"."
#define DOC_CURSORS_CURSOR_DATA "data\n\nGet the cursor data.\n\ndata -> ...\n\nReturns the data that was used to create this cursor object, wrapped up in a tuple."
