/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_GFXDRAW "pygame.gfxdraw\n\n\n\npygame module for drawing shapes\n\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If\nyou use this, your code may break with the next pygame release.\n\nThe pygame package does not import gfxdraw automatically when loaded, so it\nmust imported explicitly to be used.\n\nimport pygame\nimport pygame.gfxdraw\n\nFor all functions the arguments are strictly positional and integers are\naccepted for coordinates and radii. The color argument can be one of the\nfollowing formats:\n\na pygame.Color object\n\nan (RGB) triplet (tuple/list)\n\nan (RGBA) quadruplet (tuple/list)\n\nThe functions rectangle() and box() will accept any (x, y, w, h)\nsequence for their rect argument, though pygame.Rect instances are\npreferred.\n\nTo draw a filled antialiased shape, first use the antialiased (aa*) version\nof the function, and then use the filled (filled_*) version.\nFor example:\n\ncol = (255, 0, 0)\nsurf.fill((255, 255, 255))\npygame.gfxdraw.aacircle(surf, x, y, 30, col)\npygame.gfxdraw.filled_circle(surf, x, y, 30, col)\n\nFor threading, each of the functions releases the GIL during the C part of\nthe call.\n\nSee the pygame.draw module for alternative draw methods.\nThe pygame.gfxdraw module differs from the pygame.draw module in\nthe API it uses and the different draw functions available.\npygame.gfxdraw wraps the primitives from the library called SDL_gfx,\nrather than using modified versions.\n\nNew in pygame 1.9.0."
#define DOC_GFXDRAW_PIXEL "pygame.gfxdraw.pixel()\n\ndraw a pixel\n\npixel(surface, x, y, color, /) -> None\n\nDraws a single pixel, at position (x ,y), on the given surface.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx (int) -- x coordinate of the pixel\n\ny (int) -- y coordinate of the pixel\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_HLINE "pygame.gfxdraw.hline()\n\ndraw a horizontal line\n\nhline(surface, x1, x2, y, color, /) -> None\n\nDraws a straight horizontal line ((x1, y) to (x2, y)) on the given\nsurface. There are no endcaps.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx1 (int) -- x coordinate of one end of the line\n\nx2 (int) -- x coordinate of the other end of the line\n\ny (int) -- y coordinate of the line\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_VLINE "pygame.gfxdraw.vline()\n\ndraw a vertical line\n\nvline(surface, x, y1, y2, color, /) -> None\n\nDraws a straight vertical line ((x, y1) to (x, y2)) on the given\nsurface. There are no endcaps.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx (int) -- x coordinate of the line\n\ny1 (int) -- y coordinate of one end of the line\n\ny2 (int) -- y coordinate of the other end of the line\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_LINE "pygame.gfxdraw.line()\n\ndraw a line\n\nline(surface, x1, y1, x2, y2, color, /) -> None\n\nDraws a straight line ((x1, y1) to (x2, y2)) on the given surface.\nThere are no endcaps.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx1 (int) -- x coordinate of one end of the line\n\ny1 (int) -- y coordinate of one end of the line\n\nx2 (int) -- x coordinate of the other end of the line\n\ny2 (int) -- y coordinate of the other end of the line\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_RECTANGLE "pygame.gfxdraw.rectangle()\n\ndraw a rectangle\n\nrectangle(surface, rect, color, /) -> None\n\nDraws an unfilled rectangle on the given surface. For a filled rectangle use\nbox().\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nrect (Rect) -- rectangle to draw, position and dimensions\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType\n\nThe rect.bottom and rect.right attributes of a pygame.Rect\nalways lie one pixel outside of its actual border. Therefore, these\nvalues will not be included as part of the drawing."
#define DOC_GFXDRAW_BOX "pygame.gfxdraw.box()\n\ndraw a filled rectangle\n\nbox(surface, rect, color, /) -> None\n\nDraws a filled rectangle on the given surface. For an unfilled rectangle use\nrectangle().\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nrect (Rect) -- rectangle to draw, position and dimensions\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType\n\nThe rect.bottom and rect.right attributes of a pygame.Rect\nalways lie one pixel outside of its actual border. Therefore, these\nvalues will not be included as part of the drawing.\n\nThe pygame.Surface.fill() method works just as well for drawing\nfilled rectangles. In fact pygame.Surface.fill() can be hardware\naccelerated on some platforms with both software and hardware display\nmodes."
#define DOC_GFXDRAW_CIRCLE "pygame.gfxdraw.circle()\n\ndraw a circle\n\ncircle(surface, x, y, r, color, /) -> None\n\nDraws an unfilled circle on the given surface. For a filled circle use\nfilled_circle().\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx (int) -- x coordinate of the center of the circle\n\ny (int) -- y coordinate of the center of the circle\n\nr (int) -- radius of the circle\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_AACIRCLE "pygame.gfxdraw.aacircle()\n\ndraw an antialiased circle\n\naacircle(surface, x, y, r, color, /) -> None\n\nDraws an unfilled antialiased circle on the given surface.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx (int) -- x coordinate of the center of the circle\n\ny (int) -- y coordinate of the center of the circle\n\nr (int) -- radius of the circle\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_FILLEDCIRCLE "pygame.gfxdraw.filled_circle()\n\ndraw a filled circle\n\nfilled_circle(surface, x, y, r, color, /) -> None\n\nDraws a filled circle on the given surface. For an unfilled circle use\ncircle().\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx (int) -- x coordinate of the center of the circle\n\ny (int) -- y coordinate of the center of the circle\n\nr (int) -- radius of the circle\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_ELLIPSE "pygame.gfxdraw.ellipse()\n\ndraw an ellipse\n\nellipse(surface, x, y, rx, ry, color, /) -> None\n\nDraws an unfilled ellipse on the given surface. For a filled ellipse use\nfilled_ellipse().\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx (int) -- x coordinate of the center of the ellipse\n\ny (int) -- y coordinate of the center of the ellipse\n\nrx (int) -- horizontal radius of the ellipse\n\nry (int) -- vertical radius of the ellipse\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_AAELLIPSE "pygame.gfxdraw.aaellipse()\n\ndraw an antialiased ellipse\n\naaellipse(surface, x, y, rx, ry, color, /) -> None\n\nDraws an unfilled antialiased ellipse on the given surface.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx (int) -- x coordinate of the center of the ellipse\n\ny (int) -- y coordinate of the center of the ellipse\n\nrx (int) -- horizontal radius of the ellipse\n\nry (int) -- vertical radius of the ellipse\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_FILLEDELLIPSE "pygame.gfxdraw.filled_ellipse()\n\ndraw a filled ellipse\n\nfilled_ellipse(surface, x, y, rx, ry, color, /) -> None\n\nDraws a filled ellipse on the given surface. For an unfilled ellipse use\nellipse().\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx (int) -- x coordinate of the center of the ellipse\n\ny (int) -- y coordinate of the center of the ellipse\n\nrx (int) -- horizontal radius of the ellipse\n\nry (int) -- vertical radius of the ellipse\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_ARC "pygame.gfxdraw.arc()\n\ndraw an arc\n\narc(surface, x, y, r, start_angle, stop_angle, color, /) -> None\n\nDraws an arc on the given surface. For an arc with its endpoints connected\nto its center use pie().\n\nThe two angle arguments are given in degrees and indicate the start and stop\npositions of the arc. The arc is drawn in a clockwise direction from the\nstart_angle to the stop_angle. If start_angle == stop_angle,\nnothing will be drawn\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx (int) -- x coordinate of the center of the arc\n\ny (int) -- y coordinate of the center of the arc\n\nr (int) -- radius of the arc\n\nstart_angle (int) -- start angle in degrees\n\nstop_angle (int) -- stop angle in degrees\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType\n\nThis function uses degrees while the pygame.draw.arc() function\nuses radians."
#define DOC_GFXDRAW_PIE "pygame.gfxdraw.pie()\n\ndraw a pie\n\npie(surface, x, y, r, start_angle, stop_angle, color, /) -> None\n\nDraws an unfilled pie on the given surface. A pie is an arc() with its\nendpoints connected to its center.\n\nThe two angle arguments are given in degrees and indicate the start and stop\npositions of the pie. The pie is drawn in a clockwise direction from the\nstart_angle to the stop_angle. If start_angle == stop_angle,\na straight line will be drawn from the center position at the given angle,\nto a length of the radius.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx (int) -- x coordinate of the center of the pie\n\ny (int) -- y coordinate of the center of the pie\n\nr (int) -- radius of the pie\n\nstart_angle (int) -- start angle in degrees\n\nstop_angle (int) -- stop angle in degrees\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_TRIGON "pygame.gfxdraw.trigon()\n\ndraw a trigon/triangle\n\ntrigon(surface, x1, y1, x2, y2, x3, y3, color, /) -> None\n\nDraws an unfilled trigon (triangle) on the given surface. For a filled\ntrigon use filled_trigon().\n\nA trigon can also be drawn using polygon() e.g.\npolygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx1 (int) -- x coordinate of the first corner of the trigon\n\ny1 (int) -- y coordinate of the first corner of the trigon\n\nx2 (int) -- x coordinate of the second corner of the trigon\n\ny2 (int) -- y coordinate of the second corner of the trigon\n\nx3 (int) -- x coordinate of the third corner of the trigon\n\ny3 (int) -- y coordinate of the third corner of the trigon\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_AATRIGON "pygame.gfxdraw.aatrigon()\n\ndraw an antialiased trigon/triangle\n\naatrigon(surface, x1, y1, x2, y2, x3, y3, color, /) -> None\n\nDraws an unfilled antialiased trigon (triangle) on the given surface.\n\nAn aatrigon can also be drawn using aapolygon() e.g.\naapolygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx1 (int) -- x coordinate of the first corner of the trigon\n\ny1 (int) -- y coordinate of the first corner of the trigon\n\nx2 (int) -- x coordinate of the second corner of the trigon\n\ny2 (int) -- y coordinate of the second corner of the trigon\n\nx3 (int) -- x coordinate of the third corner of the trigon\n\ny3 (int) -- y coordinate of the third corner of the trigon\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_FILLEDTRIGON "pygame.gfxdraw.filled_trigon()\n\ndraw a filled trigon/triangle\n\nfilled_trigon(surface, x1, y1, x2, y2, x3, y3, color, /) -> None\n\nDraws a filled trigon (triangle) on the given surface. For an unfilled\ntrigon use trigon().\n\nA filled_trigon can also be drawn using filled_polygon() e.g.\nfilled_polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\nx1 (int) -- x coordinate of the first corner of the trigon\n\ny1 (int) -- y coordinate of the first corner of the trigon\n\nx2 (int) -- x coordinate of the second corner of the trigon\n\ny2 (int) -- y coordinate of the second corner of the trigon\n\nx3 (int) -- x coordinate of the third corner of the trigon\n\ny3 (int) -- y coordinate of the third corner of the trigon\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType"
#define DOC_GFXDRAW_POLYGON "pygame.gfxdraw.polygon()\n\ndraw a polygon\n\npolygon(surface, points, color, /) -> None\n\nDraws an unfilled polygon on the given surface. For a filled polygon use\nfilled_polygon().\n\nThe adjacent points in the points argument, as well as the first\nand last points, will be connected by line segments.\ne.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will\nbe drawn from (x1, y1) to (x2, y2), from (x2, y2) to\n(x3, y3), and from (x3, y3) to (x1, y1).\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\npoints (tuple(point) or list(point)) -- a sequence of 3 or more (x, y) coordinates, where each\npoint in the sequence must be a\ntuple/list/pygame.math.Vector2 of 2 ints/floats (float values\nwill be truncated)\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType\n\nRaises\n\nValueError -- if len(points) < 3 (must have at least 3 points)\n\nIndexError -- if len(point) < 2 (each point must have\nat least 2 items)"
#define DOC_GFXDRAW_AAPOLYGON "pygame.gfxdraw.aapolygon()\n\ndraw an antialiased polygon\n\naapolygon(surface, points, color, /) -> None\n\nDraws an unfilled antialiased polygon on the given surface.\n\nThe adjacent points in the points argument, as well as the first\nand last points, will be connected by line segments.\ne.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will\nbe drawn from (x1, y1) to (x2, y2), from (x2, y2) to\n(x3, y3), and from (x3, y3) to (x1, y1).\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\npoints (tuple(point) or list(point)) -- a sequence of 3 or more (x, y) coordinates, where each\npoint in the sequence must be a\ntuple/list/pygame.math.Vector2 of 2 ints/floats (float values\nwill be truncated)\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType\n\nRaises\n\nValueError -- if len(points) < 3 (must have at least 3 points)\n\nIndexError -- if len(point) < 2 (each point must have\nat least 2 items)"
#define DOC_GFXDRAW_FILLEDPOLYGON "pygame.gfxdraw.filled_polygon()\n\ndraw a filled polygon\n\nfilled_polygon(surface, points, color, /) -> None\n\nDraws a filled polygon on the given surface. For an unfilled polygon use\npolygon().\n\nThe adjacent points in the points argument, as well as the first\nand last points, will be connected by line segments.\ne.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will\nbe drawn from (x1, y1) to (x2, y2), from (x2, y2) to\n(x3, y3), and from (x3, y3) to (x1, y1).\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\npoints (tuple(point) or list(point)) -- a sequence of 3 or more (x, y) coordinates, where each\npoint in the sequence must be a\ntuple/list/pygame.math.Vector2 of 2 ints/floats (float values\nwill be truncated)`\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType\n\nRaises\n\nValueError -- if len(points) < 3 (must have at least 3 points)\n\nIndexError -- if len(point) < 2 (each point must have\nat least 2 items)"
#define DOC_GFXDRAW_TEXTUREDPOLYGON "pygame.gfxdraw.textured_polygon()\n\ndraw a textured polygon\n\ntextured_polygon(surface, points, texture, tx, ty, /) -> None\n\nDraws a textured polygon on the given surface. For better performance, the\nsurface and the texture should have the same format.\n\nA per-pixel alpha texture blit to a per-pixel alpha surface will differ from\na pygame.Surface.blit() blit. Also, a per-pixel alpha texture cannot be\nused with an 8-bit per pixel destination.\n\nThe adjacent points in the points argument, as well as the first\nand last points, will be connected by line segments.\ne.g. For the points [(x1, y1), (x2, y2), (x3, y3)] a line segment will\nbe drawn from (x1, y1) to (x2, y2), from (x2, y2) to\n(x3, y3), and from (x3, y3) to (x1, y1).\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\npoints (tuple(point) or list(point)) -- a sequence of 3 or more (x, y) coordinates, where each\npoint in the sequence must be a\ntuple/list/pygame.math.Vector2 of 2 ints/floats (float values\nwill be truncated)\n\ntexture (Surface) -- texture to draw on the polygon\n\ntx (int) -- x offset of the texture\n\nty (int) -- y offset of the texture\n\nReturns\n\nNone\n\nReturn type\n\nNoneType\n\nRaises\n\nValueError -- if len(points) < 3 (must have at least 3 points)\n\nIndexError -- if len(point) < 2 (each point must have\nat least 2 items)"
#define DOC_GFXDRAW_BEZIER "pygame.gfxdraw.bezier()\n\ndraw a Bezier curve\n\nbezier(surface, points, steps, color, /) -> None\n\nDraws a Bézier curve on the given surface.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\npoints (tuple(point) or list(point)) -- a sequence of 3 or more (x, y) coordinates used to form a\ncurve, where each point in the sequence must be a\ntuple/list/pygame.math.Vector2 of 2 ints/floats (float values\nwill be truncated)\n\nsteps (int) -- number of steps for the interpolation, the minimum is 2\n\ncolor (Color or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nReturns\n\nNone\n\nReturn type\n\nNoneType\n\nRaises\n\nValueError -- if steps < 2\n\nValueError -- if len(points) < 3 (must have at least 3 points)\n\nIndexError -- if len(point) < 2 (each point must have\nat least 2 items)\n\nThis function supports up to around 150-200 points before the algorithm\nbreaks down."
