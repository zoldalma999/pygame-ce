/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_FONT "pygame.font\n\n\n\npygame module for loading and rendering fonts\n\nThe font module allows for rendering TrueType fonts into Surface objects.\nThis module is built on top of the SDL_ttf library, which comes with all\nnormal pygame installations.\n\nMost of the work done with fonts are done by using the actual Font objects.\nThe module by itself only has routines to support the creation of Font objects\nwith pygame.font.Font().\n\nYou can load fonts from the system by using the pygame.font.SysFont()\nfunction. There are a few other functions to help look up the system fonts.\n\nPygame comes with a builtin default font, freesansbold. This can always be\naccessed by passing None as the font name.\n\nBefore pygame 2.0.3, pygame.font accepts any UCS-2 / UTF-16 character\n('\\u0001' to '\\uFFFF'). After 2.0.3, pygame.font built with SDL_ttf\n2.0.15 accepts any valid UCS-4 / UTF-32 character\n(like emojis, if the font has them) ('\\U00000001' to '\\U0010FFFF')).\nMore about this in Font.render().\n\nBefore pygame 2.0.3, this character space restriction can be avoided by\nusing the  pygame.freetype based pygame.ftfont to emulate the Font\nmodule. This can be used by defining the environment variable PYGAME_FREETYPE\nbefore the first import of pygame. Since the problem pygame.ftfont\nsolves no longer exists, it will likely be removed in the future."
#define DOC_FONT_INIT "pygame.font.init()\n\ninitialize the font module\n\ninit() -> None\n\nThis method is called automatically by pygame.init(). It initializes the\nfont module. The module must be initialized before any other functions will\nwork.\n\nIt is safe to call this function more than once."
#define DOC_FONT_QUIT "pygame.font.quit()\n\nuninitialize the font module\n\nquit() -> None\n\nManually uninitialize SDL_ttf's font system. This is called automatically by\npygame.quit().\n\nIt is safe to call this function even if font is currently not initialized.\n\nPreviously created font objects will be invalid after the font module is quit."
#define DOC_FONT_GETINIT "pygame.font.get_init()\n\ntrue if the font module is initialized\n\nget_init() -> bool\n\nTest if the font module is initialized or not."
#define DOC_FONT_GETDEFAULTFONT "pygame.font.get_default_font()\n\nget the filename of the default font\n\nget_default_font() -> string\n\nReturn the filename of the system font. This is not the full path to the\nfile. This file can usually be found in the same directory as the font\nmodule, but it can also be bundled in separate archives."
#define DOC_FONT_GETSDLTTFVERSION "pygame.font.get_sdl_ttf_version()\n\ngets SDL_ttf version\n\nget_sdl_ttf_version(linked=True) -> (major, minor, patch)\n\nReturns a tuple of integers that identify SDL_ttf's version.\nSDL_ttf is the underlying font rendering library, written in C,\non which pygame's font module depends. If 'linked' is True (the default),\nthe function returns the version of the linked TTF library.\nOtherwise this function returns the version of TTF pygame was compiled with\n\nNew in pygame-ce 2.1.3."
#define DOC_FONT_GETFONTS "pygame.font.get_fonts()\n\nget all available fonts\n\nget_fonts() -> list of strings\n\nReturns a list of all the fonts available on the system. The names of the\nfonts will be set to lowercase with all spaces and punctuation removed. This\nworks on most systems, but some will return an empty list if they cannot\nfind fonts.\n\nChanged in pygame-ce 2.1.3: Checks through user fonts instead of just global fonts for Windows."
#define DOC_FONT_MATCHFONT "pygame.font.match_font()\n\nfind a specific font on the system\n\nmatch_font(name, bold=False, italic=False) -> path\n\nReturns the full path to a font file on the system. If bold or italic are\nset to true, this will attempt to find the correct family of font.\n\nThe font name can also be an iterable of font names, a string of\ncomma-separated font names, or a bytes of comma-separated font names, in\nwhich case the set of names will be searched in order.\nIf none of the given names are found, None is returned.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nChanged in pygame-ce 2.1.3: Checks through user fonts instead of just global fonts for Windows.\n\nExample:\n\nprint pygame.font.match_font('bitstreamverasans')\n# output is: /usr/share/fonts/truetype/ttf-bitstream-vera/Vera.ttf\n# (but only if you have Vera on your system)"
#define DOC_FONT_SYSFONT "pygame.font.SysFont()\n\ncreate a Font object from the system fonts\n\nSysFont(name, size, bold=False, italic=False) -> Font\n\nReturn a new Font object that is loaded from the system fonts. The font will\nmatch the requested bold and italic flags. Pygame uses a small set of common\nfont aliases. If the specific font you ask for is not available, a reasonable\nalternative may be used. If a suitable system font is not found this will\nfall back on loading the default pygame font.\n\nThe font name can also be an iterable of font names, a string of\ncomma-separated font names, or a bytes of comma-separated font names, in\nwhich case the set of names will be searched in order.\n\nNew in pygame 2.0.1: Accept an iterable of font names.\n\nChanged in pygame-ce 2.1.3: Checks through user fonts instead of just global fonts for Windows."
#define DOC_FONT_FONT "pygame.font.Font\n\ncreate a new Font object from a file\n\nFont(filename=None, size=20) -> Font\n\nFont(filename, size) -> Font\n\nFont(pathlib.Path, size) -> Font\n\nFont(object, size) -> Font\n\nLoad a new font from a given filename or a python file object. The size is\nthe height of the font in pixels. If the filename is None the pygame\ndefault font will be loaded. If a font cannot be loaded from the arguments\ngiven an exception will be raised. Once the font is created the size cannot\nbe changed.\n\nFont objects are mainly used to render text into new Surface objects. The\nrender can emulate bold or italic features, but it is better to load from a\nfont with actual italic or bold glyphs.\n\nChanged in pygame-ce 2.1.4: If no arguments are given then the default font will be used and\na font size of 20 is used.\n\nChanged in pygame-ce 2.1.4: This class is also available through the pygame.Font\nalias.\n\n"
#define DOC_FONT_FONT_BOLD "bold\n\nGets or sets whether the font should be rendered in (faked) bold.\n\nbold -> bool\n\nWhether the font should be rendered in bold.\n\nWhen set to True, this enables the bold rendering of text. This\nis a fake stretching of the font that doesn't look good on many\nfont types. If possible load the font from a real bold font\nfile. While bold, the font will have a different width than when\nnormal. This can be mixed with the italic, underline and\nstrikethrough modes.\n\nNew in pygame 2.0.0."
#define DOC_FONT_FONT_NAME "name\n\nGets the font's name.\n\nname -> str\n\nRead only. Returns the font's name.\n\nNew in pygame-ce 2.2."
#define DOC_FONT_FONT_STYLENAME "style_name\n\nGets the font's style_name.\n\nstyle_name -> str\n\nRead only. Returns the font's style name. Style names are arbitrary, can be an empty string.\nHere are some examples:\n\n'Black', 'Bold', 'Bold Italic', 'BoldOblique', 'Book', 'BookOblique', 'Condensed', 'Condensed Oblique',\n'ExtraLight', 'Italic', 'Light', 'LightOblique', 'Medium', 'MediumOblique', 'Oblique', 'Regular',\n'Semibold', 'Semilight', 'Slanted'\n\nNew in pygame-ce 2.3.1."
#define DOC_FONT_FONT_ITALIC "italic\n\nGets or sets whether the font should be rendered in (faked) italics.\n\nitalic -> bool\n\nWhether the font should be rendered in italic.\n\nWhen set to True, this enables fake rendering of italic\ntext. This is a fake skewing of the font that doesn't look good\non many font types. If possible load the font from a real italic\nfont file. While italic the font will have a different width\nthan when normal. This can be mixed with the bold, underline and\nstrikethrough modes.\n\nNew in pygame 2.0.0."
#define DOC_FONT_FONT_UNDERLINE "underline\n\nGets or sets whether the font should be rendered with an underline.\n\nunderline -> bool\n\nWhether the font should be rendered in underline.\n\nWhen set to True, all rendered fonts will include an\nunderline. The underline is always one pixel thick, regardless\nof font size. This can be mixed with the bold, italic and\nstrikethrough modes.\n\nNew in pygame 2.0.0."
#define DOC_FONT_FONT_STRIKETHROUGH "strikethrough\n\nGets or sets whether the font should be rendered with a strikethrough.\n\nstrikethrough -> bool\n\nWhether the font should be rendered with a strikethrough.\n\nWhen set to True, all rendered fonts will include an\nstrikethrough. The strikethrough is always one pixel thick,\nregardless of font size. This can be mixed with the bold,\nitalic and underline modes.\n\nNew in pygame-ce 2.1.3."
#define DOC_FONT_FONT_ALIGN "align\n\nSet how rendered text is aligned when given a wrap length.\n\nalign -> int\n\nCan be set to pygame.FONT_LEFT, pygame.FONT_RIGHT, or\npygame.FONT_CENTER. This controls the text alignment behavior for the\nfont.\n\nRequires pygame built with SDL_ttf 2.20.0, as all official pygame\ndistributions are.\n\nNew in pygame-ce 2.1.4."
#define DOC_FONT_FONT_POINTSIZE "point_size\n\nGets or sets the font's point size\n\npoint_size -> int\n\nReturns the point size of the font. Will not be accurate upon initializing\nthe font object when the font name is initialized as None.\n\nNew in pygame-ce 2.3.1."
#define DOC_FONT_FONT_RENDER "render()\n\ndraw text on a new Surface\n\nrender(text, antialias, color, bgcolor=None, wraplength=0) -> Surface\n\nThis creates a new Surface with the specified text rendered on it.\npygame.font provides no way to directly draw text on an existing\nSurface: instead you must use Font.render() to create an image\n(Surface) of the text, then blit this image onto another Surface.\n\nNull characters ('x00') raise a TypeError. Both Unicode and char (byte)\nstrings are accepted. For Unicode strings only UCS-2 characters\n('\\u0001' to '\\uFFFF') were previously supported and any greater\nunicode codepoint would raise a UnicodeError. Now, characters in the\nUCS-4 range are supported. For char strings a LATIN1 encoding is\nassumed. The antialias argument is a boolean: if True the characters\nwill have smooth edges. The color argument is the color of the text\n[e.g.: (0,0,255) for blue]. The optional bgcolor argument is a color\nto use for the text background. If bgcolor is None the area outside\nthe text will be transparent.\n\nThe wraplength argument describes the width (in pixels) a line of text\nshould be before wrapping to a new line. See\npygame.font.Font.align for line-alignment settings.\n\nThe Surface returned will be of the dimensions required to hold the text.\n(the same as those returned by Font.size()). If an empty string is passed\nfor the text, a blank surface will be returned that is zero pixel wide and\nthe height of the font.\n\nDepending on the type of background and antialiasing used, this returns\ndifferent types of Surfaces. For performance reasons, it is good to know\nwhat type of image will be used. If antialiasing is not used, the return\nimage will always be an 8-bit image with a two-color palette. If the\nbackground is transparent a colorkey will be set. Antialiased images are\nrendered to 24-bit RGB images. If the background is transparent a\npixel alpha will be included.\n\nOptimization: if you know that the final destination for the text (on the\nscreen) will always have a solid background, and the text is antialiased,\nyou can improve performance by specifying the background color. This will\ncause the resulting image to maintain transparency information by\ncolorkey rather than (much less efficient) alpha values.\n\nFont rendering is not thread safe: only a single thread can render text\nat any time.\n\nChanged in pygame 2.0.3: Rendering UCS4 unicode works and does not\nraise an exception. Use if hasattr(pygame.font, \"UCS4\"): to see if\npygame supports rendering UCS4 unicode including more languages and\nemoji.\n\nChanged in pygame-ce 2.1.4: newline characters now will break text into\nmultiple lines.\n\nNew in pygame-ce 2.1.4: wraplength parameter\n\nChanged in pygame-ce 2.3.0: now supports keyword arguments."
#define DOC_FONT_FONT_SIZE "size()\n\ndetermine the amount of space needed to render text\n\nsize(text, /) -> (width, height)\n\nReturns the dimensions needed to render the text. This can be used to\nhelp determine the positioning needed for text before it is rendered. It\ncan also be used for word wrapping and other layout effects.\n\nBe aware that most fonts use kerning which adjusts the widths for\nspecific letter pairs. For example, the width for \"ae\" will not always\nmatch the width for \"a\" + \"e\"."
#define DOC_FONT_FONT_SETUNDERLINE "set_underline()\n\ncontrol if text is rendered with an underline\n\nset_underline(bool, /) -> None\n\nWhen enabled, all rendered fonts will include an underline. The underline\nis always one pixel thick, regardless of font size. This can be mixed\nwith the bold, italic and strikethrough modes.\n\nThis is the same as the underline attribute."
#define DOC_FONT_FONT_GETUNDERLINE "get_underline()\n\ncheck if text will be rendered with an underline\n\nget_underline() -> bool\n\nReturn True when the font underline is enabled.\n\nThis is the same as the underline attribute."
#define DOC_FONT_FONT_SETSTRIKETHROUGH "set_strikethrough()\n\ncontrol if text is rendered with a strikethrough\n\nset_strikethrough(bool, /) -> None\n\nWhen enabled, all rendered fonts will include a strikethrough. The\nstrikethrough is always one pixel thick, regardless of font size.\nThis can be mixed with the bold, italic and underline modes.\n\nThis is the same as the strikethrough attribute.\n\nNew in pygame-ce 2.1.3."
#define DOC_FONT_FONT_GETSTRIKETHROUGH "get_strikethrough()\n\ncheck if text will be rendered with a strikethrough\n\nget_strikethrough() -> bool\n\nReturn True when the font strikethrough is enabled.\n\nThis is the same as the strikethrough attribute.\n\nNew in pygame-ce 2.1.3."
#define DOC_FONT_FONT_SETBOLD "set_bold()\n\nenable fake rendering of bold text\n\nset_bold(bool, /) -> None\n\nEnables the bold rendering of text. This is a fake stretching of the font\nthat doesn't look good on many font types. If possible load the font from\na real bold font file. While bold, the font will have a different width\nthan when normal. This can be mixed with the italic, underline and\nstrikethrough modes.\n\nThis is the same as the bold attribute."
#define DOC_FONT_FONT_GETBOLD "get_bold()\n\ncheck if text will be rendered bold\n\nget_bold() -> bool\n\nReturn True when the font bold rendering mode is enabled.\n\nThis is the same as the bold attribute."
#define DOC_FONT_FONT_SETITALIC "set_italic()\n\nenable fake rendering of italic text\n\nset_italic(bool, /) -> None\n\nEnables fake rendering of italic text. This is a fake skewing of the font\nthat doesn't look good on many font types. If possible load the font from\na real italic font file. While italic the font will have a different\nwidth than when normal. This can be mixed with the bold, underline and\nstrikethrough modes.\n\nThis is the same as the italic attribute."
#define DOC_FONT_FONT_METRICS "metrics()\n\ngets the metrics for each character in the passed string\n\nmetrics(text, /) -> list\n\nThe list contains tuples for each character, which contain the minimum\nX offset, the maximum X offset, the minimum Y offset, the\nmaximum Y offset and the advance offset (bearing plus width) of the\ncharacter. [(minx, maxx, miny, maxy, advance), (minx, maxx, miny, maxy,\nadvance), ...]. None is entered in the list for each unrecognized\ncharacter.\n\nChanged in pygame-ce 2.5.4: This function now supports all unicode codepoints.\nPreviously, only a subset that was representable in UCS-2 was supported."
#define DOC_FONT_FONT_GETITALIC "get_italic()\n\ncheck if the text will be rendered italic\n\nget_italic() -> bool\n\nReturn True when the font italic rendering mode is enabled.\n\nThis is the same as the italic attribute."
#define DOC_FONT_FONT_GETLINESIZE "get_linesize()\n\nget the line space of the font text\n\nget_linesize() -> int\n\nReturn the height in pixels for a line of text with the font. When\nrendering multiple lines of text this is the recommended amount of space\nbetween lines."
#define DOC_FONT_FONT_GETHEIGHT "get_height()\n\nget the height of the font\n\nget_height() -> int\n\nReturn the height in pixels of the actual rendered text. This is the\naverage size for each glyph in the font."
#define DOC_FONT_FONT_SETPOINTSIZE "set_point_size()\n\nset the point size of the font\n\nset_point_size(size, /) -> int\n\nSets the point size of the font, which is the value that was used to\ninitialize this font.\n\nNew in pygame-ce 2.3.1."
#define DOC_FONT_FONT_GETPOINTSIZE "get_point_size()\n\nget the point size of the font\n\nget_point_size() -> int\n\nReturns the point size of the font. Will not be accurate upon\ninitializing the font object when the font name is initialized\nas None.\n\nNew in pygame-ce 2.3.1."
#define DOC_FONT_FONT_GETASCENT "get_ascent()\n\nget the ascent of the font\n\nget_ascent() -> int\n\nReturn the height in pixels for the font ascent. The ascent is the number\nof pixels from the font baseline to the top of the font."
#define DOC_FONT_FONT_GETDESCENT "get_descent()\n\nget the descent of the font\n\nget_descent() -> int\n\nReturn the height in pixels for the font descent. The descent is the\nnumber of pixels from the font baseline to the bottom of the font."
#define DOC_FONT_FONT_SETSCRIPT "set_script()\n\nset the script code for text shaping\n\nset_script(str, /) -> None\n\nSets the script used by harfbuzz text shaping, taking a 4 character\nscript code as input. For example, Hindi is written in the Devanagari\nscript, for which the script code is \"Deva\". See the full list of\nscript codes in ISO 15924.\n\nThis method requires pygame built with SDL_ttf 2.20.0 or above. Otherwise the\nmethod will raise a pygame.error.\n\nNew in pygame-ce 2.1.4."
#define DOC_FONT_FONT_SETDIRECTION "set_direction()\n\nset the script direction for text shaping\n\nset_direction(direction) -> None\n\nSets the font direction for harfbuzz text rendering, taking in an integer\nbetween 0 and 3 (inclusive) as input. There are convenient constants defined\nfor use in this method.\n\npygame.DIRECTION_LTR is for left-to-right text\n\npygame.DIRECTION_RTL is for right-to-left text\n\npygame.DIRECTION_TTB is for top-to-bottom text\n\npygame.DIRECTION_BTT is for bottom-to-top text\n\nThis method requires pygame built with SDL_ttf 2.20.0 or above. Otherwise the\nmethod will raise a pygame.error.\n\nmultiline renders with render() do not play nicely with top-to-bottom\nor bottom-to-top rendering.\n\nNew in pygame-ce 2.1.4."
