/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_SYSTEM "pygame.system\n\n\n\nPygame module to provide additional context about the system.\n\nNew in pygame-ce 2.2.0."
#define DOC_SYSTEM_GETCPUINSTRUCTIONSETS "pygame.system.get_cpu_instruction_sets()\n\nGet the information of CPU instruction sets.\n\nget_cpu_instruction_sets() -> _InstructionSets\n\nReturns a dict of the information of CPU instruction sets. The keys of\nthe dict are the names of instruction sets and the values determine\nwhether the instruction set is available.\n\nSome of functions like Surface.blit can be accelerated by SIMD\ninstruction sets like SSE2 or AVX2. By checking the availability of\ninstruction sets, you can check if these accelerations are available.\n\ndocstring of pygame.system.get_cpu_instruction_sets:13: (INFO/1) Possible title underline, too short for the title.\nTreating it as ordinary text because it's so short.\n\nHere is an example of the returned dict\n\n{\n    'ALTIVEC': False,\n    'MMX': True,\n    'SSE': True,\n    'SSE2': True,\n    'SSE3': True,\n    'SSE41': True,\n    'SSE42': True,\n    'AVX': True,\n    'AVX2': True,\n    'AVX512F': False,\n    'NEON': False,\n    'ARMSIMD': False,\n    'LSX': False,\n    'LASX': False\n}\n\nThe values of LSX and LASX will be always False if\nSDL version < 2.24.0.\n\nNew in pygame-ce 2.3.1.\n\nChanged in pygame-ce 2.4.0: removed RDTSC key,\nas it has been removed in pre-release SDL3"
#define DOC_SYSTEM_GETTOTALRAM "pygame.system.get_total_ram()\n\nGet the amount of RAM configured in the system.\n\nget_total_ram() -> int\n\nReturns the amount of RAM configured in the system in MiB.\n\nNew in pygame-ce 2.3.1."
#define DOC_SYSTEM_GETPREFPATH "pygame.system.get_pref_path()\n\nGet a writeable folder for your app.\n\nget_pref_path(org, app) -> str\n\nWhen distributing apps, it's helpful to have a way to get a writeable path,\nbecause it's what apps are expected to do, and because sometimes the local\nspace around the app isn't writeable to the app.\n\nThis function returns a platform specific path for your app to store\nsavegames, settings, and the like. This path is unique per user and\nper app name.\n\nIt takes two strings, org and app, referring to the \"organization\"\nand \"application name.\" For example, the organization could be \"Valve,\"\nand the application name could be \"Half Life 2.\" It then will figure out the\npreferred path, creating the folders referenced by the path if necessary,\nand return a string containing the absolute path.\n\nFor example:\n\nOn Windows, it would resemble\nC:\\Users\\bob\\AppData\\Roaming\\My Company\\My Program Name\\\n\nOn macOS, it would resemble\n/Users/bob/Library/Application Support/My Company/My Program Name/\n\nAnd on Linux it would resemble\n/home/bob/.local/share/My Company/My Program Name/\n\nSince the organization and app names can potentially be used as\na folder name, it is highly encouraged to avoid punctuation.\nInstead stick to letters, numbers, and spaces.\n\nThe appdirs library has similar functionality for this use case,\nbut has more \"folder types\" to choose from.\n\nNew in pygame-ce 2.2.0."
#define DOC_SYSTEM_GETPREFLOCALES "pygame.system.get_pref_locales()\n\nGet preferred locales set on the system.\n\nget_pref_locales() -> list[_Locale]\n\nReturns a list of \"locale\" dicts, sorted in descending order of preference\nset on the host OS (the most preferred locale is the first element). May\nalso be an empty list if pygame could not find this information.\n\nEach \"locale\" dict contains the language code which can be accessed by the\nkey \"language\". This language code is an ISO-639 language specifier\n(such as \"en\" for English, \"de\" for German, etc).\nA \"locale\" dict may also optionally contain a \"country\" field, whose\nvalue is an ISO-3166 country code (such as \"US\" for the United States,\n\"CA\" for Canada, etc). If this field is not set or undetermined, it is\nNone.\nA \"locale\" dict which looks like {'language': 'en', 'country': 'US'}\nindicates the user prefers American English, while\n{'language': 'en', 'country': None} indicates that the user prefers\nEnglish, generically.\n\nThis might be a bit of an expensive call because it has to query the OS. So\nthis function must not be called in a game loop, instead it's best to ask\nfor this once and save the results. However, this list can change when the\nuser changes a system preference outside of your program. pygame will send\na LOCALECHANGED event in this case, if possible, and you can call this\nfunction again to get an updated copy of preferred locales.\n\nNew in pygame-ce 2.2.0."
#define DOC_SYSTEM_GETPOWERSTATE "pygame.system.get_power_state()\n\nGet the current power supply state.\n\nget_power_state() -> Optional[PowerState]\n\nExperimental: feature available for testing and feedback.\nWe don't anticipate it changing, but it might if something important\nis brought up. Please leave get_power_state feedback with\nauthors\n\nReturns a PowerState object representing the power supply state.\n\nReturns None if the power state is unknown.\n\nThe PowerState object has several attributes:\n\nbattery_percent:\n    An integer between 0 and 100, representing the percentage of\n    battery life left.\n\nbattery_seconds:\n    An integer, representing the seconds of battery life left.\n    Could be None if the value is unknown.\n\non_battery:\n    True if the device is running on the battery (not plugged in).\n\nno_battery:\n    True if the device has no battery available (plugged in).\n\ncharging:\n    True if the device is charging battery (plugged in).\n\ncharged:\n    True if the battery of the device is fully charged (plugged in).\n\nplugged_in:\n    True if the device is plugged in.\n    Equivalent to `not on_battery`.\n\nhas_battery:\n    True if the device has battery.\n    Equivalent to `on_battery or not no_battery`.\n\nYou should never take a battery status as absolute truth. Batteries\n(especially failing batteries) are delicate hardware, and the values\nreported here are best estimates based on what that hardware reports. It's\nnot uncommon for older batteries to lose stored power much faster than it\nreports, or completely drain when reporting it has 20 percent left, etc.\n\nBattery status can change at any time; if you are concerned with power\nstate, you should call this function frequently, and perhaps ignore changes\nuntil they seem to be stable for a few seconds.\n\nIt's possible a platform can only report battery percentage or time left\nbut not both.\n\nNew in pygame-ce 2.4.0."
