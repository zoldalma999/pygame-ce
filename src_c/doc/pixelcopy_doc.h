/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_PIXELCOPY "pygame.pixelcopy\n\n\n\npygame module for general pixel array copying\n\nThe pygame.pixelcopy module contains functions for copying between\nsurfaces and objects exporting an array structure interface. It is a backend\nfor pygame.surfarray, adding NumPy support. But pixelcopy is more\ngeneral, and intended for direct use.\n\nThe array struct interface exposes an array's data in a standard way.\nIt was introduced in NumPy. In Python 2.7 and above it is replaced by the\nnew buffer protocol, though the buffer protocol is still a work in progress.\nThe array struct interface, on the other hand, is stable and works with earlier\nPython versions. So for now the array struct interface is the predominate way\npygame handles array introspection.\n\nFor 2d arrays of integer pixel values, the values are mapped to the\npixel format of the related surface. To get the actual color of a pixel\nvalue use pygame.Surface.unmap_rgb(). 2d arrays can only be used\ndirectly between surfaces having the same pixel layout.\n\nNew in pygame 1.9.2."
#define DOC_PIXELCOPY_SURFACETOARRAY "pygame.pixelcopy.surface_to_array()\n\ncopy surface pixels to an array object\n\nsurface_to_array(array, surface, kind='P', opaque=255, clear=0) -> None\n\nThe surface_to_array function copies pixels from a Surface object\nto a 2D or 3D array. Depending on argument kind and the target array\ndimension, a copy may be raw pixel value, RGB, a color component slice,\nor colorkey alpha transparency value. Recognized kind values are the\nsingle character codes 'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case\ninsensitive, so 'p' is equivalent to 'P'. The first two dimensions\nof the target must be the surface size (w, h).\n\nThe default 'P' kind code does a direct raw integer pixel (mapped) value\ncopy to a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array\nhaving shape (w, h, 3). For an 8 bit colormap surface this means the\ntable index is copied to a 2D array, not the table value itself. A 2D\narray's item size must be at least as large as the surface's pixel\nbyte size. The item size of a 3D array must be at least one byte.\n\nFor the 'R', 'G', 'B', and 'A' copy kinds a single color component\nof the unmapped surface pixels are copied to the target 2D array.\nFor kind 'A' and surfaces with source alpha (the surface was created with\nthe SRCALPHA flag), has a colorkey\n(set with Surface.set_colorkey()),\nor has a blanket alpha\n(set with Surface.set_alpha())\nthen the alpha values are those expected for a SDL surface.\nIf a surface has no explicit alpha value, then the target array\nis filled with the value of the optional opaque surface_to_array\nargument (default 255: not transparent).\n\nCopy kind 'C' is a special case for alpha copy of a source surface\nwith colorkey. Unlike the 'A' color component copy, the clear\nargument value is used for colorkey matches, opaque otherwise.\nBy default, a match has alpha 0 (totally transparent), while everything\nelse is alpha 255 (totally opaque). It is a more general implementation\nof pygame.surfarray.array_colorkey().\n\nSpecific to surface_to_array, a ValueError is raised for target arrays\nwith incorrect shape or item size. A TypeError is raised for an incorrect\nkind code. Surface specific problems, such as locking, raise a pygame.error."
#define DOC_PIXELCOPY_ARRAYTOSURFACE "pygame.pixelcopy.array_to_surface()\n\ncopy an array object to a surface\n\narray_to_surface(surface, array, /) -> None\n\nSee pygame.surfarray.blit_array()."
#define DOC_PIXELCOPY_MAPARRAY "pygame.pixelcopy.map_array()\n\ncopy an array to another array, using surface format\n\nmap_array(array, array, surface, /) -> None\n\nMap an array of color element values - (w, h, ..., 3) - to an array of\npixels - (w, h) according to the format of <surface>."
#define DOC_PIXELCOPY_MAKESURFACE "pygame.pixelcopy.make_surface()\n\nCopy an array to a new surface\n\npygame.pixelcopy.make_surface(array, /) -> Surface\n\nCreate a new Surface that best resembles the data and format of the array.\nThe array can be 2D or 3D with any sized integer values."
