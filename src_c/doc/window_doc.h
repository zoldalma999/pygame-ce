/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_WINDOW "pygame.Window\n\nPygame object that represents a window.\n\nWindow(title='pygame window', size=(640, 480), position=WINDOWPOS_UNDEFINED, *, fullscreen=..., fullscreen_desktop=..., opengl=..., vulkan=..., hidden=..., borderless=..., resizable=..., minimized=..., maximized=..., mouse_grabbed=..., keyboard_grabbed=..., input_focus=..., mouse_focus=..., allow_high_dpi=..., mouse_capture=..., always_on_top=..., utility=...) -> Window\n\nThe Window class (formerly known as _sdl2.video.Window), is a newly\npublished feature of pygame-ce 2.5.2. This class allows for programs\nto drive multiple windows on-screen at once, something not possible with\nthe pygame.display.set_mode() API. Not everything possible with\npygame.display is possible yet in the Window API, but the new\nwindow class will continue to be developed, and we're excited to share\nthe new functionality this class offers.\n\nParameters\n\ntitle (str) -- The title of the window.\n\nsize ((int, int)) -- The size of the window, in screen coordinates.\n\nposition ((int, int) or int) -- A tuple specifying the window position, or\nWINDOWPOS_CENTERED, or WINDOWPOS_UNDEFINED.\n\nfullscreen (bool) -- Create a fullscreen window using the window size as\nthe resolution (videomode change).\n\nfullscreen_desktop (bool) -- Create a fullscreen window using the current\ndesktop resolution.\n\nopengl (bool) -- Create a window with support for an OpenGL context.\n\nvulkan (bool) -- Create a window with support for a Vulkan instance.\n\nhidden (bool) -- Create a hidden window.\n\nborderless (bool) -- Create a window without borders.\n\nresizable (bool) -- Create a resizable window.\n\nminimized (bool) -- Create a mimized window.\n\nmaximized (bool) -- Create a maximized window.\n\nmouse_grabbed (bool) -- Create a window with grabbed mouse input.\n\nkeyboard_grabbed (bool) -- Create a window with grabbed keyboard input.\n\ninput_focus (bool) -- Create a window with input focus.\n\nmouse_focus (bool) -- Create a window with mouse focus.\n\nallow_high_dpi (bool) -- Create a window in high-DPI mode if supported.\n\nmouse_capture (bool) -- Create a window that has the mouse captured\n(unrelated to INPUT_GRABBED).\n\nalways_on_top (bool) -- Create a window that is always presented above\nothers.\n\nutility (bool) -- Create a window that doesn't appear in the task bar.\n\nEvent behavior if one Window is created: When the close button is pressed,\nthe QUIT event will be sent to the event queue.\n\nimport pygame\n\nwindow = pygame.Window()\n\nwhile True:\nfor event in pygame.event.get():\n    if event.type == pygame.QUIT:\n        pygame.quit()\n        raise SystemExit\n\nEvent behavior if multiple windows are created: When the close button is\npressed, a WINDOWCLOSE event is sent. You need to explicitly destroy\nthe window. Note that the event QUIT will only be sent if all\nwindows have been destroyed.\n\nimport pygame\n\nwindow1 = pygame.Window(position=(0,100))\nwindow2 = pygame.Window(position=(700,100))\n\nwhile True:\nfor event in pygame.event.get():\n    if event.type == pygame.WINDOWCLOSE:\n        id = event.window.id\n        print(f\"WINDOWCLOSE event sent to Window #{id}.\")\n        event.window.destroy()\n\n    if event.type == pygame.QUIT:\n        print(f\"Last window is destroyed. QUIT event was sent.\")\n        pygame.quit()\n        raise SystemExit\n\nNew in pygame-ce 2.4.0.\n\nChanged in pygame-ce 2.5.0: when opengl is True, the Window has an OpenGL context created by pygame\n\nChanged in pygame-ce 2.5.1: Window is now a base class, allowing subclassing\n\n"
#define DOC_WINDOW_GRABMOUSE "grab_mouse\n\nGet or set the window's mouse grab mode.\n\ngrab_mouse -> bool\n\nWhen this attribute is set to True, the window will try to confine the mouse\ncursor to itself.\n\nNote this only set the \"mode\" of grab. The mouse may be confined to another window\ndepending on the window focus. To get if the mouse is currently restricted to this\nwindow, please use mouse_grabbed.\n\nmouse_grabbed\n\nNew in pygame-ce 2.4.0."
#define DOC_WINDOW_GRABKEYBOARD "grab_keyboard\n\nGet or set the window's keyboard grab mode.\n\ngrab_keyboard -> bool\n\nWhen this attribute is set to True, the window will try to capture system\nkeyboard shortcuts like Alt+Tab or the Meta/Super key.\n\nThis attribute only set the \"mode\" of grab. The keyboard may be captured by\nanother window depending on the window focus. To get if keyboard is currently\ncaptured by this window, please use keyboard_grabbed.\n\nNote that not all system keyboard shortcuts can be captured by applications\n(one example is Ctrl+Alt+Del on Windows).\n\nWhen keyboard grab is enabled, pygame will continue to handle Alt+Tab when\nthe window is full-screen to ensure the user is not trapped in your application.\nIf you have a custom keyboard shortcut to exit fullscreen mode, you may suppress\nthis behavior with an environment variable, e.g.\nos.environ[\"SDL_ALLOW_ALT_TAB_WHILE_GRABBED\"] = \"0\".\n\nThis attribute requires SDL 2.0.16+.\n\nkeyboard_grabbed\n\nNew in pygame-ce 2.4.0."
#define DOC_WINDOW_MOUSEGRABBED "property mouse_grabbed\n\nGet if the mouse cursor is confined to the window (**read-only**).\n\nmouse_grabbed -> bool\n\nGet if the mouse cursor is currently grabbed and confined to the window.\n\nRoughly equivalent to this expression:\n\nwin.grab_mouse and (win is get_grabbed_window())\n\ngrab_mouse\n\nNew in pygame-ce 2.4.0."
#define DOC_WINDOW_KEYBOARDGRABBED "property keyboard_grabbed\n\nGet if the keyboard shortcuts are captured by the window (**read-only**).\n\nkeyboard_grabbed -> bool\n\nGet if the keyboard shortcuts are currently grabbed and captured by the window.\n\nRoughly equivalent to this expression:\n\nwin.grab_keyboard and (win is get_grabbed_window())\n\nThis attribute requires SDL 2.0.16+.\n\ngrab_keyboard\n\nNew in pygame-ce 2.4.0."
#define DOC_WINDOW_FOCUSED "property focused\n\nGet if the window is focused (**read-only**).\n\nfocused -> bool\n\nGet if the window is currently focused. The same result can be achieved using\nthe WINDOWFOCUSGAINED and WINDOWFOCUSLOST events.\n\nUse focus() to focus and raise the window.\n\nNew in pygame-ce 2.5.2."
#define DOC_WINDOW_TITLE "title\n\nGet or set the window title.\n\ntitle -> str\n\nAn empty string means that no title is set."
#define DOC_WINDOW_RESIZABLE "resizable\n\nGet or set whether the window is resizable.\n\nresizable -> bool"
#define DOC_WINDOW_BORDERLESS "borderless\n\nGets or sets whether the window is borderless.\n\nborderless -> bool\n\nYou can't change the border state of a fullscreen window."
#define DOC_WINDOW_ALWAYSONTOP "always_on_top\n\nGet or set whether the window is always on top.\n\nalways_on_top -> bool\n\nSetting the always-on-top mode requires SDL 2.0.16+.\n\nNew in pygame-ce 2.3.1."
#define DOC_WINDOW_ID "property id\n\nGet the unique window ID (**read-only**).\n\nid -> int"
#define DOC_WINDOW_MOUSERECT "property mouse_rect\n\nGet or set the mouse confinement rectangle of the window.\n\nmouse_rect -> Optional[Rect]\n\nSetting this attribute to a rect-like object confines the\ncursor to the specified area of this window.\n\nThis attribute can be None, meaning that there is no mouse rect.\n\nNote that this does NOT grab the cursor, it only defines the area a\ncursor is restricted to when the window has mouse focus.\n\nNew in pygame-ce 2.4.0."
#define DOC_WINDOW_SIZE "property size\n\nGet or set the window size in pixels.\n\nsize -> tuple[int, int]"
#define DOC_WINDOW_MINIMUMSIZE "property minimum_size\n\nGet or set the minimum size of the window's client area.\n\nminimum_size -> tuple[int, int]\n\nInitial value in most cases is (0, 0). If from_display_module()\nwas used to create the window and pygame.display.set_mode() was\ncalled with the SCALED flag, the initial value is the size used in\nthat call.\n\nRaises a ValueError if negative values are provided or\nif the width or height provided are greater than set\nmaximum width or height respectively. Unless maximum size\nis (0, 0) (initial value).\n\nmaximum_size.\n\nNew in pygame-ce 2.4.0."
#define DOC_WINDOW_MAXIMUMSIZE "property maximum_size\n\nGet or set the maximum size of the window's client area.\n\nmaximum_size -> tuple[int, int]\n\nInitial value is (0, 0).\n\nRaises a ValueError if negative values are provided or\nif the width or height provided are less than set minimum\nwidth or height respectively.\n\nminimum_size.\n\nNew in pygame-ce 2.4.0."
#define DOC_WINDOW_POSITION "property position\n\nGet or set the window position in screen coordinates.\n\nposition -> tuple[int, int]\n\nThe position may be a tuple of (x, y) coordinates or WINDOWPOS_CENTERED or\nWINDOWPOS_UNDEFINED. The origin is the topleft of the main display."
#define DOC_WINDOW_OPACITY "opacity\n\nGet or set the window opacity, between 0.0 (fully transparent) and 1.0 (fully opaque).\n\nopacity -> float"
#define DOC_WINDOW_OPENGL "property opengl\n\nGet if the window supports OpenGL.\n\nopengl -> bool\n\nTrue if the Window has an OpenGL context associated with it, False otherwise\n\nNew in pygame-ce 2.5.0."
#define DOC_WINDOW_UTILITY "property utility\n\nGet if the window is an utility window (**read-only**).\n\nutility -> bool\n\nTrue if the window doesn't appear in the task bar, False otherwise.\nThis only works for X11 and Windows, for other platforms, creating Window(utility=True) won't change anything.\n\nNew in pygame-ce 2.5.3."
#define DOC_WINDOW_FROMDISPLAYMODULE "classmethod from_display_module()\n\nCreate a Window object using window data from display module.\n\nfrom_display_module() -> Window\n\nDON'T USE THIS! If you want to draw to a surface and use the window\nAPI, use Window.get_surface() and Window.flip().\n\nCreate a Window object that uses the same window data from the pygame.display module, created upon calling\npygame.display.set_mode().\n\nDeprecated since pygame-ce 2.4.0."
#define DOC_WINDOW_GETSURFACE "get_surface()\n\nGet the window surface.\n\nget_surface() -> Surface\n\nReturns a \"display surface\" for this Window. The surface returned is\nanalogous to the surface returned by pygame.display.set_mode().\n\nThis method allows software rendering (classic pygame rendering) on top\nof the Window API. This method should not be called when using hardware\nrendering (coming soon).\n\nSimilarly to the \"display surface\" returned by pygame.display,\nthis surface will change size with the Window, and will become invalid\nafter the Window's destruction.\n\nflip()\n\nNew in pygame-ce 2.4.0."
#define DOC_WINDOW_FLIP "flip()\n\nUpdate the display surface to the window.\n\nflip() -> None\n\nUpdate pixel data from memory to be displayed in the window. This is the Window\nclass equivalent of pygame.display.flip().\n\nWith get_surface() this method allows software rendering (classic pygame rendering) flipping pixel data\nfrom an associated surface in memory to be displayed in the window. Alternatively, when this window has an\nassociated OpenGL context, this method will instead perform a GL buffer swap to the window.\n\nHere is a runnable example of using get_surface and flip:\n\nimport pygame\n\nwin = pygame.Window()\nsurf = win.get_surface()  # get the window surface\n\nwhile True:\n   for event in pygame.event.get():\n      if event.type == pygame.QUIT:\n            pygame.quit()\n            raise SystemExit\n\n   # draw something on the surface\n   surf.fill(\"red\")\n\n   win.flip()  # update the surface to the window\n\nNew in pygame-ce 2.4.0."
#define DOC_WINDOW_SETWINDOWED "set_windowed()\n\nEnable windowed mode (exit fullscreen).\n\nset_windowed() -> None\n\nset_fullscreen()"
#define DOC_WINDOW_SETFULLSCREEN "set_fullscreen()\n\nEnter fullscreen.\n\nset_fullscreen(desktop=False) -> None\n\nParameters\n\ndesktop (bool) -- If True, use the current desktop resolution.\nIf False, change the fullscreen resolution to the window size.\n\nset_windowed()."
#define DOC_WINDOW_DESTROY "destroy()\n\nDestroy the window.\n\ndestroy() -> None\n\nDestroys the internal window data of this Window object. This method is\ncalled automatically when this Window object is garbage collected, so\nthere usually aren't any reasons to call it manually.\n\nOther methods that try to manipulate that window data will raise an error."
#define DOC_WINDOW_HIDE "hide()\n\nHide the window.\n\nhide() -> None"
#define DOC_WINDOW_SHOW "show()\n\nShow the window.\n\nshow() -> None"
#define DOC_WINDOW_FOCUS "focus()\n\nSet the window to be focused.\n\nfocus(input_only=False) -> None\n\nRaises the window above other windows and sets the input focus.\n\nParameters\n\ninput_only -- if True, the window will be given input focus\nbut may be completely obscured by other windows.\nOnly supported on X11. This has been deprecated and\nmay be removed in a future version.\n\nDeprecated since pygame-ce 2.5.3: input_only argument"
#define DOC_WINDOW_RESTORE "restore()\n\nRestore the size and position of a minimized or maximized window.\n\nrestore() -> None"
#define DOC_WINDOW_MAXIMIZE "maximize()\n\nMaximize the window.\n\nmaximize() -> None"
#define DOC_WINDOW_MINIMIZE "minimize()\n\nMinimize the window.\n\nminimize() -> None"
#define DOC_WINDOW_SETICON "set_icon()\n\nSet the window icon.\n\nset_icon(icon, /) -> None\n\nParameters\n\nsurface (Surface) -- A Surface to use as the icon."
#define DOC_WINDOW_SETMODALFOR "set_modal_for()\n\nSet the window as a modal for a parent window.\n\nset_modal_for(parent, /) -> None\n\nParameters\n\nparent (Window) -- The parent window.\n\nThis function is only supported on X11."
#define DOC_WINDOW_FLASH "flash()\n\nFlash a window to demand attention from the user.\n\nflash(operation, /) -> None\n\nParameters\n\noperation (int) -- The flash operation.\n\nSupported flash operations are:\n\npygame.FLASH_CANCEL: Cancel the current flash state if present\n\npygame.FLASH_BRIEFLY: Flash for a short amount of time to get attention\n\npygame.FLASH_UNTIL_FOCUSED: Keep flashing until the window is focused\n\nWindow flashing requires SDL 2.0.16+. A pygame.error exception will be raised\notherwise.\n\nThis function is only supported on Windows, X11, Wayland and Cocoa (MacOS).\nA pygame.error exception will be raised if it's not supported therefore it's\nadvised to wrap it in a try block.\n\nimport pygame\nwindow = pygame.Window()\n\ntry:\n    window.flash(pygame.FLASH_BRIEFLY)\nexcept pygame.error:\n    print(\"Window flashing not supported\")\n\nNew in pygame-ce 2.5.2."
