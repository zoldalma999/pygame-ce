/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_MIXER_MUSIC "pygame.mixer.music\n\n\n\npygame module for controlling streamed audio\n\nThe music module is closely tied to pygame.mixer. Use the music module\nto control the playback of music in the sound mixer.\n\nThe difference between the music playback and regular Sound playback is that\nthe music is streamed, and never actually loaded all at once. The mixer system\nonly supports a single music stream at once.\n\nOn older pygame versions, MP3 support was limited under Mac and Linux. This\nchanged in pygame v2.0.2 which got improved MP3 support. Consider using\nOGG file format for music as that can give slightly better compression than\nMP3 in most cases.\n\nFor a complete list of supported file formats, see the pygame.mixer doc page."
#define DOC_MIXER_MUSIC_LOAD "pygame.mixer.music.load()\n\nLoad a music file for playback\n\nload(filename) -> None\n\nload(fileobj, namehint=\"\") -> None\n\nThis will load a music filename/file object and prepare it for playback. If\na music stream is already playing it will be stopped. This does not start\nthe music playing.\n\nIf you are loading from a file object, the namehint parameter can be used to specify\nthe type of music data in the object. For example: load(fileobj, \"ogg\").\n\nChanged in pygame 2.0.2: Added optional namehint argument\n\nChanged in pygame-ce 2.2.0: Raises FileNotFoundError instead of pygame.error if file cannot be found"
#define DOC_MIXER_MUSIC_UNLOAD "pygame.mixer.music.unload()\n\nUnload the currently loaded music to free up resources\n\nunload() -> None\n\nThis closes resources like files for any music that may be loaded.\n\nNew in pygame 2.0.0."
#define DOC_MIXER_MUSIC_PLAY "pygame.mixer.music.play()\n\nStart the playback of the music stream\n\nplay(loops=0, start=0.0, fade_ms=0) -> None\n\nThis will play the loaded music stream. If the music is already playing it\nwill be restarted.\n\nloops is an optional integer argument, which is 0 by default, which\nindicates how many times to repeat the music. The music repeats indefinitely if\nthis argument is set to -1.\n\nstart is an optional float argument, which is 0.0 by default, which\ndenotes the position in time from which the music starts playing. The starting\nposition depends on the format of the music played. MP3 and OGG use\nthe position as time in seconds. For MP3 files the start time position\nselected may not be accurate as things like variable bit rate encoding and ID3\ntags can throw off the timing calculations. For MOD  music it is the pattern\norder number. Passing a start position will raise a NotImplementedError if\nthe start position cannot be set.\n\nfade_ms is an optional integer argument, which is 0 by default,\nwhich denotes the period of time (in milliseconds) over which the music\nwill fade up from volume level 0.0 to full volume (or the volume level\npreviously set by set_volume()). The sample may end before the fade-in\nis complete. If the music is already streaming fade_ms is ignored.\n\nChanged in pygame 2.0.0: Added optional fade_ms argument"
#define DOC_MIXER_MUSIC_REWIND "pygame.mixer.music.rewind()\n\nrestart music\n\nrewind() -> None\n\nResets playback of the current music to the beginning. If pause() has\npreviously been used to pause the music, the music will remain paused.\n\nrewind() supports a limited number of file types and notably\nWAV files are NOT supported. For unsupported file types use play()\nwhich will restart the music that's already playing (note that this\nwill start the music playing again even if previously paused)."
#define DOC_MIXER_MUSIC_STOP "pygame.mixer.music.stop()\n\nstop the music playback\n\nstop() -> None\n\nStops the music playback if it is currently playing.\nendevent will be triggered, if set.\nIt won't unload the music."
#define DOC_MIXER_MUSIC_PAUSE "pygame.mixer.music.pause()\n\ntemporarily stop music playback\n\npause() -> None\n\nTemporarily stop playback of the music stream. It can be resumed with the\nunpause() function."
#define DOC_MIXER_MUSIC_UNPAUSE "pygame.mixer.music.unpause()\n\nresume paused music\n\nunpause() -> None\n\nThis will resume the playback of a music stream after it has been paused."
#define DOC_MIXER_MUSIC_FADEOUT "pygame.mixer.music.fadeout()\n\nstop music playback after fading out\n\nfadeout(time, /) -> None\n\nFade out and stop the currently playing music.\n\nThe time argument denotes the integer milliseconds for which the\nfading effect is generated.\n\nNote, that this function blocks until the music has faded out. Calls\nto fadeout() and set_volume() will have no effect during\nthis time. If an event was set using set_endevent() it will be\ncalled after the music has faded."
#define DOC_MIXER_MUSIC_SETVOLUME "pygame.mixer.music.set_volume()\n\nset the music volume\n\nset_volume(volume, /) -> None\n\nSet the volume of the music playback.\n\nThe volume argument is a float between 0.0 and 1.0 that sets\nthe volume level. When new music is loaded the volume is reset to full\nvolume. If volume is a negative value it will be ignored and the\nvolume will remain set at the current level. If the volume argument\nis greater than 1.0, the volume will be set to 1.0.\n\nSee mixer.Sound.set_volume() for more information regarding how the value is stored internally"
#define DOC_MIXER_MUSIC_GETVOLUME "pygame.mixer.music.get_volume()\n\nget the music volume\n\nget_volume() -> value\n\nReturns the current volume for the mixer. The value will be between 0.0\nand 1.0.\n\nSee mixer.Sound.set_volume() for more information regarding the returned value"
#define DOC_MIXER_MUSIC_GETBUSY "pygame.mixer.music.get_busy()\n\ncheck if the music stream is playing\n\nget_busy() -> bool\n\nReturns True when the music stream is actively playing. When the music is\nidle this returns False. In pygame 2.0.1 and above this function returns\nFalse when the music is paused. In pygame 1 it returns True when the music\nis paused.\n\nChanged in pygame 2.0.1: Returns False when music paused."
#define DOC_MIXER_MUSIC_SETPOS "pygame.mixer.music.set_pos()\n\nset position to play from\n\nset_pos(pos, /) -> None\n\nThis sets the position in the music file where playback will start.\nThe meaning of \"pos\", a float (or a number that can be converted to a float),\ndepends on the music format.\n\nFor MOD files, pos is the integer pattern number in the module.\nFor OGG it is the absolute position, in seconds, from\nthe beginning of the sound. For MP3 files, it is the relative position,\nin seconds, from the current position. For absolute positioning in an MP3\nfile, first call rewind().\n\nOther file formats are unsupported. Newer versions of SDL_mixer have\nbetter positioning support than earlier ones. A pygame.error is\nraised if a particular format does not support positioning.\n\nFunction set_pos() calls underlying SDL_mixer function\nMix_SetMusicPosition.\n\nNew in pygame 1.9.2."
#define DOC_MIXER_MUSIC_GETPOS "pygame.mixer.music.get_pos()\n\nget the music play time\n\nget_pos() -> time\n\nThis gets the number of milliseconds that the music has been playing for.\nThe returned time only represents how long the music has been playing; it\ndoes not take into account any starting position offsets.\n\nReturns -1 if get_pos failed due to music not playing."
#define DOC_MIXER_MUSIC_QUEUE "pygame.mixer.music.queue()\n\nqueue a sound file to follow the current\n\nqueue(filename) -> None\n\nqueue(fileobj, namehint=\"\", loops=0) -> None\n\nThis will load a sound file and queue it. A queued sound file will begin as\nsoon as the current sound naturally ends. Only one sound can be queued at a\ntime. Queuing a new sound while another sound is queued will result in the\nnew sound becoming the queued sound. Also, if the current sound is ever\nstopped or changed, the queued sound will be lost.\n\nIf you are loading from a file object, the namehint parameter can be used to specify\nthe type of music data in the object. For example: queue(fileobj, \"ogg\").\n\nThe following example will play music by Bach six times, then play music by\nMozart once:\n\npygame.mixer.music.load('bach.ogg')\npygame.mixer.music.play(5)        # Plays six times, not five!\npygame.mixer.music.queue('mozart.ogg')\n\nChanged in pygame 2.0.2: Added optional namehint argument\n\nChanged in pygame-ce 2.2.0: Raises FileNotFoundError instead of pygame.error if file cannot be found"
#define DOC_MIXER_MUSIC_SETENDEVENT "pygame.mixer.music.set_endevent()\n\nhave the music send an event when playback stops\n\nset_endevent() -> None\n\nset_endevent(type, /) -> None\n\nThis causes pygame to signal (by means of the event queue) when the music is\ndone playing. The argument determines the type of event that will be queued.\n\nThe event will be queued every time the music finishes, not just the first\ntime. To stop the event from being queued, call this method with no\nargument."
#define DOC_MIXER_MUSIC_GETENDEVENT "pygame.mixer.music.get_endevent()\n\nget the event a channel sends when playback stops\n\nget_endevent() -> type\n\nReturns the event type to be sent every time the music finishes playback. If\nthere is no endevent the function returns pygame.NOEVENT."
#define DOC_MIXER_MUSIC_GETMETADATA "pygame.mixer.music.get_metadata()\n\nget metadata of the specified or currently loaded music stream\n\nget_metadata() -> dict\n\nget_metadata(filename) -> dict\n\nget_metadata(fileobj, namehint=\"\") -> dict\n\nIf no arguments are passed returns a dictionary containing metadata\nof the currently loaded music stream, raises an exception if a music stream is not loaded.\nAvailable keys are \"title\", \"album\", \"artist\", \"copyright\".\nValues are strings containing corresponding retrieved metadata.\nIf particular metadata was not found the value is an empty string.\nHere is an example:\n{'title': 'Small Tone', 'album': 'Tones', 'artist': 'Audacity Generator', 'copyright': ''}\n\nRefer to the pygame.mixer.music.load() function for arguments regarding specifying a file or a file-like object\nwhose metadata you want to retrieve. For this function all arguments are optional,\nhowever, specifying only the namehint will raise an exception.\n\nSince the underlying functionality was introduced in version 2.6.0 of SDL_mixer,\ncalling this function with an older version of SDL_mixer will return a dictionary\nwith all values being set to empty strings. You can find your version of SDL_mixer\nby using pygame.mixer.get_sdl_mixer_version().\n\nNew in pygame-ce 2.1.4."
