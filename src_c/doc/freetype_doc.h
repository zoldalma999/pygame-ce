/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_FREETYPE "pygame.freetype\n\n\n\nEnhanced pygame module for loading and rendering computer fonts\n\nThe pygame.freetype module is a replacement for pygame.font.\nIt has all of the functionality of the original, plus many new features.\nYet is has absolutely no dependencies on the SDL_ttf library.\nIt is implemented directly on the FreeType 2 library.\nThe pygame.freetype module is not itself backward compatible with\npygame.font.\nInstead, use the pygame.ftfont module as a drop-in replacement\nfor pygame.font.\n\nAll font file formats supported by FreeType can be rendered by\npygame.freetype, namely TTF, Type1, CFF, OpenType,\nSFNT, PCF, FNT, BDF, PFR and Type42 fonts.\nAll glyphs having UTF-32 code points are accessible\n(see Font.ucs4).\n\nMost work on fonts is done using Font instances.\nThe module itself only has routines for initialization and creation\nof Font objects.\nYou can load fonts from the system using the SysFont() function.\n\nExtra support of bitmap fonts is available. Available bitmap sizes can\nbe listed (see Font.get_sizes()). For bitmap only fonts Font\ncan set the size for you (see the Font.size property).\n\nFor now undefined character codes are replaced with the .notdef\n(not defined) character.\nHow undefined codes are handled may become configurable in a future release.\n\nPygame comes with a built-in default font. This can always be accessed by\npassing None as the font name to the Font constructor.\n\nExtra rendering features available to pygame.freetype.Font\nare direct to surface rendering (see Font.render_to()), character kerning\n(see Font.kerning), vertical layout (see Font.vertical),\nrotation of rendered text (see Font.rotation),\nand the strong style (see Font.strong).\nSome properties are configurable, such as\nstrong style strength (see Font.strength) and underline positioning\n(see Font.underline_adjustment). Text can be positioned by the upper\nright corner of the text box or by the text baseline (see Font.origin).\nFinally, a font's vertical and horizontal size can be adjusted separately\n(see Font.size).\nThe pygame.examples.freetype_misc\nexample shows these features in use.\n\nThe pygame package does not import freetype automatically when\nloaded. This module must be imported explicitly to be used.\n\nimport pygame\nimport pygame.freetype\n\nNew in pygame 1.9.2: freetype"
#define DOC_FREETYPE_GETERROR "pygame.freetype.get_error()\n\nReturn the latest FreeType error\n\nget_error() -> str\n\nget_error() -> None\n\nReturn a description of the last error which occurred in the FreeType2\nlibrary, or None if no errors have occurred."
#define DOC_FREETYPE_GETVERSION "pygame.freetype.get_version()\n\nReturn the FreeType version\n\nget_version(linked=True) -> (int, int, int)\n\nReturns the version of the FreeType library in use by this module. linked=True\nis the default behavior and returns the linked version of FreeType and linked=False\nreturns the compiled version of FreeType.\n\nNote that the freetype module depends on the FreeType 2 library.\nIt will not compile with the original FreeType 1.0. Hence, the first element\nof the tuple will always be \"2\".\n\nChanged in pygame-ce 2.1.4: linked keyword argument added and default behavior changed from returning compiled version to returning linked version"
#define DOC_FREETYPE_INIT "pygame.freetype.init()\n\nInitialize the underlying FreeType library.\n\ninit(cache_size=64, resolution=72) -> None\n\nThis function initializes the underlying FreeType library and must be\ncalled before trying to use any of the functionality of the freetype\nmodule.\n\nHowever, pygame.init() will automatically call this function\nif the freetype module is already imported. It is safe to call this\nfunction more than once.\n\nOptionally, you may specify a default cache_size for the Glyph cache: the\nmaximum number of glyphs that will be cached at any given time by the\nmodule. Exceedingly small values will be automatically tuned for\nperformance. Also a default pixel resolution, in dots per inch, can\nbe given to adjust font scaling."
#define DOC_FREETYPE_QUIT "pygame.freetype.quit()\n\nShut down the underlying FreeType library.\n\nquit() -> None\n\nThis function closes the freetype module. After calling this\nfunction, you should not invoke any class, method or function related to the\nfreetype module as they are likely to fail or might give unpredictable\nresults. It is safe to call this function even if the module hasn't been\ninitialized yet."
#define DOC_FREETYPE_GETINIT "pygame.freetype.get_init()\n\nReturns True if the FreeType module is currently initialized.\n\nget_init() -> bool\n\nReturns True if the pygame.freetype module is currently initialized.\n\nNew in pygame 1.9.5."
#define DOC_FREETYPE_WASINIT "pygame.freetype.was_init()\n\nDEPRECATED: Use get_init() instead.\n\nwas_init() -> bool\n\nDEPRECATED: Returns True if the pygame.freetype module is currently\ninitialized. Use get_init() instead."
#define DOC_FREETYPE_GETCACHESIZE "pygame.freetype.get_cache_size()\n\nReturn the glyph case size\n\nget_cache_size() -> long\n\nSee pygame.freetype.init()."
#define DOC_FREETYPE_GETDEFAULTRESOLUTION "pygame.freetype.get_default_resolution()\n\nReturn the default pixel size in dots per inch\n\nget_default_resolution() -> long\n\nReturns the default pixel size, in dots per inch, for the module.\nThe default is 72 DPI."
#define DOC_FREETYPE_SETDEFAULTRESOLUTION "pygame.freetype.set_default_resolution()\n\nSet the default pixel size in dots per inch for the module\n\nset_default_resolution(resolution, /)\n\nSet the default pixel size, in dots per inch, for the module. If the\noptional argument is omitted or zero the resolution is reset to 72 DPI."
#define DOC_FREETYPE_SYSFONT "pygame.freetype.SysFont()\n\ncreate a Font object from the system fonts\n\nSysFont(name, size, bold=False, italic=False) -> Font\n\nReturn a new Font object that is loaded from the system fonts. The font will\nmatch the requested bold and italic flags. Pygame uses a small set of\ncommon font aliases. If the specific font you ask for is not available, a\nreasonable alternative may be used. If a suitable system font is not found\nthis will fall back on loading the default pygame font.\n\nThe font name can also be an iterable of font names, a string of\ncomma-separated font names, or a bytes of comma-separated font names, in\nwhich case the set of names will be searched in order.\n\nNew in pygame 2.0.1: Accept an iterable of font names."
#define DOC_FREETYPE_GETDEFAULTFONT "pygame.freetype.get_default_font()\n\nGet the filename of the default font\n\nget_default_font() -> string\n\nReturn the filename of the default pygame font. This is not the full path\nto the file. The file is usually in the same directory as the font module,\nbut can also be bundled in a separate archive."
#define DOC_FREETYPE_FONT "pygame.freetype.Font\n\nCreate a new Font instance from a supported font file.\n\nFont(file, size=0, font_index=0, resolution=0, ucs4=False) -> Font\n\nFont(pathlib.Path) -> Font\n\nArgument file can be either a string representing the font's filename, a\nfile-like object containing the font, or None; if None, a default,\nPygame, font is used.\n\n\n\nOptionally, a size argument may be specified to set the default size in\npoints, which determines the size of the rendered characters.\nThe size can also be passed explicitly to each method call.\nBecause of the way the caching   system works, specifying a default size on\nthe constructor doesn't imply a performance gain over manually passing\nthe size on each function call. If the font is bitmap and no size\nis given, the default size is set to the first available size for the font.\n\nIf the font file has more than one font, the font to load can be chosen with\nthe index argument. An exception is raised for an out-of-range font index\nvalue.\n\nThe optional resolution argument sets the pixel size, in dots per inch,\nfor use in scaling glyphs for this Font instance. If 0 then the default\nmodule value, set by init(), is used. The Font object's\nresolution can only be changed by re-initializing the Font instance.\n\nThe optional ucs4 argument, an integer, sets the default text translation\nmode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True),\nto treat Unicode text as UCS-4, with no surrogate pairs. See\nFont.ucs4.\n\nNew in pygame 2.0.0.\n\n"
#define DOC_FREETYPE_FONT_NAME "name\n\nProper font name.\n\nname -> string\n\nRead only. Returns the real (long) name of the font, as\nrecorded in the font file."
#define DOC_FREETYPE_FONT_STYLENAME "style_name\n\nGets the font's style_name.\n\nstyle_name -> str\n\nRead only. Returns the font's style name. Style names are arbitrary, can be an empty string.\nHere are some examples:\n\n'Black', 'Bold', 'Bold Italic', 'BoldOblique', 'Book', 'BookOblique', 'Condensed', 'Condensed Oblique',\n'ExtraLight', 'Italic', 'Light', 'LightOblique', 'Medium', 'MediumOblique', 'Oblique', 'Regular',\n'Semibold', 'Semilight', 'Slanted'\n\nNew in pygame-ce 2.3.1."
#define DOC_FREETYPE_FONT_PATH "path\n\nFont file path\n\npath -> unicode\n\nRead only. Returns the path of the loaded font file"
#define DOC_FREETYPE_FONT_SIZE "size\n\nThe default point size used in rendering\n\nsize -> float\n\nsize -> (float, float)\n\nGet or set the default size for text metrics and rendering. It can be\na single point size, given as a Python int or float, or a\nfont ppem (width, height) tuple. Size values are non-negative.\nA zero size or width represents an undefined size. In this case\nthe size must be given as a method argument, or an exception is\nraised. A zero width but non-zero height is a ValueError.\n\nFor a scalable font, a single number value is equivalent to a tuple\nwith width equal height. A font can be stretched vertically with\nheight set greater than width, or horizontally with width set\ngreater than height. For embedded bitmaps, as listed by get_sizes(),\nuse the nominal width and height to select an available size.\n\nFont size differs for a non-scalable, bitmap, font. During a\nmethod call it must match one of the available sizes returned by\nmethod get_sizes(). If not, an exception is raised.\nIf the size is a single number, the size is first matched against the\npoint size value. If no match, then the available size with the\nsame nominal width and height is chosen."
#define DOC_FREETYPE_FONT_GETRECT "get_rect()\n\nReturn the size and offset of rendered text\n\nget_rect(text, style=STYLE_DEFAULT, rotation=0, size=0) -> rect\n\nGets the final dimensions and origin, in pixels, of text using the\noptional size in points, style, and rotation. For other\nrelevant render properties, and for any optional argument not given,\nthe default values set for the Font instance are used.\n\nReturns a Rect instance containing the\nwidth and height of the text's bounding box and the position of the\ntext's origin.\nThe origin is useful in aligning separately rendered pieces of text.\nIt gives the baseline position and bearing at the start of the text.\nSee the render_to() method for an example.\n\nIf text is a char (byte) string, its encoding is assumed to be\nLATIN1.\n\nOptionally, text can be None, which will return the bounding\nrectangle for the text passed to a previous get_rect(),\nrender(), render_to(), render_raw(), or\nrender_raw_to() call. See render_to() for more\ndetails."
#define DOC_FREETYPE_FONT_GETMETRICS "get_metrics()\n\nReturn the glyph metrics for the given text\n\nget_metrics(text, size=0) -> [(...), ...]\n\nReturns the glyph metrics for each character in text.\n\nThe glyph metrics are returned as a list of tuples. Each tuple gives\nmetrics of a single character glyph. The glyph metrics are:\n\n(min_x, max_x, min_y, max_y, horizontal_advance_x, horizontal_advance_y)\n\nThe bounding box min_x, max_x, min_y, and max_y values are returned as\ngrid-fitted pixel coordinates of type int. The advance values are\nfloat values.\n\nThe calculations are done using the font's default size in points.\nOptionally you may specify another point size with the size argument.\n\nThe metrics are adjusted for the current rotation, strong, and oblique\nsettings.\n\nIf text is a char (byte) string, then its encoding is assumed to be\nLATIN1."
#define DOC_FREETYPE_FONT_HEIGHT "height\n\nThe unscaled height of the font in font units\n\nheight -> int\n\nRead only. Gets the height of the font. This is the average value of all\nglyphs in the font."
#define DOC_FREETYPE_FONT_ASCENDER "ascender\n\nThe unscaled ascent of the font in font units\n\nascender -> int\n\nRead only. Return the number of units from the font's baseline to\nthe top of the bounding box."
#define DOC_FREETYPE_FONT_DESCENDER "descender\n\nThe unscaled descent of the font in font units\n\ndescender -> int\n\nRead only. Return the height in font units for the font descent.\nThe descent is the number of units from the font's baseline to the\nbottom of the bounding box."
#define DOC_FREETYPE_FONT_GETSIZEDASCENDER "get_sized_ascender()\n\nThe scaled ascent of the font in pixels\n\nget_sized_ascender(size=0, /) -> int\n\nReturn the number of units from the font's baseline to the top of the\nbounding box. It is not adjusted for strong or rotation."
#define DOC_FREETYPE_FONT_GETSIZEDDESCENDER "get_sized_descender()\n\nThe scaled descent of the font in pixels\n\nget_sized_descender(size=0, /) -> int\n\nReturn the number of pixels from the font's baseline to the top of the\nbounding box. It is not adjusted for strong or rotation."
#define DOC_FREETYPE_FONT_GETSIZEDHEIGHT "get_sized_height()\n\nThe scaled height of the font in pixels\n\nget_sized_height(size=0, /) -> int\n\nReturns the height of the font. This is the average value of all\nglyphs in the font. It is not adjusted for strong or rotation."
#define DOC_FREETYPE_FONT_GETSIZEDGLYPHHEIGHT "get_sized_glyph_height()\n\nThe scaled bounding box height of the font in pixels\n\nget_sized_glyph_height(size=0, /) -> int\n\nReturn the glyph bounding box height of the font in pixels.\nThis is the average value of all glyphs in the font.\nIt is not adjusted for strong or rotation."
#define DOC_FREETYPE_FONT_GETSIZES "get_sizes()\n\nreturn the available sizes of embedded bitmaps\n\nget_sizes() -> [(int, int, int, float, float), ...]\n\nget_sizes() -> []\n\nReturns a list of tuple records, one for each point size\nsupported. Each tuple containing the point size, the height in pixels,\nwidth in pixels, horizontal ppem (nominal width) in fractional pixels,\nand vertical ppem (nominal height) in fractional pixels."
#define DOC_FREETYPE_FONT_RENDER "render()\n\nReturn rendered text as a surface\n\nrender(text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -> (Surface, Rect)\n\nReturns a new Surface,\nwith the text rendered to it\nin the color given by 'fgcolor'. If no foreground color is given,\nthe default foreground color, fgcolor is used.\nIf bgcolor is given, the surface\nwill be filled with this color. When no background color is given,\nthe surface background is transparent, zero alpha. Normally the returned\nsurface has a 32 bit pixel size. However, if bgcolor is None\nand anti-aliasing is disabled a monochrome 8 bit colorkey surface,\nwith colorkey set for the background color, is returned.\n\nThe return value is a tuple: the new surface and the bounding\nrectangle giving the size and origin of the rendered text.\n\nIf an empty string is passed for text then the returned Rect is zero\nwidth and the height of the font.\n\nOptional fgcolor, style, rotation, and size arguments override\nthe default values set for the Font instance.\n\nIf text is a char (byte) string, then its encoding is assumed to be\nLATIN1.\n\nOptionally, text can be None, which will render the text\npassed to a previous get_rect(), render(), render_to(),\nrender_raw(), or render_raw_to() call.\nSee render_to() for details."
#define DOC_FREETYPE_FONT_RENDERTO "render_to()\n\nRender text onto an existing surface\n\nrender_to(surf, dest, text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -> Rect\n\nRenders the string text to the pygame.Surface surf,\nat position dest, a (x, y) surface coordinate pair.\nIf either x or y is not an integer it is converted to one if possible.\nAny sequence where the first two items are x and y positional elements\nis accepted, including a Rect instance.\nAs with render(),\noptional fgcolor, style, rotation, and size argument are\navailable.\n\nIf a background color bgcolor is given, the text bounding box is\nfirst filled with that color. The text is blitted next.\nBoth the background fill and text rendering involve full alpha blits.\nThat is, the alpha values of the foreground, background, and destination\ntarget surface all affect the blit.\n\nThe return value is a rectangle giving the size and position of the\nrendered text within the surface.\n\nIf an empty string is passed for text then the returned\nRect is zero width and the height of the font.\nThe rect will test False.\n\nOptionally, text can be set None, which will re-render text\npassed to a previous render_to(), get_rect(), render(),\nrender_raw(), or render_raw_to() call. Primarily, this\nfeature is an aid to using render_to() in combination with\nget_rect(). An example:\n\ndef word_wrap(surf, text, font, color=(0, 0, 0)):\n    font.origin = True\n    words = text.split(' ')\n    width, height = surf.get_size()\n    line_spacing = font.get_sized_height() + 2\n    x, y = 0, line_spacing\n    space = font.get_rect(' ')\n    for word in words:\n        bounds = font.get_rect(word)\n        if x + bounds.width + bounds.x >= width:\n            x, y = 0, y + line_spacing\n        if x + bounds.width + bounds.x >= width:\n            raise ValueError(\"word too wide for the surface\")\n        if y + bounds.height - bounds.y >= height:\n            raise ValueError(\"text to long for the surface\")\n        font.render_to(surf, (x, y), None, color)\n        x += bounds.width + space.width\n    return x, y\n\nWhen render_to() is called with the same\nfont properties ― size, style, strength,\nwide, antialiased, vertical, rotation,\nkerning, and use_bitmap_strikes ― as get_rect(),\nrender_to() will use the layout calculated by get_rect().\nOtherwise, render_to() will recalculate the layout if called\nwith a text string or one of the above properties has changed\nafter the get_rect() call.\n\nIf text is a char (byte) string, then its encoding is assumed to be\nLATIN1."
#define DOC_FREETYPE_FONT_RENDERRAW "render_raw()\n\nReturn rendered text as a string of bytes\n\nrender_raw(text, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -> (bytes, (int, int))\n\nLike render() but with the pixels returned as a byte string\nof 8-bit gray-scale values. The foreground color is 255, the\nbackground 0, useful as an alpha mask for a foreground pattern."
#define DOC_FREETYPE_FONT_RENDERRAWTO "render_raw_to()\n\nRender text into an array of ints\n\nrender_raw_to(array, text, dest=None, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -> Rect\n\nRender to an array object exposing an array struct interface. The array\nmust be two dimensional with integer items. The default dest value,\nNone, is equivalent to position (0, 0). See render_to().\nAs with the other render methods, text can be None to\nrender a text string passed previously to another method.\n\nThe return value is a pygame.Rect() giving the size and position of\nthe rendered text."
#define DOC_FREETYPE_FONT_STYLE "style\n\nThe font's style flags\n\nstyle -> int\n\nGets or sets the default style of the Font. This default style will be\nused for all text rendering and size calculations unless overridden\nspecifically a render or get_rect() call.\nThe style value may be a bit-wise OR of one or more of the following\nconstants:\n\nSTYLE_NORMAL\nSTYLE_UNDERLINE\nSTYLE_OBLIQUE\nSTYLE_STRONG\nSTYLE_WIDE\nSTYLE_DEFAULT\n\nThese constants may be found on the FreeType constants module.\nOptionally, the default style can be modified or obtained accessing the\nindividual style attributes (underline, oblique, strong).\n\nThe STYLE_OBLIQUE and STYLE_STRONG styles are for\nscalable fonts only. An attempt to set either for a bitmap font raises\nan AttributeError. An attempt to set either for an inactive font,\nas returned by Font.__new__(), raises a RuntimeError.\n\nAssigning STYLE_DEFAULT to the style property leaves\nthe property unchanged, as this property defines the default.\nThe style property will never return STYLE_DEFAULT."
#define DOC_FREETYPE_FONT_UNDERLINE "underline\n\nThe state of the font's underline style flag\n\nunderline -> bool\n\nGets or sets whether the font will be underlined when drawing text. This\ndefault style value will be used for all text rendering and size\ncalculations unless overridden specifically in a render or\nget_rect() call, via the 'style' parameter."
#define DOC_FREETYPE_FONT_STRONG "strong\n\nThe state of the font's strong style flag\n\nstrong -> bool\n\nGets or sets whether the font will be bold when drawing text. This\ndefault style value will be used for all text rendering and size\ncalculations unless overridden specifically in a render or\nget_rect() call, via the 'style' parameter."
#define DOC_FREETYPE_FONT_OBLIQUE "oblique\n\nThe state of the font's oblique style flag\n\noblique -> bool\n\nGets or sets whether the font will be rendered as oblique. This\ndefault style value will be used for all text rendering and size\ncalculations unless overridden specifically in a render or\nget_rect() call, via the style parameter.\n\nThe oblique style is only supported for scalable (outline) fonts.\nAn attempt to set this style on a bitmap font will raise an\nAttributeError. If the font object is inactive, as returned by\nFont.__new__(), setting this property raises a RuntimeError."
#define DOC_FREETYPE_FONT_WIDE "wide\n\nThe state of the font's wide style flag\n\nwide -> bool\n\nGets or sets whether the font will be stretched horizontally\nwhen drawing text. It produces a result similar to\npygame.font.Font's bold. This style not available for\nrotated text."
#define DOC_FREETYPE_FONT_STRENGTH "strength\n\nThe strength associated with the strong or wide font styles\n\nstrength -> float\n\nThe amount by which a font glyph's size is enlarged for the\nstrong or wide transformations, as a fraction of the untransformed\nsize. For the wide style only the horizontal dimension is\nincreased. For strong text both the horizontal and vertical\ndimensions are enlarged. A wide style of strength 0.08333 ( 1/12 ) is\nequivalent to the pygame.font.Font bold style.\nThe default is 0.02778 ( 1/36 ).\n\nThe strength style is only supported for scalable (outline) fonts.\nAn attempt to set this property on a bitmap font will raise an\nAttributeError. If the font object is inactive, as returned by\nFont.__new__(), assignment to this property raises a RuntimeError."
#define DOC_FREETYPE_FONT_UNDERLINEADJUSTMENT "underline_adjustment\n\nAdjustment factor for the underline position\n\nunderline_adjustment -> float\n\nGets or sets a factor which, when positive, is multiplied with the\nfont's underline offset to adjust the underline position. A negative\nvalue turns an underline into a strike-through or overline. It is\nmultiplied with the ascender. Accepted values range between -2.0 and 2.0\ninclusive. A value of 0.5 closely matches Tango underlining. A value of\n1.0 mimics pygame.font.Font underlining."
#define DOC_FREETYPE_FONT_FIXEDWIDTH "fixed_width\n\nGets whether the font is fixed-width\n\nfixed_width -> bool\n\nRead only. Returns True if the font contains fixed-width\ncharacters (for example Courier, Bitstream Vera Sans Mono, Andale Mono)."
#define DOC_FREETYPE_FONT_FIXEDSIZES "fixed_sizes\n\nthe number of available bitmap sizes for the font\n\nfixed_sizes -> int\n\nRead only. Returns the number of point sizes for which the font contains\nbitmap character images. If zero then the font is not a bitmap font.\nA scalable font may contain pre-rendered point sizes as strikes."
#define DOC_FREETYPE_FONT_SCALABLE "scalable\n\nGets whether the font is scalable\n\nscalable -> bool\n\nRead only. Returns True if the font contains outline glyphs.\nIf so, the point size is not limited to available bitmap sizes."
#define DOC_FREETYPE_FONT_USEBITMAPSTRIKES "use_bitmap_strikes\n\nallow the use of embedded bitmaps in an outline font file\n\nuse_bitmap_strikes -> bool\n\nSome scalable fonts include embedded bitmaps for particular point\nsizes. This property controls whether or not those bitmap strikes\nare used. Set it False to disable the loading of any bitmap\nstrike. Set it True, the default, to permit bitmap strikes\nfor a non-rotated render with no style other than wide or\nunderline. This property is ignored for bitmap fonts.\n\nSee also fixed_sizes and get_sizes()."
#define DOC_FREETYPE_FONT_ANTIALIASED "antialiased\n\nFont anti-aliasing mode\n\nantialiased -> bool\n\nGets or sets the font's anti-aliasing mode. This defaults to\nTrue on all fonts, which are rendered with full 8 bit blending.\n\nSet to False to do monochrome rendering. This should\nprovide a small speed gain and reduce cache memory size."
#define DOC_FREETYPE_FONT_KERNING "kerning\n\nCharacter kerning mode\n\nkerning -> bool\n\nGets or sets the font's kerning mode. This defaults to False\non all fonts, which will be rendered without kerning.\n\nSet to True to add kerning between character pairs, if supported\nby the font, when positioning glyphs."
#define DOC_FREETYPE_FONT_VERTICAL "vertical\n\nFont vertical mode\n\nvertical -> bool\n\nGets or sets whether the characters are laid out vertically rather\nthan horizontally. May be useful when rendering Kanji or some other\nvertical script.\n\nSet to True to switch to a vertical text layout. The default\nis False, place horizontally.\n\nNote that the Font class does not automatically determine\nscript orientation. Vertical layout must be selected explicitly.\n\nAlso note that several font formats (especially bitmap based ones) don't\ncontain the necessary metrics to draw glyphs vertically, so drawing in\nthose cases will give unspecified results."
#define DOC_FREETYPE_FONT_ROTATION "rotation\n\ntext rotation in degrees counterclockwise\n\nrotation -> int\n\nGets or sets the baseline angle of the rendered text. The angle is\nrepresented as integer degrees. The default angle is 0, with horizontal\ntext rendered along the X-axis, and vertical text along the Y-axis.\nA positive value rotates these axes counterclockwise that many degrees.\nA negative angle corresponds to a clockwise rotation. The rotation\nvalue is normalized to a value within the range 0 to 359 inclusive\n(eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315,\n720 -> 720 - (2 * 360) -> 0).\n\nOnly scalable (outline) fonts can be rotated. An attempt to change\nthe rotation of a bitmap font raises an AttributeError.\nAn attempt to change the rotation of an inactive font instance, as\nreturned by Font.__new__(), raises a RuntimeError."
#define DOC_FREETYPE_FONT_FGCOLOR "fgcolor\n\ndefault foreground color\n\nfgcolor -> Color\n\nGets or sets the default glyph rendering color. It is initially opaque\nblack ― (0, 0, 0, 255). Applies to render() and render_to()."
#define DOC_FREETYPE_FONT_BGCOLOR "bgcolor\n\ndefault background color\n\nbgcolor -> Color\n\nGets or sets the default background rendering color. Initially it is\nunset and text will render with a transparent background by default.\nApplies to render() and render_to()."
#define DOC_FREETYPE_FONT_ORIGIN "origin\n\nFont render to text origin mode\n\norigin -> bool\n\nIf set True, render_to() and render_raw_to() will\ntake the dest position to be that of the text origin, as opposed to\nthe top-left corner of the bounding box. See get_rect() for\ndetails."
#define DOC_FREETYPE_FONT_PAD "pad\n\npadded boundary mode\n\npad -> bool\n\nIf set True, then the text boundary rectangle will be inflated\nto match that of font.Font.\nOtherwise, the boundary rectangle is just large enough for the text."
#define DOC_FREETYPE_FONT_UCS4 "ucs4\n\nEnable UCS-4 mode\n\nucs4 -> bool\n\nGets or sets the decoding of Unicode text. By default, the\nfreetype module performs UTF-16 surrogate pair decoding on Unicode text.\nThis allows 32-bit escape sequences ('Uxxxxxxxx') between 0x10000 and\n0x10FFFF to represent their corresponding UTF-32 code points on Python\ninterpreters built with a UCS-2 Unicode type (on Windows, for instance).\nIt also means character values within the UTF-16 surrogate area (0xD800\nto 0xDFFF) are considered part of a surrogate pair. A malformed surrogate\npair will raise a UnicodeEncodeError. Setting ucs4 True turns\nsurrogate pair decoding off, allowing access the full UCS-4 character\nrange to a Python interpreter built with four-byte Unicode character\nsupport."
#define DOC_FREETYPE_FONT_RESOLUTION "resolution\n\nPixel resolution in dots per inch\n\nresolution -> int\n\nRead only. Gets pixel size used in scaling font glyphs for this\nFont instance."
