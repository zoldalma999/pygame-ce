/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_EVENT "pygame.event\n\n\n\npygame module for interacting with events and queues\n\nPygame handles all its event messaging through an event queue. The routines in\nthis module help you manage that event queue. The input queue is heavily\ndependent on the pygame.display module. If the display has not been\ninitialized and a video mode not set, the event queue may not work properly.\n\nThe event queue has an upper limit on the number of events it can hold. When\nthe queue becomes full new events are quietly dropped. To prevent lost events,\nespecially input events which signal a quit command, your program must handle\nevents every frame (with pygame.event.get(), pygame.event.pump(),\npygame.event.wait(), pygame.event.peek() or pygame.event.clear())\nand process them. Not handling events may cause your system to decide your\nprogram has locked up. To speed up queue processing use\npygame.event.set_blocked() to limit which events get queued.\n\nTo get the state of various input devices, you can forego the event queue and\naccess the input devices directly with their appropriate modules:\npygame.mouse, pygame.key, and pygame.joystick. If you use\nthis method, remember that pygame requires some form of communication with the\nsystem window manager and other parts of the platform. To keep pygame in sync\nwith the system, you will need to call pygame.event.pump() to keep\neverything current. Usually, this should be called once per game loop.\nNote: Joysticks will not send any events until the device has been initialized.\n\nThe event queue contains pygame.event.Event event objects.\nThere are a variety of ways to access the queued events, from simply\nchecking for the existence of events, to grabbing them directly off the stack.\nThe event queue also offers some simple filtering which can slightly help\nperformance by blocking certain event types from the queue. Use\npygame.event.set_allowed() and pygame.event.set_blocked() to\nchange this filtering. By default, all event types can be placed on the queue.\n\nAll pygame.event.Event instances contain an event type identifier\nand attributes specific to that event type. The event type identifier is\naccessible as the pygame.event.Event.type property. Any of the\nevent specific attributes can be accessed through the\npygame.event.Event.__dict__ attribute or directly as an attribute\nof the event object (as member lookups are passed through to the object's\ndictionary values). The event object has no method functions. Users can create\ntheir own new events with the pygame.event.Event() function.\n\nThe event type identifier is in between the values of NOEVENT and\nNUMEVENTS. User defined events should have a value in the inclusive range\nof USEREVENT to NUMEVENTS - 1. User defined events can get a custom\nevent number with pygame.event.custom_type().\nIt is recommended all user events follow this system.\n\nEvents support equality and inequality comparisons. Two events are equal if\nthey are the same type and have identical attribute values.\n\nWhile debugging and experimenting, you can print an event object for a quick\ndisplay of its type and members. The function pygame.event.event_name()\ncan be used to get a string representing the name of the event type.\n\nEvents that come from the system will have a guaranteed set of member\nattributes based on the type. The following is a list event types with their\nspecific attributes.\n\nQUIT              none\nACTIVEEVENT       gain, state\nKEYDOWN           key, mod, unicode, scancode\nKEYUP             key, mod, unicode, scancode\nMOUSEMOTION       pos, rel, buttons, touch\nMOUSEBUTTONUP     pos, button, touch\nMOUSEBUTTONDOWN   pos, button, touch\nJOYAXISMOTION     joy (deprecated), instance_id, axis, value\nJOYBALLMOTION     joy (deprecated), instance_id, ball, rel\nJOYHATMOTION      joy (deprecated), instance_id, hat, value\nJOYBUTTONUP       joy (deprecated), instance_id, button\nJOYBUTTONDOWN     joy (deprecated), instance_id, button\nVIDEORESIZE       size, w, h\nVIDEOEXPOSE       none\nUSEREVENT         code\n\nChanged in pygame 2.0.0: The joy attribute was deprecated, instance_id was added.\n\nChanged in pygame 2.0.1: The unicode attribute was added to KEYUP event.\n\nNote that ACTIVEEVENT, VIDEORESIZE and VIDEOEXPOSE are considered\nas \"legacy\" events, the use of pygame2 WINDOWEVENT API is recommended over\nthe use of this older API.\n\nYou can also find a list of constants for keyboard keys\nhere.\n\n\n\nWhen compiled with SDL2, pygame has these additional events and their\nattributes.\n\nAUDIODEVICEADDED   which, iscapture\nAUDIODEVICEREMOVED which, iscapture\nFINGERMOTION       touch_id, finger_id, x, y, dx, dy\nFINGERDOWN         touch_id, finger_id, x, y, dx, dy\nFINGERUP           touch_id, finger_id, x, y, dx, dy\nMOUSEWHEEL         which, flipped, x, y, touch, precise_x, precise_y\nMULTIGESTURE       touch_id, x, y, pinched, rotated, num_fingers\nTEXTEDITING        text, start, length\nTEXTINPUT          text\n\nNew in pygame 1.9.5.\n\nChanged in pygame 2.0.2: Fixed amount horizontal scroll (x, positive to the right and negative to the left).\n\nChanged in pygame 2.0.2: The touch attribute was added to all the MOUSE events.\n\nThe touch attribute of MOUSE events indicates whether or not the events were generated\nby a touch input device, and not a real mouse. You might want to ignore such events, if your application\nalready handles FINGERMOTION, FINGERDOWN and FINGERUP events.\n\nNew in pygame-ce 2.1.3: Added precise_x and precise_y to MOUSEWHEEL events\n\n\n\nMany new events were introduced in pygame 2.\n\npygame can recognize text or files dropped in its window. If a file\nis dropped, DROPFILE event will be sent, file will be its path.\nThe DROPTEXT event is only supported on X11.\n\nMIDIIN and MIDIOUT are events reserved for pygame.midi use.\n\npygame 2 also supports controller hot-plugging\n\nEvent name               Attributes and notes\n\nDROPFILE                 file\nDROPBEGIN\nDROPCOMPLETE\nDROPTEXT\nMIDIIN\nMIDIOUT\nCONTROLLERDEVICEADDED    device_index\nJOYDEVICEADDED           device_index\nCONTROLLERDEVICEREMOVED  instance_id\nJOYDEVICEREMOVED         instance_id\nCONTROLLERDEVICEREMAPPED instance_id\nKEYMAPCHANGED\nCLIPBOARDUPDATE\nRENDER_TARGETS_RESET\nRENDER_DEVICE_RESET\nLOCALECHANGED\n\nAlso in this version, instance_id attributes were added to joystick events,\nand the joy attribute was deprecated.\n\nKEYMAPCHANGED is a type of an event sent when keymap changes due to a\nsystem event such as an input language or keyboard layout change.\n\nCLIPBOARDUPDATE is an event sent when clipboard changes. This can still\nbe considered as an experimental feature, some kinds of clipboard changes might\nnot trigger this event.\n\nLOCALECHANGED is an event sent when user locale changes\n\nNew in pygame 2.0.0.\n\nNew in pygame-ce 2.1.3: KEYMAPCHANGED, CLIPBOARDUPDATE,\nRENDER_TARGETS_RESET, RENDER_DEVICE_RESET and LOCALECHANGED\n\n\n\nSince pygame 2.0.1, there are a new set of events, called window events.\nHere is a list of all window events, along with a short description\n\nEvent type                Short description\n\nWINDOWSHOWN            Window became shown\nWINDOWHIDDEN           Window became hidden\nWINDOWEXPOSED          Window got updated by some external event\nWINDOWMOVED            Window got moved\nWINDOWRESIZED          Window got resized\nWINDOWSIZECHANGED      Window changed its size\nWINDOWMINIMIZED        Window was minimized\nWINDOWMAXIMIZED        Window was maximized\nWINDOWRESTORED         Window was restored\nWINDOWENTER            Mouse entered the window\nWINDOWLEAVE            Mouse left the window\nWINDOWFOCUSGAINED      Window gained focus\nWINDOWFOCUSLOST        Window lost focus\nWINDOWCLOSE            Window was closed\nWINDOWTAKEFOCUS        Window was offered focus\nWINDOWHITTEST          Window has a special hit test\nWINDOWICCPROFCHANGED   Window ICC profile changed (SDL backend >= 2.0.18)\nWINDOWDISPLAYCHANGED   Window moved on a new display (SDL backend >= 2.0.18)\n\nWINDOWMOVED, WINDOWRESIZED and WINDOWSIZECHANGED have x and\ny attributes, WINDOWDISPLAYCHANGED has a display_index attribute.\nAll windowevents have a window attribute.\n\nNew in pygame 2.0.1.\n\nNew in pygame-ce 2.1.3: WINDOWICCPROFCHANGED and WINDOWDISPLAYCHANGED\n\n\n\nOn Android, the following events can be generated\n\nEvent type                 Short description\n\nAPP_TERMINATING           OS is terminating the application\nAPP_LOWMEMORY             OS is low on memory, try to free memory if possible\nAPP_WILLENTERBACKGROUND   Application is entering background\nAPP_DIDENTERBACKGROUND    Application entered background\nAPP_WILLENTERFOREGROUND   Application is entering foreground\nAPP_DIDENTERFOREGROUND    Application entered foreground\n\nNew in pygame-ce 2.1.3."
#define DOC_EVENT_PUMP "pygame.event.pump()\n\ninternally process pygame event handlers\n\npump() -> None\n\nFor each frame of your game, you will need to make some sort of call to the\nevent queue. This ensures your program can internally interact with the rest\nof the operating system. If you are not using other event functions in your\ngame, you should call pygame.event.pump() to allow pygame to handle\ninternal actions.\n\nThis function is not necessary if your program is consistently processing\nevents on the queue through the other pygame.event functions.\n\nThere are important things that must be dealt with internally in the event\nqueue. The main window may need to be repainted or respond to the system. If\nyou fail to make a call to the event queue for too long, the system may\ndecide your program has locked up.\n\nThis function should only be called in the thread that initialized pygame.display."
#define DOC_EVENT_GET "pygame.event.get()\n\nget events from the queue\n\nget(eventtype=None) -> Eventlist\n\nget(eventtype=None, pump=True) -> Eventlist\n\nget(eventtype=None, pump=True, exclude=None) -> Eventlist\n\nThis will get all the messages and remove them from the queue. If a type or\nsequence of types is given only those messages will be removed from the\nqueue and returned.\n\nIf a type or sequence of types is passed in the exclude argument\ninstead, then all only other messages will be removed from the queue. If\nan exclude parameter is passed, the eventtype parameter must be\nNone.\n\nIf you are only taking specific events from the queue, be aware that the\nqueue could eventually fill up with the events you are not interested.\n\nIf pump is True (the default), then pygame.event.pump() will be called.\n\nChanged in pygame 1.9.5: Added pump argument\n\nChanged in pygame 2.0.2: Added exclude argument"
#define DOC_EVENT_POLL "pygame.event.poll()\n\nget a single event from the queue\n\npoll() -> Event instance\n\nReturns a single event from the queue. If the event queue is empty an event\nof type pygame.NOEVENT will be returned immediately. The returned event\nis removed from the queue.\n\nThis function should only be called in the thread that initialized pygame.display."
#define DOC_EVENT_WAIT "pygame.event.wait()\n\nwait for a single event from the queue\n\nwait() -> Event instance\n\nwait(timeout) -> Event instance\n\nReturns a single event from the queue. If the queue is empty this function\nwill wait until one is created. From pygame 2.0.0, if a timeout argument\nis given, the function will return an event of type pygame.NOEVENT\nif no events enter the queue in timeout milliseconds. The event is removed\nfrom the queue once it has been returned. While the program is waiting it will\nsleep in an idle state. This is important for programs that want to share the\nsystem with other applications.\n\nChanged in pygame 2.0.0.dev13: Added timeout argument\n\nThis function should only be called in the thread that initialized pygame.display."
#define DOC_EVENT_PEEK "pygame.event.peek()\n\ntest if event types are waiting on the queue\n\npeek(eventtype=None) -> bool\n\npeek(eventtype=None, pump=True) -> bool\n\nReturns True if there are any events of the given type waiting on the\nqueue. If a sequence of event types is passed, this will return True if\nany of those events are on the queue.\n\nWhen eventtype is not passed or None, this function will return True if\nthere's any event on the queue, and return False if the queue is empty.\n\nIf pump is True (the default), then pygame.event.pump() will be called.\n\nChanged in pygame 1.9.5: Added pump argument\n\nChanged in pygame-ce 2.5.3: no longer mistakenly returns an event when eventtype is None or not passed."
#define DOC_EVENT_CLEAR "pygame.event.clear()\n\nremove all events from the queue\n\nclear(eventtype=None) -> None\n\nclear(eventtype=None, pump=True) -> None\n\nRemoves all events from the queue. If eventtype is given, removes the given event\nor sequence of events. This has the same effect as pygame.event.get() except None\nis returned. It can be slightly more efficient when clearing a full event queue.\n\nIf pump is True (the default), then pygame.event.pump() will be called.\n\nChanged in pygame 1.9.5: Added pump argument"
#define DOC_EVENT_EVENTNAME "pygame.event.event_name()\n\nget the string name from an event id\n\nevent_name(type, /) -> string\n\nReturns a string representing the name (in CapWords style) of the given\nevent type.\n\n\"UserEvent\" is returned for all values in the user event id range.\n\"Unknown\" is returned when the event type does not exist."
#define DOC_EVENT_SETBLOCKED "pygame.event.set_blocked()\n\ncontrol which events are blocked on the queue\n\nset_blocked(type, /) -> None\n\nset_blocked(typelist, /) -> None\n\nset_blocked(None) -> None\n\nThe given event types are not allowed to appear on the event queue. By\ndefault all events can be placed on the queue. It is safe to disable an\nevent type multiple times.\n\nIf None is passed as the argument, ALL of the event types are blocked\nfrom being placed on the queue."
#define DOC_EVENT_SETALLOWED "pygame.event.set_allowed()\n\ncontrol which events are allowed on the queue\n\nset_allowed(type, /) -> None\n\nset_allowed(typelist, /) -> None\n\nset_allowed(None) -> None\n\nThe given event types are allowed to appear on the event queue. By default,\nall event types can be placed on the queue. It is safe to enable an event\ntype multiple times.\n\nIf None is passed as the argument, ALL of the event types are allowed\nto be placed on the queue."
#define DOC_EVENT_GETBLOCKED "pygame.event.get_blocked()\n\ntest if a type of event is blocked from the queue\n\nget_blocked(type, /) -> bool\n\nget_blocked(typelist, /) -> bool\n\nReturns True if the given event type is blocked from the queue. If a\nsequence of event types is passed, this will return True if any of those\nevent types are blocked."
#define DOC_EVENT_SETGRAB "pygame.event.set_grab()\n\ncontrol the sharing of input devices with other applications\n\nset_grab(bool, /) -> None\n\nWhen your program runs in a windowed environment, it will share the mouse\nand keyboard devices with other applications that have focus. If your\nprogram sets the event grab to True, it will lock all input into your\nprogram.\n\nIt is best to not always grab the input, since it prevents the user from\ndoing other things on their system."
#define DOC_EVENT_GETGRAB "pygame.event.get_grab()\n\ntest if the program is sharing input devices\n\nget_grab() -> bool\n\nReturns True when the input events are grabbed for this application."
#define DOC_EVENT_POST "pygame.event.post()\n\nplace a new event on the queue\n\npost(event, /) -> bool\n\nPlaces the given event at the end of the event queue.\n\nThis is usually used for placing custom events on the event queue.\nAny type of event can be posted, and the events posted can have any attributes.\n\nWhen this event is received on the event queue, it will be a shallow copy of\nthe event object posted by this function; the dict attribute of both events\nwill be a reference to the same dict object in memory. Modifications on one\ndict can affect another, use deepcopy operations on the dict object if you\ndon't want this behaviour.\n\nThis returns a boolean on whether the event was posted or not. Blocked events\ncannot be posted, and this function returns False if you try to post them.\n\nChanged in pygame 2.0.1: returns a boolean, previously returned None"
#define DOC_EVENT_CUSTOMTYPE "pygame.event.custom_type()\n\nmake custom user event type\n\ncustom_type() -> int\n\nReserves an event slot for use in a custom event userevent and returns the integer that the event slot is reserved to.\n\nIf too many events are made a pygame.error is raised.\n\nNew in pygame 2.0.0.dev3."
#define DOC_EVENT_EVENT "pygame.event.Event\n\npygame object for representing events\n\nEvent(type, dict) -> Event\n\nEvent(type, **attributes) -> Event\n\nA pygame object used for representing an event. Event instances\nsupport attribute assignment and deletion.\n\nWhen creating the object, the attributes may come from a dictionary\nargument with string keys or from keyword arguments.\n\nChanged in pygame-ce 2.1.4: This class is also available through the pygame.Event\nalias.\n\nFrom version 2.1.3 EventType is an alias for Event. Beforehand,\nEvent was a function that returned EventType instances. Use of\nEvent is preferred over EventType wherever it is possible, as\nthe latter could be deprecated in a future version.\n\nNew in pygame 1.9.2: Mutable attributes."
#define DOC_EVENT_EVENT_TYPE "type\n\nevent type identifier.\n\ntype -> int\n\nRead-only. The event type identifier. For user created event\nobjects, this is the type argument passed to\npygame.event.Event().\n\nFor example, some predefined event identifiers are QUIT and\nMOUSEMOTION."
#define DOC_EVENT_EVENT_DICT "__dict__\n\nevent attribute dictionary\n\n__dict__ -> dict\n\nRead-only. The event type specific attributes of an event. The\ndict attribute is a synonym for backward compatibility.\n\nFor example, the attributes of a KEYDOWN event would be unicode,\nkey, and mod"
