/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_TYPING "pygame.typing\n\n\n\npygame module providing common typehints\n\nNew in pygame-ce 2.5.2.\n\nA lot of pygame functions and methods allow the user to provide different types\nfor the same value like colors or points. This module exports the most common\ntype aliases for proper typehint annotations."
#define DOC_TYPING_FILELIKE "pygame.typing.FileLike\n\nAn object representing a file. This includes both path-like\nobjects and file-like objects, i.e.:\n\n\"my/string/path.txt\"\n\nopen(\"my/file/path.txt\")\n\npathlib.Path(\"my/pathlib/path.txt\")\n\nio.BytesIO(b\"my data: \\x00\\x01\")\n\nb\"my/bytes/path.txt\"\n\nAny object implementing the path protocol or file protocol."
#define DOC_TYPING_SEQUENCELIKE "pygame.typing.SequenceLike\n\nA variant of the standard Sequence ABC only requiring __getitem__\nand __len__. This includes custom sequences or builtin ones, i.e.:\n\n\"abcdefg\"\n\n[a, b, c, d, ...]\n\n(a, b, c, d, ...)\n\nBeing a generic, subscribing it will signal further precision such as\nSequenceLike[str] or SequenceLike[float]."
#define DOC_TYPING_POINT "pygame.typing.Point\n\nA sequence of two numbers (floats or ints), i.e:\n\npygame.Vector2(a, b)\n\n[a, b]\n\n(a, b)"
#define DOC_TYPING_INTPOINT "pygame.typing.IntPoint\n\nA sequence of strictly two integers such as [a, b] or (a, b)."
#define DOC_TYPING_COLORLIKE "pygame.typing.ColorLike\n\nAn object representing a color such as a mapped integer, a string or\na sequence of three or four integers in range 0-255, types supported by\nevery function accepting a color argument. i.e.:\n\npygame.Color(ColorLike)\n\n(r, g, b)\n\n(r, g, b, a)\n\n[r, g, b, a]\n\n\"green\" (color_list)\n\n\"#rrggbbaa\"\n\n0 (mapped color)"
#define DOC_TYPING_RECTLIKE "pygame.typing.RectLike\n\nAn object representing a rect such as a sequence of numbers or points\nor an object with a rect attribute or a method returning a rect. These types\nare supported by every function accepting a rect as argument. i.e.:\n\n(x, y, w, h)\n\n(Point, Point)\n\npygame.Rect(RectLike)\n\nAny object with a .rect attribute which is a RectLike or a function\nreturning a RectLike"
