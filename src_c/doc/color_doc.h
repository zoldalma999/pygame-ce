/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_COLOR "pygame.Color\n\npygame object for color representations\n\nColor(r, g, b) -> Color\n\nColor(r, g, b, a=255) -> Color\n\nColor(color_value) -> Color\n\nThe Color class represents RGBA color values using a value range of\n0 to 255 inclusive. It allows basic arithmetic operations — binary\noperations +, -, *, //, %, and unary operation ~ — to\ncreate new colors, supports conversions to other color spaces such as HSV\nor HSL and lets you adjust single color channels.\nAlpha defaults to 255 (fully opaque) when not given.\nThe arithmetic operations and correct_gamma() method preserve subclasses.\nFor the binary operators, the class of the returned color is that of the\nleft hand color object of the operator.\n\nColor objects support swizzling for their RGBA attributes, which allows\nthe creation of new color objects with the corresponding swizzled attributes\nas its RGBA attributes. For example, color.bgra provides a shortcut to\ndoing Color(color.b, color.g, color.r, color.a). Swizzling with other than\n4 attributes will return a tuple consisting of the corresponding elements\ninstead of a color object.\n\nColor objects support equality comparison with other color objects and 3 or\n4 element tuples of integers. There was a bug in pygame 1.8.1\nwhere the default alpha was 0, not 255 like previously.\n\nColor objects export the C level array interface. The interface exports a\nread-only one dimensional unsigned byte array of the same assigned length\nas the color. The new buffer interface is also exported, with the same\ncharacteristics as the array interface.\n\nThe floor division, //, and modulus, %, operators do not raise\nan exception for division by zero. Instead, if a color, or alpha, channel\nin the right hand color is 0, then the result is 0. For example:\n\n# These expressions are True\nColor(255, 255, 255, 255) // Color(0, 64, 64, 64) == Color(0, 3, 3, 3)\nColor(255, 255, 255, 255) % Color(64, 64, 64, 0) == Color(63, 63, 63, 0)\n\nUse int(color) to return the immutable integer value of the color,\nusable as a dict key. This integer value differs from the mapped\npixel values of pygame.Surface.get_at_mapped(),\npygame.Surface.map_rgb() and pygame.Surface.unmap_rgb().\nIt can be passed as a color_value argument to Color\n(useful with sets).\n\nSee color_list for samples of the available named colors.\n\nParameters\n\nr (int) -- red value in the range of 0 to 255 inclusive\n\ng (int) -- green value in the range of 0 to 255 inclusive\n\nb (int) -- blue value in the range of 0 to 255 inclusive\n\na (int) -- (optional) alpha value in the range of 0 to 255 inclusive,\ndefault is 255\n\ncolor_value (Color or str or int or tuple(int, int, int, [int]) or\nlist(int, int, int, [int])) -- color value (see note below for the supported formats)Supported color_value formats:\n\n- Color object: clones the given Color object\n\n- Color name: str: name of the color to use, e.g. 'red'\n(all the supported name strings can be found in the\n color_list, with sample swatches)\n\n- HTML color format str: '#rrggbbaa' or '#rrggbb',\nwhere rr, gg, bb, and aa are 2-digit hex numbers in the range\nof 0 to 0xFF inclusive, the aa (alpha) value defaults to 0xFF\nif not provided\n\n- hex number str: '0xrrggbbaa' or '0xrrggbb', where\nrr, gg, bb, and aa are 2-digit hex numbers in the range of 0x00\nto 0xFF inclusive, the aa (alpha) value defaults to 0xFF if not\nprovided\n\n- int: int value of the color to use, using hex numbers can\nmake this parameter more readable, e.g. 0xrrggbbaa, where rr,\ngg, bb, and aa are 2-digit hex numbers in the range of 0x00 to\n0xFF inclusive, note that the aa (alpha) value is not optional for\nthe int format and must be provided\n\n- tuple/list of int color values: (R, G, B, A) or\n(R, G, B), where R, G, B, and A are int values in the range of\n0 to 255 inclusive, the A (alpha) value defaults to 255 if not\nprovided\n\nReturns\n\na newly created Color object\n\nReturn type\n\nColor\n\nChanged in pygame 2.0.0: Support for tuples, lists, and Color objects when creating\nColor objects.\n\nChanged in pygame 1.9.2: Color objects export the C level array interface.\n\nChanged in pygame 1.9.0: Color objects support 4-element tuples of integers.\n\nChanged in pygame 1.8.1: New implementation of the class.\n\n"
#define DOC_COLOR_R "r\n\nGets or sets the red value of the Color.\n\nr -> int\n\nThe red value of the Color."
#define DOC_COLOR_G "g\n\nGets or sets the green value of the Color.\n\ng -> int\n\nThe green value of the Color."
#define DOC_COLOR_B "b\n\nGets or sets the blue value of the Color.\n\nb -> int\n\nThe blue value of the Color."
#define DOC_COLOR_A "a\n\nGets or sets the alpha value of the Color.\n\na -> int\n\nThe alpha value of the Color."
#define DOC_COLOR_CMY "cmy\n\nGets or sets the CMY representation of the Color.\n\ncmy -> tuple\n\nThe CMY representation of the Color. The CMY components are in\nthe ranges C = [0, 1], M = [0, 1], Y = [0, 1]. Note that this\nwill not return the absolutely exact CMY values for the set RGB\nvalues in all cases. Due to the RGB mapping from 0-255 and the\nCMY mapping from 0-1 rounding errors may cause the CMY values to\ndiffer slightly from what you might expect."
#define DOC_COLOR_HSVA "hsva\n\nGets or sets the HSVA representation of the Color.\n\nhsva -> tuple\n\nThe HSVA representation of the Color. The HSVA components are in\nthe ranges H = [0, 360], S = [0, 100], V = [0, 100], A = [0,\n100]. Note that this will not return the absolutely exact HSV values\nfor the set RGB values in all cases. Due to the RGB mapping from\n0-255 and the HSV mapping from 0-100 and 0-360 rounding errors may\ncause the HSV values to differ slightly from what you might expect."
#define DOC_COLOR_HSLA "hsla\n\nGets or sets the HSLA representation of the Color.\n\nhsla -> tuple\n\nThe HSLA representation of the Color. The HSLA components are in\nthe ranges H = [0, 360], S = [0, 100], L = [0, 100], A = [0,\n100]. Note that this will not return the absolutely exact HSL values\nfor the set RGB values in all cases. Due to the RGB mapping from\n0-255 and the HSL mapping from 0-100 and 0-360 rounding errors may\ncause the HSL values to differ slightly from what you might expect."
#define DOC_COLOR_I1I2I3 "i1i2i3\n\nGets or sets the I1I2I3 representation of the Color.\n\ni1i2i3 -> tuple\n\nThe I1I2I3 representation of the Color. The I1I2I3 components are\nin the ranges I1 = [0, 1], I2 = [-0.5, 0.5], I3 = [-0.5,\n0.5]. Note that this will not return the absolutely exact I1I2I3\nvalues for the set RGB values in all cases. Due to the RGB\nmapping from 0-255 and the I1I2I3 mapping from 0-1 rounding errors\nmay cause the I1I2I3 values to differ slightly from what you might\nexpect."
#define DOC_COLOR_NORMALIZED "normalized\n\nGets or sets the normalized representation of the Color.\n\nnormalized -> tuple\n\nThe Normalized` representation of the Color. The components of the Normalized\nrepresentation represent the basic RGBA values but normalized the\nranges of the values are r = [0, 1], g = [0, 1], b = [0, 1]\nand a = [0, 1] respectively. Note that this will not return the absolutely exact\nNormalized values for the set RGBA values in all cases.\nDue to the RGB mapping from 0-255 and the Normalized mapping from 0-1\nrounding errors may cause the Normalized values to differ\nslightly from what you might expect.\n\nNew in pygame-ce 2.5.0."
#define DOC_COLOR_HEX "hex\n\nGets or sets the stringified hexadecimal representation of the Color.\n\nhex -> str\n\nThe stringified hexadecimal representation of the Color. The hexadecimal string\nis formatted as \"#rrggbbaa\" where rr, gg, bb, and aa are two digit hex numbers\nin the range from 0x00 to 0xff.\n\nSetting this property means changing the color channels in place. Both lowercase\nand uppercase letters are allowed, the alpha can be omitted (defaults to 0xff) and\nthe string can start with either # or 0x.\n\nNew in pygame-ce 2.5.4."
#define DOC_COLOR_FROMCMY "classmethod from_cmy()\n\nReturns a Color object from a CMY representation\n\nfrom_cmy(object, /) -> Color\n\nfrom_cmy(c, m, y, /) -> Color\n\nCreates a Color object from the given CMY components. Refer to Color.cmy\nfor more information.\n\nNew in pygame-ce 2.3.1."
#define DOC_COLOR_FROMHSVA "classmethod from_hsva()\n\nReturns a Color object from an HSVA representation\n\nfrom_hsva(object, /) -> Color\n\nfrom_hsva(h, s, v, a, /) -> Color\n\nCreates a Color object from the given HSVA components. Refer to Color.hsva\nfor more information.\n\nNew in pygame-ce 2.3.1."
#define DOC_COLOR_FROMHSLA "classmethod from_hsla()\n\nReturns a Color object from an HSLA representation\n\nfrom_hsla(object, /) -> Color\n\nfrom_hsla(h, s, l, a, /) -> Color\n\nCreates a Color object from the given HSLA components. Refer to Color.hsla\nfor more information.\n\nNew in pygame-ce 2.3.1."
#define DOC_COLOR_FROMI1I2I3 "classmethod from_i1i2i3()\n\nReturns a Color object from a I1I2I3 representation\n\nfrom_i1i2i3(object, /) -> Color\n\nfrom_i1i2i3(i1, i2, i3, /) -> Color\n\nCreates a Color object from the given I1I2I3 components. Refer to Color.i1i2i3\nfor more information.\n\nNew in pygame-ce 2.3.1."
#define DOC_COLOR_FROMNORMALIZED "classmethod from_normalized()\n\nReturns a Color object from a Normalized representation\n\nfrom_normalized(object, /) -> Color\n\nfrom_normalized(r, g, b, a /) -> Color\n\nCreates a Color object from the given Normalized components. Refer to Color.normalized\nfor more information.\n\nNew in pygame-ce 2.5.0."
#define DOC_COLOR_NORMALIZE "normalize()\n\nReturns the normalized RGBA values of the Color.\n\nnormalize() -> tuple\n\nReturns the normalized RGBA values of the Color as floating point\nvalues."
#define DOC_COLOR_CORRECTGAMMA "correct_gamma()\n\nApplies a certain gamma value to the Color.\n\ncorrect_gamma(gamma, /) -> Color\n\nApplies a certain gamma value to the Color and returns a new Color with\nthe adjusted RGBA values."
#define DOC_COLOR_SETLENGTH "set_length()\n\nSet the number of elements in the Color to 1,2,3, or 4.\n\nset_length(len, /) -> None\n\nDEPRECATED: You may unpack the values you need like so,\nr, g, b, _ = pygame.Color(100, 100, 100)\nIf you only want r, g and b\nOr\nr, g, *_ = pygame.Color(100, 100, 100)\nif you only want r and g\n\nThe default Color length is 4. Colors can have lengths 1,2,3 or 4. This\nis useful if you want to unpack to r,g,b and not r,g,b,a. If you want to\nget the length of a Color do len(acolor).\n\nDeprecated since pygame-ce 2.1.3.\n\nNew in pygame 1.9.0."
#define DOC_COLOR_GRAYSCALE "grayscale()\n\nreturns the grayscale of a Color\n\ngrayscale() -> Color\n\nReturns a new Color object which represents the grayscaled version of self, using the luminosity formula,\nwhich weights red, green, and blue according to their relative contribution to perceived brightness.\n\nNew in pygame-ce 2.1.4."
#define DOC_COLOR_LERP "lerp()\n\nreturns a linear interpolation to the given Color.\n\nlerp(Color, float) -> Color\n\nReturns a Color which is a linear interpolation between self and the\ngiven Color in RGBA space. The second parameter determines how far\nbetween self and other the result is going to be.\nIt must be a value between 0 and 1 where 0 means self and 1 means\nother will be returned.\n\nNew in pygame 2.0.1."
#define DOC_COLOR_PREMULALPHA "premul_alpha()\n\nreturns a Color where the r,g,b components have been multiplied by the alpha.\n\npremul_alpha() -> Color\n\nReturns a new Color where each of the red, green and blue color\nchannels have been multiplied by the alpha channel of the original\ncolor. The alpha channel remains unchanged.\n\nThis is useful when working with the BLEND_PREMULTIPLIED blending mode\nflag for pygame.Surface.blit(), which assumes that all surfaces using\nit are using pre-multiplied alpha colors.\n\nNew in pygame 2.0.0."
#define DOC_COLOR_UPDATE "update()\n\nSets the elements of the color\n\nupdate(r, g, b, /) -> None\n\nupdate(r, g, b, a=255, /) -> None\n\nupdate(color_value, /) -> None\n\nSets the elements of the color. See parameters for pygame.Color() for the\nparameters of this function. If the alpha value was not set it will not change.\n\nNew in pygame 2.0.1."
