/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_TESTS "pygame.tests\n\n\n\nPygame unit test suite package\n\nA quick way to run the test suite package from the command line is to import\nthe go submodule with the Python -m option:\n\npython -m pygame.tests [<test options>]\n\nCommand line option --help displays a usage message. Available options\ncorrespond to the pygame.tests.run() arguments.\n\nThe xxxx_test submodules of the tests package are unit test suites for\nindividual parts of pygame. Each can also be run as a main program. This is\nuseful if the test is interactive.\n\nFor pygame development the test suite can be run from a pygame distribution\nroot directory. Program run_tests.py is provided for convenience, though\ntest/go.py can be run directly.\n\nModule level tags control which modules are included in a unit test run. Tags\nare assigned to a unit test module with a corresponding <name>_tags.py module.\nThe tags module has the global __tags__, a list of tag names. For example,\ncontroller_test.py has a tag variable containing a tags list that\nhas the 'interactive' string. The 'interactive' tag indicates controller_test.py\nexpects user input. It is excluded from a run_tests.py or\npygame.tests.go run. Two other tags that are excluded are 'ignore' and\n'subprocess_ignore'. These two tags indicate unit tests that will not run on a\nparticular platform, or for which no corresponding pygame module is available.\nThe test runner will list each excluded module along with the tag responsible."
#define DOC_TESTS_RUN "pygame.tests.run()\n\nRun the pygame unit test suite\n\nrun(*args, **kwds) -> tuple\n\nPositional arguments (optional):\n\nThe names of tests to include. If omitted then all tests are run. Test names\nneed not include the trailing '_test'.\n\nKeyword arguments:\n\nincomplete - fail incomplete tests (default False)\nnosubprocess - run all test suites in the current process\n               (default False, use separate subprocesses)\ndump - dump failures/errors as dict ready to eval (default False)\nfile - if provided, the name of a file into which to dump failures/errors\ntimings - if provided, the number of times to run each individual test to\n          get an average run time (default is run each test once)\nexclude - A list of TAG names to exclude from the run\nshow_output - show silenced stderr/stdout on errors (default False)\nall - dump all results, not just errors (default False)\nrandomize - randomize order of tests (default False)\nseed - if provided, a seed randomizer integer\nmulti_thread - if provided, the number of THREADS in which to run\n               subprocessed tests\ntime_out - if subprocess is True then the time limit in seconds before\n           killing a test (default 30)\nfake - if provided, the name of the fake tests package in the\n       run_tests__tests subpackage to run instead of the normal\n       pygame tests\npython - the path to a python executable to run subprocessed tests\n         (default sys.executable)\n\nReturn value:\n\nA tuple of total number of tests run, dictionary of error information.\nThe dictionary is empty if no errors were recorded.\n\nBy default individual test modules are run in separate subprocesses. This\nrecreates normal pygame usage where pygame.init() and pygame.quit()\nare called only once per program execution, and avoids unfortunate\ninteractions between test modules. Also, a time limit is placed on test\nexecution, so frozen tests are killed when their time allotment expired. Use\nthe single process option if threading is not working properly or if tests\nare taking too long. It is not guaranteed that all tests will pass in single\nprocess mode.\n\nTests are run in a randomized order if the randomize argument is True or a\nseed argument is provided. If no seed integer is provided then the system\ntime is used.\n\nIndividual test modules may have a __tags__ attribute, a list of tag strings\nused to selectively omit modules from a run. By default only 'interactive'\nmodules such as controller_test are ignored. An interactive module must be run\nfrom the console as a Python program.\n\nThis function can only be called once per Python session. It is not\nreentrant."
