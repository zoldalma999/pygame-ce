/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_SDL2VIDEO "pygame.sdl2_video\n\n\n\nThis module isn't ready for prime time yet, it's still in development.\nThese docs are primarily meant to help the pygame developers and\nsuper-early adopters who are in communication with the developers.\nThis API will change.\n\nExperimental pygame module for porting new SDL video systems"
#define DOC_SDL2_VIDEO_MESSAGEBOX "pygame._sdl2.video.messagebox()\n\nCreate a native GUI message box\n\nmessagebox(title, message, window=None, info=False, warn=False, buttons=('OK',), return_button=0, escape_button=0)\n\nParameters\n\ntitle (str) -- A title string, or None to omit a title.\n\nmessage (str) -- A message string.\n\ninfo (bool) -- If True, display an info message.\n\nwarn (bool) -- If True, display a warning message.\n\nerror (bool) -- If True, display an error message.\n\nbuttons (tuple) -- An optional sequence of button name strings to show to the user.\n\nreturn_button (int) -- Button index to use if the return key is hit (-1 for none).\n\nescape_button (int) -- Button index to use if the escape key is hit (-1 for none).\n\nReturns\n\nThe index of the button that was pushed."
#define DOC_SDL2_VIDEO_RENDERERDRIVERINFO "pygame._sdl2.video.RendererDriverInfo\n\npygame object encapsulating Renderer driver information\n\nAttributes:\n\nname\nflags\nnum_texture_formats\nmax_texture_width\nmax_texture_height"
#define DOC_SDL2_VIDEO_GETDRIVERS "pygame._sdl2.video.get_drivers()\n\nYield info about the rendering drivers available for Renderer objects\n\nget_drivers() -> Iterator[RendererDriverInfo]"
#define DOC_SDL2_VIDEO_GETGRABBEDWINDOW "pygame._sdl2.video.get_grabbed_window()\n\nGet the window with input grab enabled\n\nget_grabbed_window() -> Window or None\n\nGets the Window with input grab enabled, if input is grabbed,\notherwise None is returned."
#define DOC_SDL2_VIDEO_WINDOW "pygame._sdl2.video.Window\n\npygame object that represents a window\n\nSee pygame.Window"
#define DOC_SDL2_VIDEO_TEXTURE "pygame._sdl2.video.Texture\n\npygame object that represents a texture\n\nTexture(renderer, size, depth=0, static=False, streaming=False, target=False, scale_quality=None) -> Texture\n\nCreates an empty texture.\n\nParameters\n\nrenderer (Renderer) -- The rendering context for the texture.\n\nsize (tuple) -- The width and height for the texture.\n\ndepth (int) -- The pixel format (0 to use the default).\n\nstatic (bool) -- Initialize the texture as static\n(changes rarely, not lockable).\n\nstreaming (bool) -- Initialize the texture as streaming\n(changes frequently, lockable).\n\ntarget (bool) -- Initialize the texture as target\n(can be used as a rendering target).\n\nscale_quality (int) -- Set the texture scale quality. Can be 0\n(nearest pixel sampling), 1\n(linear filtering, supported by OpenGL and Direct3D)\nand 2 (anisotropic filtering, supported by Direct3D).\n\nOne of static, streaming, or target can be set\nto True. If all are False, then static is used.\n\nTexture objects provide a platform-agnostic API for working with GPU textures.\nThey are stored in GPU video memory (VRAM), and are therefore very fast to\nrotate and resize when drawn onto a Renderer\n(an object that manages a rendering context inside a Window) on most GPUs.\n\nSince textures are stored in GPU video memory, they aren't as easy to modify\nas the image data of pygame.Surface objects, which reside in RAM.\n\nTextures can be modified in 2 ways:\n\nBy drawing other textures onto them, achieved by marking them as \"target\" textures and setting them as the rendering target of their Renderer object (if properly configured and supported).\n\nBy updating them with a Surface.\n\nA pygame.Surface-to-Texture update is generally\nconsidered a slow operation, as it requires image data to be uploaded from\nRAM to VRAM, which can have a notable overhead cost.\n\n"
#define DOC_SDL2_VIDEO_TEXTURE_RENDERER "renderer\n\nGet the renderer associated with the texture (**read-only**)\n\nrenderer -> Renderer"
#define DOC_SDL2_VIDEO_TEXTURE_WIDTH "width\n\nGet the width of the texture (**read-only**)\n\nwidth -> int"
#define DOC_SDL2_VIDEO_TEXTURE_HEIGHT "height\n\nGet the height of the texture (**read-only**)\n\nheight -> int"
#define DOC_SDL2_VIDEO_TEXTURE_ALPHA "alpha\n\nGet or set the additional alpha value multiplied into draw operations\n\nalpha -> int"
#define DOC_SDL2_VIDEO_TEXTURE_BLENDMODE "blend_mode\n\nGet or set the blend mode for texture drawing operations\n\nblend_mode -> int\n\nGets or sets the blend mode for the texture's drawing operations.\nValid blend modes are any of the BLENDMODE_* constants or a custom one."
#define DOC_SDL2_VIDEO_TEXTURE_COLOR "color\n\nGet or set the additional color value multiplied into texture drawing operations\n\ncolor -> Color"
#define DOC_SDL2_VIDEO_TEXTURE_FROMSURFACE "static from_surface()\n\nCreate a texture from an existing surface\n\nfrom_surface(renderer, surface) -> Texture\n\nParameters\n\nrenderer (Renderer) -- Rendering context for the texture.\n\nsurface (Surface) -- The surface to create a texture from."
#define DOC_SDL2_VIDEO_TEXTURE_GETRECT "get_rect()\n\nGet the rectangular area of the texture\n\nget_rect(**kwargs) -> Rect\n\nLike pygame.Surface.get_rect(), this method returns a new\npygame.Rect covering the entire texture. It will always\nhave a topleft of (0, 0) with a width and height the same size as the\ntexture."
#define DOC_SDL2_VIDEO_TEXTURE_DRAW "draw()\n\nCopy a portion of the texture to the rendering target\n\ndraw(srcrect=None, dstrect=None, angle=0, origin=None, flip_x=False, flip_y=False) -> None\n\nParameters\n\nsrcrect -- The source rectangle on the texture, or None for the\nentire texture.\n\ndstrect -- The destination rectangle on the rendering target, or\nNone for the entire rendering target. The texture\nwill be stretched to fill dstrect.\n\nangle (float) -- The angle (in degrees) to rotate dstrect around\n(clockwise).\n\norigin -- The point around which dstrect will be rotated.\nIf None, it will equal the center:\n(dstrect.w/2, dstrect.h/2).\n\nflip_x (bool) -- Flip the drawn texture portion horizontally (x - axis).\n\nflip_y (bool) -- Flip the drawn texture portion vertically (y - axis)."
#define DOC_SDL2_VIDEO_TEXTURE_DRAWTRIANGLE "draw_triangle()\n\nCopy a triangle portion of the texture to the rendering target using the given coordinates\n\ndraw_triangle(p1_xy, p2_xy, p3_xy, p1_uv=(0.0, 0.0), p2_uv=(1.0, 1.0), p3_uv=(0.0, 1.0), p1_mod=(255, 255, 255, 255), p2_mod=(255, 255, 255, 255), p3_mod=(255, 255, 255, 255)) -> None\n\nParameters\n\np1_xy -- The first vertex coordinate on the rendering target.\n\np2_xy -- The second vertex coordinate on the rendering target.\n\np3_xy -- The third vertex coordinate on the rendering target.\n\np1_uv -- The first UV coordinate of the triangle portion.\n\np2_uv -- The second UV coordinate of the triangle portion.\n\np3_uv -- The third UV coordinate of the triangle portion.\n\np1_mod -- The first vertex color modulation.\n\np2_mod -- The second vertex color modulation.\n\np3_mod -- The third vertex color modulation."
#define DOC_SDL2_VIDEO_TEXTURE_DRAWQUAD "draw_quad()\n\nCopy a quad portion of the texture to the rendering target using the given coordinates\n\ndraw_quad(p1_xy, p2_xy, p3_xy, p4_xy, p1_uv=(0.0, 0.0), p2_uv=(1.0, 0.0), p3_uv=(1.0, 1.0), p4_uv=(0.0, 1.0), p1_mod=(255, 255, 255, 255), p2_mod=(255, 255, 255, 255), p3_mod=(255, 255, 255, 255), p4_mod=(255, 255, 255, 255)) -> None\n\nParameters\n\np1_xy -- The first vertex coordinate on the rendering target.\n\np2_xy -- The second vertex coordinate on the rendering target.\n\np3_xy -- The third vertex coordinate on the rendering target.\n\np4_xy -- The fourth vertex coordinate on the rendering target.\n\np1_uv -- The first UV coordinate of the quad portion.\n\np2_uv -- The second UV coordinate of the quad portion.\n\np3_uv -- The third UV coordinate of the quad portion.\n\np4_uv -- The fourth UV coordinate of the quad portion.\n\np1_mod -- The first vertex color modulation.\n\np2_mod -- The second vertex color modulation.\n\np3_mod -- The third vertex color modulation.\n\np4_mod -- The fourth vertex color modulation."
#define DOC_SDL2_VIDEO_TEXTURE_UPDATE "update()\n\nUpdate the texture with Surface (slow operation, use sparingly)\n\nupdate(surface, area=None) -> None\n\nParameters\n\nsurface (Surface) -- The source surface.\n\narea -- The rectangular area of the texture to update.\n\nThis is a fairly slow function, intended for use with static textures\nthat do not change often.\n\nIf the texture is intended to be updated often, it is preferred to create\nthe texture as streaming and use the locking functions.\n\nWhile this function will work with streaming textures, for optimization\nreasons you may not get the pixels back if you lock the texture afterward."
#define DOC_SDL2_VIDEO_IMAGE "pygame._sdl2.video.Image\n\npygame object that represents a portion of a texture\n\nImage(texture_or_image, srcrect=None) -> Image\n\nCreates an Image.\n\nParameters\n\ntexture_or_image (Texture | Image) -- The Texture or an existing Image\nobject to create the Image from.\n\nsrcrect -- The rectangular portion of the Texture or Image object\npassed to texture_or_image.\n\nAn Image object represents a portion of a Texture. Specifically,\nthey can be used to store and manipulate arguments for Texture.draw()\nin a more user-friendly way.\n\n"
#define DOC_SDL2_VIDEO_IMAGE_ANGLE "angle\n\nGet and set the angle the Image draws itself with\n\nangle -> float"
#define DOC_SDL2_VIDEO_IMAGE_FLIPX "flip_x\n\nGet or set whether the Image is flipped on the x axis\n\nflip_x -> bool"
#define DOC_SDL2_VIDEO_IMAGE_FLIPY "flip_y\n\nGet or set whether the Image is flipped on the y axis\n\nflip_y -> bool"
#define DOC_SDL2_VIDEO_IMAGE_COLOR "color\n\nGet or set the Image color modifier\n\ncolor -> Color"
#define DOC_SDL2_VIDEO_IMAGE_ALPHA "alpha\n\nGet or set the Image alpha modifier (0-255)\n\nalpha -> float"
#define DOC_SDL2_VIDEO_IMAGE_BLENDMODE "blend_mode\n\nGet or set the blend mode for the Image\n\nblend_mode -> int"
#define DOC_SDL2_VIDEO_IMAGE_TEXTURE "texture\n\nGet or set the Texture the Image is based on\n\ntexture -> Texture"
#define DOC_SDL2_VIDEO_IMAGE_SRCRECT "srcrect\n\nGet or set the Rect the Image is based on\n\nsrcrect -> Rect"
#define DOC_SDL2_VIDEO_IMAGE_ORIGIN "origin\n\nGet or set the Image's origin of rotation\n\norigin -> (float, float) or None\n\nGets or sets the Image's origin of rotation, a 2D point relative to\nthe topleft coordinates of the Image's rectangular area.\n\nAn origin of None means no origin was set and the Image will be\nrotated around its center."
#define DOC_SDL2_VIDEO_IMAGE_GETRECT "get_rect()\n\nGet the rectangular area of the Image\n\nget_rect() -> Rect\n\nThe returned Rect object might contain position information\nrelative to the bounds of the Texture or Image object it was\ncreated from."
#define DOC_SDL2_VIDEO_IMAGE_DRAW "draw()\n\nCopy a portion of the Image to the rendering target\n\ndraw(srcrect=None, dstrect=None) -> None\n\nParameters\n\nsrcrect -- Source rectangle specifying a sub-Image, or None for the\nentire Image.\n\ndstrect -- Destination rectangle or position on the render target,\nor None for entire target. The Image is stretched to\nfill dstrect."
#define DOC_SDL2_VIDEO_RENDERER "pygame._sdl2.video.Renderer\n\npygame object wrapping a 2D rendering context for a window\n\nRenderer(window, index=-1, accelerated=-1, vsync=False, target_texture=False) -> Renderer\n\nCreates a 2D rendering context for a window.\n\nParameters\n\nwindow (Window) -- The window onto which the rendering context should be\nplaced.\n\nindex (int) -- The index of rendering driver to initialize, or -1 to init\nthe first supporting the requested options.\n\naccelerated (int) -- If 1, the renderer uses hardware acceleration.\nif 0, the renderer is a software fallback.\n-1 gives precedence to renderers using hardware\nacceleration.\n\nvsync (bool) -- If True Renderer.present() is synchronized with\nthe refresh rate.\n\ntarget_texture (bool) -- Whether the renderer should support setting\nTexture objects as target textures, to\nenable drawing onto them.\n\nRenderer objects provide a cross-platform API for rendering 2D\ngraphics onto a Window, by using either Metal (macOS), OpenGL\n(macOS, Windows, Linux) or Direct3D (Windows) rendering drivers, depending\non what is set or is available on a system during their creation.\n\nThey can be used to draw both Texture objects and simple points,\nlines and rectangles (which are colored based on Renderer.draw_color).\n\nIf configured correctly and supported by an underlying rendering driver, Renderer\nobjects can have a Texture object temporarily set as a target texture\n(the Texture object must have been created with target texture usage support),\nwhich allows those textures to be drawn onto.\n\nTo present drawn content onto the window, Renderer.present() should be\ncalled. Renderer.clear() should be called to clear any drawn content\nwith the set Renderer draw color.\n\nWhen things are drawn onto Renderer objects, an internal batching system is\nused by default to batch those \"draw calls\" together, to have all of them be\nprocessed in one go when Renderer.present() is called. This is unlike\npygame.Surface objects, on which modifications via blitting occur\nimmediately, but lends well to the behavior of GPUs, as draw calls can be\nexpensive on lower-end models.\n\n"
#define DOC_SDL2_VIDEO_RENDERER_DRAWBLENDMODE "draw_blend_mode\n\nGet or set the blend mode used for primitive drawing operations\n\ndraw_blend_mode -> int"
#define DOC_SDL2_VIDEO_RENDERER_DRAWCOLOR "draw_color\n\nGet or set the color used for primitive drawing operations\n\ndraw_color -> Color"
#define DOC_SDL2_VIDEO_RENDERER_LOGICALSIZE "logical_size\n\nGet or set the logical Renderer size (a device independent resolution for rendering)\n\nlogical_size -> (int width, int height)"
#define DOC_SDL2_VIDEO_RENDERER_SCALE "scale\n\nGet the drawing scale for the current rendering target\n\nscale -> (float, float)"
#define DOC_SDL2_VIDEO_RENDERER_TARGET "target\n\nGet or set the current rendering target\n\ntarget -> Texture or None\n\nGets or sets the current rendering target.\nA value of None means that no custom rendering target was set and the\nRenderer's window will be used as the target."
#define DOC_SDL2_VIDEO_RENDERER_FROMWINDOW "classmethod from_window()\n\nCreate a Renderer from an existing window\n\nfrom_window(window) -> Renderer"
#define DOC_SDL2_VIDEO_RENDERER_CLEAR "clear()\n\nClear the current rendering target with the drawing color\n\nclear() -> None"
#define DOC_SDL2_VIDEO_RENDERER_PRESENT "present()\n\nUpdate the screen with any rendering performed since the previous call\n\npresent() -> None\n\nPresents the composed backbuffer to the screen.\nUpdates the screen with any rendering performed since the previous call."
#define DOC_SDL2_VIDEO_RENDERER_GETVIEWPORT "get_viewport()\n\nGet the drawing area on the rendering target\n\nget_viewport() -> Rect"
#define DOC_SDL2_VIDEO_RENDERER_SETVIEWPORT "set_viewport()\n\nSet the drawing area on the rendering target\n\nset_viewport(area) -> None\n\nParameters\n\narea -- A pygame.Rect or tuple representing the\ndrawing area on the target, or None to use the\nentire area of the current rendering target."
#define DOC_SDL2_VIDEO_RENDERER_BLIT "blit()\n\nDraw textures using a Surface-like API\n\nblit(source, dest, area=None, special_flags=0)-> Rect\n\nFor compatibility purposes. Draws Texture objects onto the\nRenderer using a method signature similar to pygame.Surface.blit().\n\nParameters\n\nsource -- A Texture or Image to draw.\n\ndest -- The drawing destination on the rendering target.\n\narea -- The portion of the source texture or image to draw from.\n\nspecial_flags -- have no effect at this moment.\n\nTextures created by different Renderers cannot shared with each other!"
#define DOC_SDL2_VIDEO_RENDERER_DRAWLINE "draw_line()\n\nDraw a line\n\ndraw_line(p1, p2) -> None\n\nParameters\n\np1 -- The line start point.\n\np2 -- The line end point."
#define DOC_SDL2_VIDEO_RENDERER_DRAWPOINT "draw_point()\n\nDraw a point\n\ndraw_point(point) -> None\n\nParameters\n\npoint -- The point's coordinates."
#define DOC_SDL2_VIDEO_RENDERER_DRAWRECT "draw_rect()\n\nDraw a rectangle outline\n\ndraw_rect(rect)-> None\n\nParameters\n\nrect -- The pygame.Rect-like rectangle to draw."
#define DOC_SDL2_VIDEO_RENDERER_FILLRECT "fill_rect()\n\nDraw a filled rectangle\n\nfill_rect(rect)-> None\n\nParameters\n\nrect -- The pygame.Rect-like rectangle to draw."
#define DOC_SDL2_VIDEO_RENDERER_DRAWTRIANGLE "draw_triangle()\n\nDraw a triangle outline\n\ndraw_triangle(p1, p2, p3) -> None\n\nParameters\n\np1 -- The first triangle point.\n\np2 -- The second triangle point.\n\np2 -- The third triangle point."
#define DOC_SDL2_VIDEO_RENDERER_FILLTRIANGLE "fill_triangle()\n\nDraw a filled triangle\n\nfill_triangle(p1, p2, p3) -> None\n\nParameters\n\np1 -- The first triangle point.\n\np2 -- The second triangle point.\n\np2 -- The third triangle point."
#define DOC_SDL2_VIDEO_RENDERER_DRAWQUAD "draw_quad()\n\nDraw a quad outline\n\ndraw_quad(p1, p2, p3, p4) -> None\n\nParameters\n\np1 -- The first quad point.\n\np2 -- The second quad point.\n\np2 -- The third quad point.\n\np2 -- The fourth quad point."
#define DOC_SDL2_VIDEO_RENDERER_FILLQUAD "fill_quad()\n\nDraw a filled quad\n\nfill_quad(p1, p2, p3, p4) -> None\n\nParameters\n\np1 -- The first quad point.\n\np2 -- The second quad point.\n\np2 -- The third quad point.\n\np2 -- The fourth quad point."
#define DOC_SDL2_VIDEO_RENDERER_TOSURFACE "to_surface()\n\nRead pixels from current rendering target and create a Surface (slow operation, use sparingly)\n\nto_surface(surface=None, area=None)-> Surface\n\nRead pixel data from the current rendering target and return a\npygame.Surface containing it.\n\nParameters\n\nsurface (Surface) -- A pygame.Surface object to read the pixel\ndata into. It must be large enough to fit the area, otherwise\nValueError is raised.\nIf set to None, a new surface will be created.\n\narea -- The area of the screen to read pixels from. The area is\nclipped to fit inside the viewport.\nIf None, the entire viewport is used.\n\nThis is a very slow operation, due to the overhead of the VRAM to RAM\ndata transfer and the cost of creating a potentially large\npygame.Surface. It should not be used frequently."
#define DOC_SDL2_VIDEO_RENDERER_COMPOSECUSTOMBLENDMODE "compose_custom_blend_mode()\n\nCompose a custom blend mode\n\ncompose_custom_blend_mode(color_mode, alpha_mode) -> int\n\nCompose a custom blend mode.\nSee https://wiki.libsdl.org/SDL2/SDL_ComposeCustomBlendMode for more information.\n\nParameters\n\ncolor_mode -- A tuple (srcColorFactor, dstColorFactor, colorOperation)\n\nalpha_mode -- A tuple (srcAlphaFactor, dstAlphaFactor, alphaOperation)\n\nReturns\n\nA blend mode to be used with Renderer.set_draw_blend_mode() and Texture.set_blend_mode()."
