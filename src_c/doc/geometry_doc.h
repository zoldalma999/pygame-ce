/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_GEOMETRY "pygame.geometry\n\n\n\nExperimental Module\n\nThis module is a work in progress. Refrain from relying on any features provided by\nthis module, as they are subject to change or removal without prior notice.\n\nNew in pygame-ce 2.4.0.\n\npygame module for the Circle, Line, and Polygon objects"
#define DOC_CIRCLE "pygame.Circle\n\npygame object for representing a circle\n\nCircle((x, y), radius) -> Circle\n\nCircle(x, y, radius) -> Circle\n\nThe Circle class provides many useful methods for collision testing, transformation and intersection.\nA Circle can be created from a combination of a pair of coordinates that represent\nthe center of the circle and a radius. Circles can also be created from python objects that\nare already a Circle (effectively copying the circle) or have an attribute named \"circle\".\n\nSpecifically, to construct a circle you can pass the x, y, and radius values as separate\narguments or inside a sequence(list or tuple).\n\nFunctions that require a Circle argument may also accept these values as Circles:\n\n((x, y), radius)\n(x, y, radius)\n(vector2, radius)\n\nThe Circle class only stores the x, y and r attributes, everything else is calculated\non the fly based on them.\n\nCircle Attributes\n\n\n\nCircle Methods\n\n\n\n"
#define DOC_CIRCLE_X "x\n\ncenter x coordinate of the circle\n\nx -> float\n\nThe horizontal coordinate of the center of the circle. Reassigning it moves the circle.\n\nNew in pygame-ce 2.4.0."
#define DOC_CIRCLE_Y "y\n\ncenter y coordinate of the circle\n\ny -> float\n\nThe vertical coordinate of the center of the circle. Reassigning it moves the circle.\n\nNew in pygame-ce 2.4.0."
#define DOC_CIRCLE_R "r\n\nradius of the circle\n\nr -> float\n\nRepresents the size of the circle. It can't be negative. Reassigning it scales the circle.\n\nNew in pygame-ce 2.4.0.\n\nChanged in pygame-ce 2.5.1: It is now allowed to create degenerate circles with r = 0."
#define DOC_CIRCLE_RSQR "r_sqr\n\nradius of the circle squared\n\nr_sqr -> float\n\nIt's equivalent to r^2. It can't be negative. Reassigning it changes the radius to r = \\sqrt{r_{sqr}}.\n\nNew in pygame-ce 2.4.0."
#define DOC_CIRCLE_CENTER "center\n\nx and y coordinates of the center of the circle\n\ncenter -> (float, float)\n\nA tuple containing the circle's x and y coordinates representing its center.\nReassigning it moves the circle to the new position.\n\nNew in pygame-ce 2.4.0."
#define DOC_CIRCLE_DIAMETER "diameter\n\ndiameter of the circle\n\ndiameter -> float\n\nIt's equivalent to 2 \\cdot r. It can't be negative. Reassigning it\nchanges the radius to r = \\frac{d}{2}.\n\nNew in pygame-ce 2.4.0."
#define DOC_CIRCLE_AREA "area\n\narea of the circle\n\narea -> float\n\nIt's equivalent to \\pi \\cdot r^2. It can't be negative. Reassigning it\nchanges the radius to r = \\sqrt{\\frac{area}{\\pi}} producing a circle with matching area.\n\nNew in pygame-ce 2.4.0."
#define DOC_CIRCLE_CIRCUMFERENCE "circumference\n\ncircumference of the circle\n\ncircumference -> float\n\nIt's equivalent to 2 \\cdot \\pi \\cdot r. It can't be negative. Reassigning it\nchanges the radius to r = \\frac{circumference}{2\\pi} producing a circle with\nmatching circumference.\n\nNew in pygame-ce 2.4.0."
#define DOC_CIRCLE_TOP "top\n\ntop coordinate of the circle\n\ntop -> (float, float)\n\nA tuple containing the x and y coordinates that represent the top\nof the circle.\nReassigning it moves the circle to the new position. The radius will not be affected.\n\nNew in pygame-ce 2.5.2."
#define DOC_CIRCLE_BOTTOM "bottom\n\nbottom coordinate of the circle\n\nbottom -> (float, float)\n\nA tuple containing the x and y coordinates that represent the bottom\nof the circle.\nReassigning it moves the circle to the new position. The radius will not be affected.\n\nNew in pygame-ce 2.5.2."
#define DOC_CIRCLE_LEFT "left\n\nleft coordinate of the circle\n\nleft -> (float, float)\n\nA tuple containing the x and y coordinates that represent the left\nof the circle.\nReassigning it moves the circle to the new position. The radius will not be affected.\n\nNew in pygame-ce 2.5.2."
#define DOC_CIRCLE_RIGHT "right\n\nright coordinate of the circle\n\nright -> (float, float)\n\nA tuple containing the x and y coordinates that represent the right\nof the circle.\nReassigning it moves the circle to the new position. The radius will not be affected.\n\nNew in pygame-ce 2.5.2."
#define DOC_CIRCLE_COLLIDEPOINT "collidepoint()\n\ntests if a point is inside the circle\n\ncollidepoint((x, y), /) -> bool\n\ncollidepoint(x, y, /) -> bool\n\ncollidepoint(vector2, /) -> bool\n\nReturns True if the given point is inside this Circle (edge included), False otherwise.\nIt takes a tuple of (x, y) coordinates, two separate x and y coordinates, or a Vector2\nobject as its argument.\n\nNew in pygame-ce 2.4.0."
#define DOC_CIRCLE_COLLIDECIRCLE "collidecircle()\n\ntests if a circle collides with this circle\n\ncollidecircle(circle, /) -> bool\n\ncollidecircle(x, y, radius, /) -> bool\n\ncollidecircle((x, y), radius, /) -> bool\n\ncollidecircle(vector2, radius, /) -> bool\n\nReturns True if the given circle intersects with this Circle, False otherwise.\nIt takes either a Circle object, a tuple of (x, y) coordinates and a radius, or separate x and y\ncoordinates and a radius as its argument.\n\nCalling this method with this circle as the argument will always return True.\n\nNew in pygame-ce 2.4.0."
#define DOC_CIRCLE_COLLIDERECT "colliderect()\n\ntests if a rectangle collides with this circle\n\ncolliderect(rect, /) -> bool\n\ncolliderect((x, y, width, height), /) -> bool\n\ncolliderect(x, y, width, height, /) -> bool\n\ncolliderect((x, y), (width, height), /) -> bool\n\ncolliderect(vector2, (width, height), /) -> bool\n\nReturns True if the given rectangle intersects with this Circle, False otherwise.\nTakes either a Rect object, a tuple of (x, y, width, height) coordinates, or separate\nx, y coordinates and width, height as its argument.\n\nNew in pygame-ce 2.4.0."
#define DOC_CIRCLE_COLLIDESWITH "collideswith()\n\ntests if a shape or point collides with this circle\n\ncollideswith(circle, /) -> bool\n\ncollideswith(rect, /) -> bool\n\ncollideswith((x, y), /) -> bool\n\ncollideswith(vector2, /) -> bool\n\nReturns True if the given shape or point intersects with this Circle, False otherwise.\nThe shape can be a Circle, Rect, FRect.\n\nThe shape argument must be an actual shape object (Circle, Rect, or FRect).\nYou can't pass a tuple or list of coordinates representing the shape (except for a point),\nbecause the shape type can't be determined from the coordinates alone.\n\nNew in pygame-ce 2.5.0."
#define DOC_CIRCLE_COLLIDELIST "collidelist()\n\ntest if a list of objects collide with the circle\n\ncollidelist(colliders) -> int\n\nThe collidelist method tests whether a given list of shapes or points collides\n(overlaps) with this Circle object. The function takes in a single argument, which\nmust be a list of Circle, Rect, FRect, or a point. The function returns the index\nof the first shape or point in the list that collides with the Circle object, or\n-1 if there is no collision.\n\nThe shapes must be actual shape objects, such as Circle, Rect or FRect\ninstances. It is not possible to pass a tuple or list of coordinates representing\nthe shape as an argument (except for a point), because the shape type can't be\ndetermined from the coordinates alone.\n\nNew in pygame-ce 2.5.2."
#define DOC_CIRCLE_COLLIDELISTALL "collidelistall()\n\ntest if all objects in a list collide with the circle\n\ncollidelistall(colliders) -> list\n\nThe collidelistall method tests whether a given list of shapes or points collides\n(overlaps) with this Circle object. The function takes in a single argument, which\nmust be a list of Circle, Rect, FRect, or a point. The function returns a list\ncontaining the indices of all the shapes or points in the list that collide with\nthe Circle object, or an empty list if there is no collision.\n\nThe shapes must be actual shape objects, such as Circle, Rect or FRect\ninstances. It is not possible to pass a tuple or list of coordinates representing\nthe shape as an argument (except for a point), because the shape type can't be\ndetermined from the coordinates alone.\n\nNew in pygame-ce 2.5.2."
#define DOC_CIRCLE_CONTAINS "contains()\n\ntests if a shape or point is inside the circle\n\ncontains(circle, /) -> bool\n\ncontains(rect, /) -> bool\n\ncontains((x, y), /) -> bool\n\ncontains(vector2, /) -> bool\n\nReturns True if the shape or point is completely contained within this Circle, False otherwise.\nThe shape can be a Circle, Rect, FRect.\n\nThe shape argument must be an actual shape object (Circle, Rect, or FRect).\nYou can't pass a tuple or list of coordinates representing the shape (except for a point),\nbecause the shape type can't be determined from the coordinates alone.\n\nNew in pygame-ce 2.5.0."
#define DOC_CIRCLE_MOVE "move()\n\nmoves the circle by a given amount\n\nmove((x, y), /) -> Circle\n\nmove(x, y, /) -> Circle\n\nmove(vector2, /) -> Circle\n\nReturns a copy of this Circle moved by the given amounts.\nTakes either a tuple of (x, y) coordinates, two separate x and y coordinates,\nor a Vector2 object as its argument.\n\nThis method is equivalent to the following code:\n\nCircle((circle.x + x, circle.y + y), circle.r)\n\nNew in pygame-ce 2.5.0."
#define DOC_CIRCLE_MOVEIP "move_ip()\n\nmoves the circle by a given amount, in place\n\nmove_ip((x, y), /) -> None\n\nmove_ip(x, y, /) -> None\n\nmove_ip(vector2, /) -> None\n\nMoves this Circle in place by the given amounts.\nTakes the same types of arguments as move() and it always returns None.\n\nThis method is equivalent to the following code:\n\ncircle.x += x\ncircle.y += y\n\nNew in pygame-ce 2.5.0."
#define DOC_CIRCLE_INTERSECT "intersect()\n\nfinds intersections between the circle and a shape\n\nintersect(circle, /) -> list\n\nFinds and returns a list of intersection points between the circle and another shape.\nThe other shape must be a Circle object.\nIf the circle does not intersect or has infinite intersections, an empty list is returned.\n\nThe shape argument must be an instance of the Circle class.\nPassing a tuple or list of coordinates representing the shape is not supported,\nas the type of shape cannot be determined from coordinates alone.\n\nNew in pygame-ce 2.5.2."
#define DOC_CIRCLE_UPDATE "update()\n\nupdates the circle position and radius\n\nupdate((x, y), radius, /) -> None\n\nupdate(x, y, radius, /) -> None\n\nupdate(vector2, radius, /) -> None\n\nSets the position and radius of this Circle to the provided values.\nIt always returns None.\n\nThis method is equivalent to the following code:\n\ncircle.x = x\ncircle.y = y\ncircle.r = radius\n\nNew in pygame-ce 2.4.0."
#define DOC_CIRCLE_ROTATE "rotate()\n\nrotates the circle\n\nrotate(angle, rotation_point=Circle.center, /) -> Circle\n\nrotate(angle, /) -> Circle\n\nReturns a copy of this Circle rotated by the specified angle (in degrees) around a point.\nPositive angles rotate the circle clockwise, counter-clockwise otherwise.\nThe rotation point is optional and defaults to the circle's center.\n\nNew in pygame-ce 2.5.0."
#define DOC_CIRCLE_ROTATEIP "rotate_ip()\n\nrotates the circle in place\n\nrotate_ip(angle, rotation_point=Circle.center, /) -> None\n\nrotate_ip(angle, /) -> None\n\nRotates the circle by a specified angle (in degrees) around a point.\nPositive angles rotate the circle clockwise, counter-clockwise otherwise.\nThe rotation point is optional and defaults to the circle's center.\n\nNew in pygame-ce 2.5.0."
#define DOC_CIRCLE_ASRECT "as_rect()\n\nreturns the smallest Rect containing the circle\n\nas_rect() -> Rect\n\nReturns the smallest pygame.Rect object containing this Circle.\n\nThis method is equivalent to the following code:\n\nRect(circle.x - circle.r, circle.y - circle.r, circle.r * 2, circle.r * 2)\n\nNew in pygame-ce 2.5.0."
#define DOC_CIRCLE_ASFRECT "as_frect()\n\nreturns the smallest FRect containing the circle\n\nas_frect() -> FRect\n\nReturns the smallest pygame.FRect object containing this Circle.\n\nThis method is equivalent to the following code:\n\nFRect(circle.x - circle.r, circle.y - circle.r, circle.r * 2, circle.r * 2)\n\nNew in pygame-ce 2.5.0."
#define DOC_CIRCLE_COPY "copy()\n\ncopies the circle\n\ncopy() -> Circle\n\nReturns a copy of this Circle.\n\nNew in pygame-ce 2.4.0."
#define DOC_LINE "pygame.Line\n\npygame object for representing a line\n\nLine((ax, ay), (bx, by)) -> Line\n\nLine(ax, ay, bx, by) -> Line\n\nNew in pygame-ce 2.5.2.\n\nThe Line class provides many useful methods for collision testing, transformation and intersection.\nA Line can be created from a combination of two pairs of coordinates that represent the start and end points.\nLines can also be created from python objects that are already a Line (effectively copying the line) or have an attribute named \"line\".\n\nSpecifically, to construct a Line you can pass the ax, ay, bx, and by values as separate\narguments or inside a sequence(list or tuple).\n\nAs a special case you can also pass in pygame.Rect / pygame.FRect, in which case the\nline will be created with (x, y, width, height) as the start and end points.\n\nYou can create lines with the same start and end points, but beware that some methods may\nnot work as expected or error out.\n\nFunctions that require a Line argument may also accept these values as Lines:\n\n((ax, ay), (bx, by))\n(ax, ay, bx, by)\n(vector2, vector2)\n\nThe Line class only stores the ax, ay, bx, and by attributes, everything else is calculated\non the fly based on them.\n\nLine Attributes\n\n\n\nLine Methods\n\n\n\n"
#define DOC_LINE_AX "ax\n\nx coordinate of the start point of the line\n\nax -> float\n\nThe horizontal coordinate of the start point of the line. Reassigning it moves the line.\n\nNew in pygame-ce 2.5.2."
#define DOC_LINE_AY "ay\n\ny coordinate of the start point of the line\n\nay -> float\n\nThe vertical coordinate of the start point of the line. Reassigning it moves the line.\n\nNew in pygame-ce 2.5.2."
#define DOC_LINE_BX "bx\n\nx coordinate of the end point of the line\n\nbx -> float\n\nThe horizontal coordinate of the end point of the line. Reassigning it moves the line.\n\nNew in pygame-ce 2.5.2."
#define DOC_LINE_BY "by\n\ny coordinate of the end point of the line\n\nby -> float\n\nThe vertical coordinate of the end point of the line. Reassigning it moves the line.\n\nNew in pygame-ce 2.5.2."
#define DOC_LINE_A "a\n\nthe first point of the line\n\na -> (float, float)\n\nA tuple containing the ax and ay attributes representing the line's first point.\nIt can be reassigned to move the Line. If reassigned the ax and ay attributes\nwill be changed to produce a Line with matching first point position.\nThe bx and by attributes will not be affected.\n\nNew in pygame-ce 2.5.2."
#define DOC_LINE_B "b\n\nthe second point of the line\n\nb -> (float, float)\n\nA tuple containing bx and by attributes representing the line's second point.\nIt can be reassigned to move the Line. If reassigned the bx and by attributes\nwill be changed to produce a Line with matching second point position.\nThe ax and ay attributes will not be affected.\n\nNew in pygame-ce 2.5.2."
#define DOC_LINE_LENGTH "length\n\nthe length of the line\n\nlength -> float\n\nThe length of the line. Calculated using the sqrt((bx-ax)**2 + (by-ay)**2) formula.\nThis attribute is read-only, it cannot be reassigned. To change the line's length\nuse the scale method or change its a or b attributes.\n\nNew in pygame-ce 2.5.3."
#define DOC_LINE_COPY "copy()\n\ncopies the line\n\ncopy() -> Line\n\nReturns a copy of this Line.\n\nNew in pygame-ce 2.5.2."
#define DOC_LINE_MOVE "move()\n\nmoves the line by a given amount\n\nmove((x, y)) -> Line\n\nmove(x, y) -> Line\n\nReturns a new Line that is moved by the given offset. The original Line is\nnot modified.\n\nThis method is equivalent to the following code:\n\nLine(line.ax + x, line.ay + y, line.bx + x, line.by + y)\n\nNew in pygame-ce 2.5.3."
#define DOC_LINE_MOVEIP "move_ip()\n\nmoves the line by a given amount\n\nmove_ip((x, y)) -> None\n\nmove_ip(x, y) -> None\n\nMoves the Line by the given offset. The original Line is modified. Always returns\nNone.\n\nThis method is equivalent to the following code:\n\nline.ax += x\nline.ay += y\nline.bx += x\nline.by += y\n\nNew in pygame-ce 2.5.3."
#define DOC_LINE_UPDATE "update()\n\nupdates the line's attributes\n\nupdate((ax, ay), (bx, by)) -> None\n\nupdate(ax, ay, bx, by) -> None\n\nupdate(line) -> None\n\nUpdates the Line's attributes. The original Line is modified. Always returns None.\n\nThis method is equivalent to the following code:\n\nline.ax = ax\nline.ay = ay\nline.bx = bx\nline.by = by\n\nNew in pygame-ce 2.5.3."
#define DOC_LINE_SCALE "scale()\n\nscales the line by the given factor from the given origin\n\nscale(factor, origin) -> Line\n\nscale(factor_and_origin) -> Line\n\nReturns a new Line which is scaled by the given factor from the specified origin with 0.0 being\nthe starting point, 0.5 being the center and 1.0 being the end point.\nThe original Line is not modified.\n\nNew in pygame-ce 2.5.3."
#define DOC_LINE_SCALEIP "scale_ip()\n\nscales the line by the given factor from the given origin in place\n\nscale_ip(factor, origin) -> None\n\nscale_ip(factor_and_origin) -> None\n\nScales the Line by the given factor from the specified origin with 0.0 being\nthe starting point, 0.5 being the center and 1.0 being the end point.\nThe original Line is modified.\nAlways returns None.\n\nNew in pygame-ce 2.5.3."
#define DOC_LINE_FLIPAB "flip_ab()\n\nflips the line a and b points\n\nflip_ab() -> Line\n\nReturns a new Line that has the a and b points flipped.\nThe original Line is not modified.\n\nNew in pygame-ce 2.5.3."
#define DOC_LINE_FLIPABIP "flip_ab_ip()\n\nflips the line a and b points, in place\n\nflip_ab_ip() -> None\n\nFlips the Line's a and b points. The original Line is modified.\nAlways returns None.\n\nNew in pygame-ce 2.5.3."
