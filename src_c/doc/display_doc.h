/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_DISPLAY "pygame.display\n\n\n\nPygame module to control the display window and screen.\n\nThis module offers control over the pygame display. Pygame has a single display\nSurface that is either contained in a window or runs full screen. Once you\ncreate the display you treat it as a regular Surface. Changes are not\nimmediately visible onscreen; you must choose one of the two flipping functions\nto update the actual display.\n\nThe origin of the display, where x = 0 and y = 0, is the top left of the\nscreen. Both axes increase positively towards the bottom right of the screen.\n\nThe pygame display can actually be initialized in one of several modes. By\ndefault, the display is a basic software driven framebuffer. You can request\nspecial modules like automatic scaling or OpenGL support. These are\ncontrolled by flags passed to pygame.display.set_mode().\n\nPygame can only have a single display active at any time. Creating a new one\nwith pygame.display.set_mode() will close the previous display. To detect\nthe number and size of attached screens, you can use\npygame.display.get_desktop_sizes and then select appropriate window size\nand display index to pass to pygame.display.set_mode().\n\nFor backward compatibility pygame.display allows precise control over\nthe pixel format or display resolutions. This used to be necessary with old\ngraphics cards and CRT screens, but is usually not needed any more. Use the\nfunctions pygame.display.mode_ok(), pygame.display.list_modes(), and\npygame.display.Info() to query detailed information about the display.\n\nOnce the display Surface is created, the functions from this module affect the\nsingle existing display. The Surface becomes invalid if the module is\nuninitialized. If a new display mode is set, the existing Surface will\nautomatically switch to operate on the new display.\n\nWhen the display mode is set, several events are placed on the pygame event\nqueue. pygame.QUIT is sent when the user has requested the program to\nshut down. The window will receive pygame.ACTIVEEVENT events as the display\ngains and loses input focus. If the display is set with the\npygame.RESIZABLE flag, pygame.VIDEORESIZE events will be sent when the\nuser adjusts the window dimensions. Hardware displays that draw direct to the\nscreen will get pygame.VIDEOEXPOSE events when portions of the window must\nbe redrawn.\n\nA new windowevent API was introduced in pygame 2.0.1. Check event module docs\nfor more information on that\n\nSome display environments have an option for automatically stretching all\nwindows. When this option is enabled, this automatic stretching distorts the\nappearance of the pygame window. In the pygame examples directory, there is\nexample code (prevent_display_stretching.py) which shows how to disable this\nautomatic stretching of the pygame display on Microsoft Windows (Vista or newer\nrequired)."
#define DOC_DISPLAY_INIT "pygame.display.init()\n\nInitialize the display module.\n\ninit() -> None\n\nInitializes the pygame display module. The display module cannot do anything\nuntil it is initialized. This is usually handled for you automatically when\nyou call the higher level pygame.init().\n\nPygame will select from one of several internal display backends when it is\ninitialized. The display mode will be chosen depending on the platform and\npermissions of current user. Before the display module is initialized the\nenvironment variable SDL_VIDEODRIVER can be set to control which backend\nis used. The systems with multiple choices are listed here.\n\nWindows : windib, directx\nUnix    : x11, dga, fbcon, directfb, ggi, vgl, svgalib, aalib, wayland\n\nNote\n\nOn wayland desktops, pygame-ce may choose to use the X11 video driver to run on Xwayland.\nThis behaviour is determined by the SDL library and might change in the future, so it's suggested\nto account for this and not rely on the default behavior. The Wayland video driver can be forced\nby setting the SDL_VIDEODRIVER environment variable to \"wayland\"\n\nOn some platforms it is possible to embed the pygame display into an already\nexisting window. To do this, the environment variable SDL_WINDOWID must\nbe set to a string containing the window id or handle. The environment\nvariable is checked when the pygame display is initialized. Be aware that\nthere can be many strange side effects when running in an embedded display.\n\nIt is harmless to call this more than once, repeated calls have no effect.\n\nChanged in pygame-ce 2.5.0: the manylinux wheels distributed by us now support the wayland videodriver"
#define DOC_DISPLAY_QUIT "pygame.display.quit()\n\nUninitialize the display module.\n\nquit() -> None\n\nThis will shut down the entire display module. This means any active\ndisplays will be closed. This will also be handled automatically when the\nprogram exits.\n\nIt is harmless to call this more than once, repeated calls have no effect."
#define DOC_DISPLAY_GETINIT "pygame.display.get_init()\n\nReturns True if the display module has been initialized.\n\nget_init() -> bool\n\nReturns True if the pygame.display module is currently initialized."
#define DOC_DISPLAY_SETMODE "pygame.display.set_mode()\n\nInitialize a window or screen for display.\n\nset_mode(size=(0, 0), flags=0, depth=0, display=0, vsync=0) -> Surface\n\nThis will create a window or display output and return a display Surface.\nThe arguments passed in are requests for a display type. The actual created\ndisplay will be the best possible match supported by the system.\n\nNote that calling this function implicitly initializes pygame.display, if\nit was not initialized before.\n\nThe size argument is a pair of numbers representing the width and\nheight. The flags argument is a collection of additional options. The depth\nargument represents the number of bits to use for color.\n\nThe Surface that gets returned can be drawn to like a regular Surface but\nchanges will eventually be seen on the monitor.\n\nIf no size is passed or is set to (0, 0), the created Surface will have\nthe same size as the current screen resolution. If only the width or height\nare set to 0, the Surface will have the same width or height as the\nscreen resolution.\n\nSince pygame 2, the depth argument is ignored, in favour of the best\nand fastest one. It also raises a deprecation warning since pygame-ce\n2.4.0 if the passed in depth is not 0 or the one pygame selects.\n\nWhen requesting fullscreen display modes, sometimes an exact match for the\nrequested size cannot be made. In these situations pygame will select\nthe closest compatible match. The returned surface will still always match\nthe requested size.\n\nOn high resolution displays(4k, 1080p) and tiny graphics games (640x480)\nshow up very small so that they are unplayable. SCALED scales up the window\nfor you. The game thinks it's a 640x480 window, but really it can be bigger.\nMouse events are scaled for you, so your game doesn't need to do it. Note\nthat SCALED is considered an experimental API and may change in future\nreleases.\n\nThe flags argument controls which type of display you want. There are\nseveral to choose from, and you can even combine multiple types using the\nbitwise or operator, (the pipe \"|\" character). Here are the display\nflags you will want to choose from:\n\npygame.FULLSCREEN    create a fullscreen display\npygame.DOUBLEBUF     only applicable with OPENGL\npygame.HWSURFACE     (obsolete in pygame 2) hardware accelerated, only in FULLSCREEN\npygame.OPENGL        create an OpenGL-renderable display\npygame.RESIZABLE     display window should be sizeable\npygame.NOFRAME       display window will have no border or controls\npygame.SCALED        resolution depends on desktop size and scale graphics\npygame.SHOWN         window is opened in visible mode (default)\npygame.HIDDEN        window is opened in hidden mode\n\nNew in pygame 2.0.0: SCALED, SHOWN and HIDDEN\n\nNew in pygame 2.0.0: vsync parameter\n\nBy setting the vsync parameter to 1, it is possible to get a display\nwith vertical sync at a constant frame rate determined by the monitor and\ngraphics drivers. Subsequent calls to pygame.display.flip() or\npygame.display.update() will block (i.e. wait) until the screen\nhas refreshed, in order to prevent \"screen tearing\"\n<https://en.wikipedia.org/wiki/Screen_tearing>.\n\nBe careful when using this feature together with pygame.time.Clock or\npygame.time.delay(), as multiple forms of waiting and frame rate\nlimiting may interact to cause skipped frames.\n\nThe request only works when graphics acceleration is available on the\nsystem. The exact behaviour depends on the hardware and driver\nconfiguration. When  vsync is requested, but unavailable,\nset_mode() may raise an exception.\n\nSetting the vsync parameter to -1 in conjunction with  OPENGL\nwill request the OpenGL-specific feature \"adaptive vsync\" <https://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync>.\n\nHere is an example usage of a call\nto set_mode() that may give you a display with vsync:\n\nflags = pygame.OPENGL | pygame.FULLSCREEN\ntry:\n    window_surface = pygame.display.set_mode((1920, 1080), flags, vsync=1)\n    vsync_success=True\nexcept pygame.error:\n    window_surface = pygame.display.set_mode((1920, 1080), flags)\n    vsync_success=False\n\nNew in pygame 2.0.0: vsync parameter\n\nChanged in pygame-ce 2.2.0: passing vsync can raise an exception\n\nChanged in pygame-ce 2.2.0: explicit request for \"adaptive vsync\"\n\nChanged in pygame-ce 2.2.0: vsync=1 does not require SCALED or OPENGL\n\nDeprecated since pygame-ce 2.4.0: The depth argument is ignored, and will be set to the optimal value\n\nChanged in pygame-ce 2.5.0: No longer emits warning when running on xwayland, see pygame.display.init() for details on running on wayland directly\n\nBasic example:\n\n# Open a window on the screen\nscreen_width=700\nscreen_height=400\nscreen=pygame.display.set_mode([screen_width, screen_height])\n\nThe display index 0 means the default display is used. If no display\nindex argument is provided, the default display can be overridden with an\nenvironment variable.\n\nChanged in pygame 1.9.5: display argument added\n\nChanged in pygame-ce 2.1.3: pygame now ensures that subsequent calls to this function clears the\nwindow to black. On older versions, this was an implementation detail\non the major platforms this function was tested with."
#define DOC_DISPLAY_GETSURFACE "pygame.display.get_surface()\n\nGet a reference to the currently set display surface.\n\nget_surface() -> Optional[Surface]\n\nReturn a reference to the currently set display Surface. If no display mode\nhas been set this will return None."
#define DOC_DISPLAY_FLIP "pygame.display.flip()\n\nUpdate the full display Surface to the screen.\n\nflip() -> None\n\nThis will update the contents of the entire display.\n\nWhen using an pygame.OPENGL display mode this will perform a gl buffer\nswap."
#define DOC_DISPLAY_UPDATE "pygame.display.update()\n\nUpdate all, or a portion, of the display. For non-OpenGL displays.\n\nupdate() -> None\n\nupdate(rectangle, /) -> None\n\nupdate(rectangles, /) -> None\n\nupdate(x, y, w, h, /) -> None\n\nupdate(xy, wh, /) -> None\n\nFor non OpenGL display Surfaces, this function is very similar to\npygame.display.flip() with an optional parameter that allows only\nportions of the display surface to be updated, instead of the entire area.\nIf no argument is passed it updates the entire Surface area like\npygame.display.flip().\n\ncalling display.update(None) means no part of the window is\nupdated. Whereas display.update() means the whole window is\nupdated.\n\nYou can pass the function a single rectangle, or an iterable of rectangles.\nGenerally you do not want to pass an iterable of rectangles as there is a\nperformance cost per rectangle passed to the function. On modern hardware,\nafter a very small number of rectangles passed in, the per-rectangle cost\nwill exceed the saving of updating less pixels. In most applications it is\nsimply more efficient to update the entire display surface at once, it also\nmeans  you do not need to keep track of a list of rectangles for each call\nto update.\n\nIf passing an iterable of rectangles it is safe to include None\nvalues in the list, which will be skipped.\n\nThis call cannot be used on pygame.OPENGL displays and will generate an\nexception.\n\nChanged in pygame-ce 2.5.1: Added support for passing an iterable, previously only sequence was allowed"
#define DOC_DISPLAY_GETDRIVER "pygame.display.get_driver()\n\nGet the name of the pygame display backend.\n\nget_driver() -> str\n\nPygame chooses one of many available display backends when it is\ninitialized. This returns the internal name used for the display backend.\nThis can be used to provide limited information about what display\ncapabilities might be accelerated. See the SDL_VIDEODRIVER flags in\npygame.display.init() to see some of the common options."
#define DOC_DISPLAY_INFO "pygame.display.Info()\n\nCreate a video display information object.\n\nInfo() -> _VidInfo\n\nCreates a simple object containing several attributes to describe the\ncurrent graphics environment. If this is called before\npygame.display.set_mode() some platforms can provide information about\nthe default display mode. This can also be called after setting the display\nmode to verify specific display options were satisfied. The VidInfo object\nhas several attributes:\n\nhw:         1 if the display is hardware accelerated\nwm:         1 if windowed display modes can be used\nvideo_mem:  The megabytes of video memory on the display.\n            This is 0 if unknown\nbitsize:    Number of bits used to store each pixel\nbytesize:   Number of bytes used to store each pixel\nmasks:      Four values used to pack RGBA values into pixels\nshifts:     Four values used to pack RGBA values into pixels\nlosses:     Four values used to pack RGBA values into pixels\nblit_hw:    1 if hardware Surface blitting is accelerated\nblit_hw_CC: 1 if hardware Surface colorkey blitting is accelerated\nblit_hw_A:  1 if hardware Surface pixel alpha blitting is\n            accelerated\nblit_sw:    1 if software Surface blitting is accelerated\nblit_sw_CC: 1 if software Surface colorkey blitting is\n            accelerated\nblit_sw_A:  1 if software Surface pixel alpha blitting is\n            accelerated\ncurrent_h, current_w:  Height and width of the current video\n            mode, or of the desktop mode if called before\n            the display.set_mode is called. They are -1 on error.\npixel_format: The pixel format of the display Surface as a string.\n            E.g PIXELFORMAT_RGB888.\n\nChanged in pygame-ce 2.4.0: pixel_format attribute added."
#define DOC_DISPLAY_GETWMINFO "pygame.display.get_wm_info()\n\nGet information about the current windowing system.\n\nget_wm_info() -> dict[str, int]\n\nCreates a dictionary filled with string keys. The strings and values are\narbitrarily created by the system. Some systems may have no information and\nan empty dictionary will be returned. Most platforms will return a \"window\"\nkey with the value set to the system id for the current display.\n\nNew in pygame 1.7.1."
#define DOC_DISPLAY_GETDESKTOPSIZES "pygame.display.get_desktop_sizes()\n\nGet sizes of active desktops.\n\nget_desktop_sizes() -> list[tuple[int, int]]\n\nThis function returns the sizes of the currently configured\nvirtual desktops as a list of (x, y) tuples of integers.\n\nThe length of the list is not the same as the number of attached monitors,\nas a desktop can be mirrored across multiple monitors. The desktop sizes\ndo not indicate the maximum monitor resolutions supported by the hardware,\nbut the desktop size configured in the operating system.\n\nIn order to fit windows into the desktop as it is currently configured, and\nto respect the resolution configured by the operating system in fullscreen\nmode, this function should be used to replace many use cases of\npygame.display.list_modes() whenever applicable.\n\nNew in pygame 2.0.0."
#define DOC_DISPLAY_LISTMODES "pygame.display.list_modes()\n\nGet list of available fullscreen modes.\n\nlist_modes(depth=0, flags=FULLSCREEN, display=0) -> list[tuple[int, int]]\n\nThis function returns a list of possible sizes for a specified color\ndepth. The return value will be an empty list if no display modes are\navailable with the given arguments. A return value of -1 means that\nany requested size should work (this is likely the case for windowed\nmodes). Mode sizes are sorted from biggest to smallest.\n\nIf depth is 0, the current/best color depth for the display is used.\nThe flags defaults to pygame.FULLSCREEN, but you may need to add\nadditional flags for specific fullscreen modes.\n\nThe display index 0 means the default display is used.\n\nSince pygame 2.0, pygame.display.get_desktop_sizes() has taken over\nsome use cases from pygame.display.list_modes():\n\nTo find a suitable size for non-fullscreen windows, it is preferable to\nuse pygame.display.get_desktop_sizes() to get the size of the current\ndesktop, and to then choose a smaller window size. This way, the window is\nguaranteed to fit, even when the monitor is configured to a lower resolution\nthan the maximum supported by the hardware.\n\nTo avoid changing the physical monitor resolution, it is also preferable to\nuse pygame.display.get_desktop_sizes() to determine the fullscreen\nresolution. Developers are strongly advised to default to the current\nphysical monitor resolution unless the user explicitly requests a different\none (e.g. in an options menu or configuration file).\n\nChanged in pygame 1.9.5: display argument added"
#define DOC_DISPLAY_MODEOK "pygame.display.mode_ok()\n\nPick the best color depth for a display mode.\n\nmode_ok(size, flags=0, depth=0, display=0) -> int\n\nThis function uses the same arguments as pygame.display.set_mode(). It\nis used to determine if a requested display mode is available. It will\nreturn 0 if the display mode cannot be set. Otherwise it will return a\npixel depth that best matches the display asked for.\n\nUsually the depth argument is not passed, but some platforms can support\nmultiple display depths. If passed it will hint to which depth is a better\nmatch.\n\nThe function will return 0 if the passed display flags cannot be set.\n\nThe display index 0 means the default display is used.\n\nChanged in pygame 1.9.5: display argument added"
#define DOC_DISPLAY_GLGETATTRIBUTE "pygame.display.gl_get_attribute()\n\nGet the value for an OpenGL flag for the current display.\n\ngl_get_attribute(flag, /) -> int\n\nAfter calling pygame.display.set_mode() with the pygame.OPENGL flag,\nit is a good idea to check the value of any requested OpenGL attributes. See\npygame.display.gl_set_attribute() for a list of valid flags."
#define DOC_DISPLAY_GLSETATTRIBUTE "pygame.display.gl_set_attribute()\n\nRequest an OpenGL display attribute for the display mode.\n\ngl_set_attribute(flag, value, /) -> None\n\nWhen calling pygame.display.set_mode() with the pygame.OPENGL flag,\nPygame automatically handles setting the OpenGL attributes like color and\ndouble-buffering. OpenGL offers several other attributes you may want control\nover. Pass one of these attributes as the flag, and its appropriate value.\nThis must be called before pygame.display.set_mode().\n\nMany settings are the requested minimum. Creating a window with an OpenGL context\nwill fail if OpenGL cannot provide the requested attribute, but it may for example\ngive you a stencil buffer even if you request none, or it may give you a larger\none than requested.\n\nThe OPENGL flags are\n\nGL_ALPHA_SIZE, GL_DEPTH_SIZE, GL_STENCIL_SIZE, GL_ACCUM_RED_SIZE,\nGL_ACCUM_GREEN_SIZE,  GL_ACCUM_BLUE_SIZE, GL_ACCUM_ALPHA_SIZE,\nGL_MULTISAMPLEBUFFERS, GL_MULTISAMPLESAMPLES, GL_STEREO\n\nGL_MULTISAMPLEBUFFERS\n\nWhether to enable multisampling anti-aliasing.\nDefaults to 0 (disabled).\nSet GL_MULTISAMPLESAMPLES to a value\nabove 0 to control the amount of anti-aliasing.\nA typical value is 2 or 3.\n\nGL_STENCIL_SIZE\n\nMinimum bit size of the stencil buffer. Defaults to 0.\n\nGL_DEPTH_SIZE\n\nMinimum bit size of the depth buffer. Defaults to 16.\n\nGL_STEREO\n\n1 enables stereo 3D. Defaults to 0.\n\nGL_BUFFER_SIZE\n\nMinimum bit size of the frame buffer. Defaults to 0.\n\nNew in pygame 2.0.0: Additional attributes:\n\nGL_ACCELERATED_VISUAL,\nGL_CONTEXT_MAJOR_VERSION, GL_CONTEXT_MINOR_VERSION,\nGL_CONTEXT_FLAGS, GL_CONTEXT_PROFILE_MASK,\nGL_SHARE_WITH_CURRENT_CONTEXT,\nGL_CONTEXT_RELEASE_BEHAVIOR,\nGL_FRAMEBUFFER_SRGB_CAPABLE\n\nGL_CONTEXT_PROFILE_MASK\n\nSets the OpenGL profile to one of these values:\n\nGL_CONTEXT_PROFILE_CORE             disable deprecated features\nGL_CONTEXT_PROFILE_COMPATIBILITY    allow deprecated features\nGL_CONTEXT_PROFILE_ES               allow only the ES feature\n                                    subset of OpenGL\n\nGL_ACCELERATED_VISUAL\n\nSet to 1 to require hardware acceleration, or 0 to force software render.\nBy default, both are allowed."
#define DOC_DISPLAY_GETACTIVE "pygame.display.get_active()\n\nReturns True when the display is active on the screen.\n\nget_active() -> bool\n\nReturns True when the display Surface is considered actively\nrenderable on the screen and may be visible to the user. This is\nthe default state immediately after pygame.display.set_mode().\nThis method may return True even if the application is fully hidden\nbehind another application window.\n\nThis will return False if the display Surface has been iconified or\nminimized (either via pygame.display.iconify() or via an OS\nspecific method such as the minimize-icon available on most\ndesktops).\n\nThe method can also return False for other reasons without the\napplication being explicitly iconified or minimized by the user.  A\nnotable example being if the user has multiple virtual desktops and\nthe display Surface is not on the active virtual desktop.\n\nThis function returning True is unrelated to whether the\napplication has input focus.  Please see\npygame.key.get_focused() and pygame.mouse.get_focused()\nfor APIs related to input focus."
#define DOC_DISPLAY_ICONIFY "pygame.display.iconify()\n\nIconify the display surface.\n\niconify() -> bool\n\nRequest the window for the display surface be iconified or hidden. Not all\nsystems and displays support an iconified display. The function will return\nTrue if successful.\n\nWhen the display is iconified pygame.display.get_active() will return\nFalse. The event queue should receive an ACTIVEEVENT event when the\nwindow has been iconified. Additionally, the event queue also receives a\nWINDOWEVENT_MINIMIZED event when the window has been iconified on pygame 2."
#define DOC_DISPLAY_TOGGLEFULLSCREEN "pygame.display.toggle_fullscreen()\n\nSwitch between fullscreen and windowed displays.\n\ntoggle_fullscreen() -> int\n\nSwitches the display window between windowed and fullscreen modes.\nDisplay driver support is not great when using pygame 1, but with\npygame 2 it is the most reliable method to switch to and from fullscreen.\n\nSupported display drivers in pygame 1:\n\nx11 (Linux/Unix)\n\nwayland (Linux/Unix)\n\nSupported display drivers in pygame 2:\n\nwindows (Windows)\n\nx11 (Linux/Unix)\n\nwayland (Linux/Unix)\n\ncocoa (OSX/Mac)\n\ntoggle_fullscreen() doesn't work on Windows\nunless the window size is in pygame.display.list_modes() or\nthe window is created with the flag pygame.SCALED.\nSee issue #1221."
#define DOC_DISPLAY_SETGAMMA "pygame.display.set_gamma()\n\nChange the hardware gamma ramps.\n\nset_gamma(red, green=..., blue=..., /) -> bool\n\nDEPRECATED: This functionality will go away in SDL3.\n\nSet the red, green, and blue gamma values on the display hardware. If the\ngreen and blue arguments are not passed, they will both be the same as red.\nNot all systems and hardware support gamma ramps, if the function succeeds\nit will return True.\n\nA gamma value of 1.0 creates a linear color table. Lower values will\ndarken the display and higher values will brighten.\n\nDeprecated since pygame-ce 2.1.4."
#define DOC_DISPLAY_SETGAMMARAMP "pygame.display.set_gamma_ramp()\n\nChange the hardware gamma ramps with a custom lookup.\n\nset_gamma_ramp(red, green, blue, /) -> bool\n\nDEPRECATED: This functionality will go away in SDL3.\n\nSet the red, green, and blue gamma ramps with an explicit lookup table. Each\nargument should be sequence of 256 integers. The integers should range\nbetween 0 and 0xffff. Not all systems and hardware support gamma\nramps, if the function succeeds it will return True.\n\nDeprecated since pygame-ce 2.1.4."
#define DOC_DISPLAY_SETICON "pygame.display.set_icon()\n\nChange the system image for the display window.\n\nset_icon(surface, /) -> None\n\nSets the runtime icon the system will use to represent the display window.\nAll windows default to a simple pygame logo for the window icon.\n\nNote that calling this function implicitly initializes pygame.display, if\nit was not initialized before.\n\nYou can pass any surface, but most systems want a smaller image around\n32x32. The image can have colorkey transparency which will be passed to the\nsystem.\n\nSome systems do not allow the window icon to change after it has been shown.\nThis function can be called before pygame.display.set_mode() to create\nthe icon before the display mode is set."
#define DOC_DISPLAY_SETCAPTION "pygame.display.set_caption()\n\nSet the current window caption.\n\nset_caption(title, icontitle=None, /) -> None\n\nIf the display has a window title, this function will change the name on the\nwindow. In pygame 1.x, some systems supported an alternate shorter title to\nbe used for minimized displays, but in pygame 2 icontitle does nothing."
#define DOC_DISPLAY_GETCAPTION "pygame.display.get_caption()\n\nGet the current window caption.\n\nget_caption() -> tuple[str, str]\n\nReturns the title and icontitle of the display window. In pygame 2.x\nthese will always be the same value."
#define DOC_DISPLAY_SETPALETTE "pygame.display.set_palette()\n\nSet the display color palette for indexed displays.\n\nset_palette(palette, /) -> None\n\nThis will change the video display color palette for 8-bit displays. This\ndoes not change the palette for the actual display Surface, only the palette\nthat is used to display the Surface. If no palette argument is passed, the\nsystem default palette will be restored. The palette is a sequence of\nRGB triplets."
#define DOC_DISPLAY_GETNUMDISPLAYS "pygame.display.get_num_displays()\n\nReturn the number of displays.\n\nget_num_displays() -> int\n\nReturns the number of available displays. This is always 1 if\npygame.get_sdl_version() returns a major version number below 2.\n\nNew in pygame 1.9.5."
#define DOC_DISPLAY_GETWINDOWSIZE "pygame.display.get_window_size()\n\nReturn the size of the window or screen.\n\nget_window_size() -> tuple[int, int]\n\nReturns the size of the window initialized with pygame.display.set_mode().\nThis may differ from the size of the display surface if SCALED is used.\n\nNew in pygame 2.0.0."
#define DOC_DISPLAY_GETWINDOWPOSITION "pygame.display.get_window_position()\n\nReturn the position of the window or screen.\n\nget_window_position() -> tuple[int, int]\n\nReturns the position of the window initialized with pygame.display.set_mode().\nThe position will change when the user moves the window or when the\nposition is set manually with pygame.display.set_window_position().\nCoordinates could be negative or outside the desktop size bounds. The\nposition is relative to the topleft of the primary monitor and the y coordinate\nignores the window frame."
#define DOC_DISPLAY_SETWINDOWPOSITION "pygame.display.set_window_position()\n\nSet the current window position.\n\nset_window_position(position) -> None\n\nSets the position of the window initialized with pygame.display.set_mode().\nThis differs from updating environment variables as this function can be\ncalled after the display has been initialised. The position is expected to\nbe relative to the topleft of the primary monitor. The y coordinate will\nignore the window frame (y = 0 means the frame is hidden). The user will\nstill be able to move the window after this call. See also\npygame.display.get_window_position()."
#define DOC_DISPLAY_GETALLOWSCREENSAVER "pygame.display.get_allow_screensaver()\n\nReturn whether the screensaver is allowed to run.\n\nget_allow_screensaver() -> bool\n\nReturn whether screensaver is allowed to run whilst the app is running. Default\nis False. By default pygame does not allow the screensaver during game\nplay.\n\nSome platforms do not have a screensaver or support\ndisabling the screensaver.  Please see\npygame.display.set_allow_screensaver() for\ncaveats with screensaver support.\n\nNew in pygame 2.0.0."
#define DOC_DISPLAY_SETALLOWSCREENSAVER "pygame.display.set_allow_screensaver()\n\nSet whether the screensaver may run.\n\nset_allow_screensaver(value=True) -> None\n\nChange whether screensavers should be allowed whilst the app is running.\nThe default value of the argument to the function is True.\nBy default pygame does not allow the screensaver during game play.\n\nIf the screensaver has been disallowed due to this function, it will automatically\nbe allowed to run when pygame.quit() is called.\n\nIt is possible to influence the default value via the environment variable\nSDL_HINT_VIDEO_ALLOW_SCREENSAVER, which can be set to either 0 (disable)\nor 1 (enable).\n\nDisabling screensaver is subject to platform support.\nWhen platform support is absent, this function will\nsilently appear to work even though the screensaver state\nis unchanged. The lack of feedback is due to SDL not\nproviding any supported method for determining whether\nit supports changing the screensaver state.\n\nNew in pygame 2.0.0."
#define DOC_DISPLAY_ISFULLSCREEN "pygame.display.is_fullscreen()\n\nReturns True if the pygame window created by pygame.display.set_mode() is in full-screen mode.\n\nis_fullscreen() -> bool\n\nEdge cases:\nIf the window is in windowed mode, but maximized, this will return False.\nIf the window is in \"borderless fullscreen\" mode, this will return True.\n\nNew in pygame-ce 2.2.0."
#define DOC_DISPLAY_ISVSYNC "pygame.display.is_vsync()\n\nReturns True if vertical synchronisation for pygame.display.flip() and pygame.display.update() is enabled.\n\nis_vsync() -> bool\n\nNew in pygame-ce 2.2.0."
#define DOC_DISPLAY_GETCURRENTREFRESHRATE "pygame.display.get_current_refresh_rate()\n\nReturns the screen refresh rate or 0 if unknown.\n\nget_current_refresh_rate() -> int\n\nThe screen refresh rate for the current window. In windowed mode, this\nshould be equal to the refresh rate of the desktop the window is on.\n\nIf no window is open, an exception is raised.\n\nWhen a constant refresh rate cannot be determined, 0 is returned.\n\nNew in pygame-ce 2.2.0."
#define DOC_DISPLAY_GETDESKTOPREFRESHRATES "pygame.display.get_desktop_refresh_rates()\n\nReturns the screen refresh rates for all displays (in windowed mode).\n\nget_desktop_refresh_rates() -> list[int]\n\nIf the current window is in full-screen mode, the actual refresh rate for\nthat window can differ.\n\nThis is safe to call when no window is open (i.e. before any calls to\npygame.display.set_mode()\n\nWhen a constant refresh rate cannot be determined, 0 is returned for that\ndesktop.\n\nNew in pygame-ce 2.2.0."
#define DOC_DISPLAY_MESSAGEBOX "pygame.display.message_box()\n\nCreate a native GUI message box.\n\nmessage_box(title, message=None, message_type='info', parent_window=None, buttons=('OK', ), return_button=0, escape_button=None) -> int\n\nParameters\n\ntitle (str) -- A title string.\n\nmessage (str) -- A message string. If this parameter is set to None, the message will be the title.\n\nmessage_type (str) -- Set the type of message_box, could be \"info\", \"warn\" or \"error\".\n\nparent_window (pygame.Window) -- The parent window of the message box.\n\nbuttons (tuple) -- An optional sequence of button name strings to show to the user.\n\nreturn_button (int) -- Button index to use if the return key is hit, 0 by default.\n\nescape_button (int) -- Button index to use if the escape key is hit, None for no button linked by default.\n\nReturns\n\nThe index of the button that was pushed.\n\nThis function should be called on the thread that set_mode() is called.\nIt will block execution of that thread until the user clicks a button or\ncloses the message_box.\n\nThis function may be called at any time, even before pygame.init().\n\nNegative values of return_button and escape_button are allowed\njust like standard Python list indexing.\n\nNew in pygame-ce 2.4.0."
