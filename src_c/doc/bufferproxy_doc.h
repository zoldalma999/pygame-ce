/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_BUFFERPROXY "pygame.BufferProxy\n\npygame object to export a surface buffer through an array protocol\n\nBufferProxy(parent) -> BufferProxy\n\nBufferProxy is a pygame support type, designed as the return value\nof the Surface.get_buffer() and Surface.get_view() methods.\nFor all Python versions a BufferProxy object exports a C struct\nand Python level array interface on behalf of its parent object's buffer.\nA new buffer interface is also exported.\nIn pygame, BufferProxy is key to implementing the\npygame.surfarray module.\n\nBufferProxy instances can be created directly from Python code,\neither for a parent that exports an interface, or from a Python dict\ndescribing an object's buffer layout. The dict entries are based on the\nPython level array interface mapping. The following keys are recognized:\n\n\"shape\"\n\ntuple\n\nThe length of each array dimension as a tuple of integers. The\nlength of the tuple is the number of dimensions in the array.\n\n\"typestr\"\n\nstring\n\nThe array element type as a length 3 string. The first character\ngives byteorder, '<' for little-endian, '>' for big-endian, and\n'|' for not applicable. The second character is the element type,\n'i' for signed integer, 'u' for unsigned integer, 'f' for floating\npoint, and 'V' for an chunk of bytes. The third character gives the\nbytesize of the element, from '1' to '9' bytes. So, for example,\n\"<u4\" is an unsigned 4 byte little-endian integer, such as a\n32 bit pixel on a PC, while \"|V3\" would represent a 24 bit pixel,\nwhich has no integer equivalent.\n\n\"data\"\n\ntuple\n\nThe physical buffer start address and a read-only flag as a length\n2 tuple. The address is an integer value, while the read-only flag\nis a boolâ€”False for writable, True for read-only.\n\n\"strides\"\n\ntuple\n\n(optional)\n\nArray stride information as a tuple of integers. It is required\nonly of non C-contiguous arrays. The tuple length must match\nthat of \"shape\".\n\n\"parent\"\n\nobject\n\n(optional)\n\nThe exporting object. It can be used to keep the parent object\nalive while its buffer is visible.\n\n\"before\"\n\ncallable\n\n(optional)\n\nCallback invoked when the BufferProxy instance\nexports the buffer. The callback is given one argument, the\n\"parent\" object if given, otherwise None.\nThe callback is useful for setting a lock on the parent.\n\n\"after\"\n\ncallable\n\n(optional)\n\nCallback invoked when an exported buffer is released.\nThe callback is passed on argument, the \"parent\" object if given,\notherwise None. The callback is useful for releasing a lock on the\nparent.\n\nThe BufferProxy class supports subclassing, instance variables, and weak\nreferences.\n\nNew in pygame 1.8.0.\n\nExtended in pygame 1.9.2.\n\n"
#define DOC_BUFFERPROXY_PARENT "parent\n\nReturn wrapped exporting object.\n\nparent -> Surface\n\nparent -> parent\n\nThe Surface which returned the BufferProxy object or\nthe object passed to a BufferProxy call."
#define DOC_BUFFERPROXY_LENGTH "length\n\nThe size, in bytes, of the exported buffer.\n\nlength -> int\n\nThe number of valid bytes of data exported. For discontinuous data,\nthat is data which is not a single block of memory, the bytes within\nthe gaps are excluded from the count. This property is equivalent to\nthe Py_buffer C struct len field."
#define DOC_BUFFERPROXY_RAW "raw\n\nA copy of the exported buffer as a single block of bytes.\n\nraw -> bytes\n\nThe buffer data as a str/bytes object.\nAny gaps in the exported data are removed."
#define DOC_BUFFERPROXY_WRITE "write()\n\nWrite raw bytes to object buffer.\n\nwrite(buffer, offset=0)\n\nOverwrite bytes in the parent object's data. The data must be C or F\ncontiguous, otherwise a ValueError is raised. Argument buffer is a\nstr/bytes object. An optional offset gives a\nstart position, in bytes, within the buffer where overwriting begins.\nIf the offset is negative or greater that or equal to the buffer proxy's\nlength value, an IndexException is raised.\nIf len(buffer) > proxy.length + offset, a ValueError is raised."
