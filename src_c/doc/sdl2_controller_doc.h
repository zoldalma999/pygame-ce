/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_SDL2_CONTROLLER "pygame._sdl2.controller\n\n\n\nPygame module to work with controllers.\n\nThis module offers control over common controller types like the dualshock 4 or\nthe xbox 360 controllers: They have two analog sticks, two triggers, two shoulder buttons,\na dpad, 4 buttons on the side, 2 (or 3) buttons in the middle.\n\nPygame uses xbox controllers naming conventions (like a, b, x, y for buttons) but\nthey always refer to the same buttons. For example CONTROLLER_BUTTON_X is\nalways the leftmost button of the 4 buttons on the right.\n\nControllers can generate the following events:\n\nCONTROLLERAXISMOTION, CONTROLLERBUTTONDOWN, CONTROLLERBUTTONUP,\nCONTROLLERDEVICEREMAPPED, CONTROLLERDEVICEADDED, CONTROLLERDEVICEREMOVED,\nCONTROLLERTOUCHPADDOWN, CONTROLLERTOUCHPADMOTION, CONTROLLERTOUCHPADUP\n\nThese events can be enabled/disabled by pygame._sdl2.controller.set_eventstate()\nNote that controllers can generate joystick events as well. This function only toggles\nevents related to controllers.\n\nSee the pygame.joystick for a more versatile but more advanced api.\n\nNew in pygame 2: This module requires SDL2."
#define DOC_SDL2_CONTROLLER_INIT "pygame._sdl2.controller.init()\n\ninitialize the controller module\n\ninit() -> None\n\nInitialize the controller module."
#define DOC_SDL2_CONTROLLER_QUIT "pygame._sdl2.controller.quit()\n\nUninitialize the controller module.\n\nquit() -> None\n\nUninitialize the controller module."
#define DOC_SDL2_CONTROLLER_GETINIT "pygame._sdl2.controller.get_init()\n\nReturns True if the controller module is initialized.\n\nget_init() -> bool\n\nTest if pygame._sdl2.controller.init() was called.\n\n"
#define DOC_SDL2_CONTROLLER_SETEVENTSTATE "pygame._sdl2.controller.set_eventstate()\n\nSets the current state of events related to controllers\n\nset_eventstate(state) -> None\n\nEnable or disable events connected to controllers.\n\nControllers can still generate joystick events, which will not be toggled by this function.\n\nChanged in pygame 2.0.2:: Changed return type from int to None"
#define DOC_SDL2_CONTROLLER_GETEVENTSTATE "pygame._sdl2.controller.get_eventstate()\n\nGets the current state of events related to controllers\n\nget_eventstate() -> bool\n\nReturns the current state of events related to controllers, True meaning\nevents will be posted.\n\nNew in pygame 2.0.2."
#define DOC_SDL2_CONTROLLER_GETCOUNT "pygame._sdl2.controller.get_count()\n\nGet the number of joysticks connected\n\nget_count() -> int\n\nGet the number of joysticks connected."
#define DOC_SDL2_CONTROLLER_ISCONTROLLER "pygame._sdl2.controller.is_controller()\n\nCheck if the given joystick is supported by the game controller interface\n\nis_controller(index) -> bool\n\nReturns True if the index given can be used to create a controller object."
#define DOC_SDL2_CONTROLLER_NAMEFORINDEX "pygame._sdl2.controller.name_forindex()\n\nGet the name of the controller\n\nname_forindex(index) -> name or None\n\nReturns the name of controller, or None if there's no name or the\nindex is invalid."
#define DOC_SDL2_CONTROLLER_CONTROLLER "pygame._sdl2.controller.Controller\n\nCreate a new Controller object.\n\nController(index) -> Controller\n\nCreate a new Controller object. Index should be integer between\n0 and pygame._sdl2.controller.get_count(). Controllers also\ncan be created from a pygame.joystick.Joystick using\npygame._sdl2.controller.from_joystick. Controllers are\ninitialized on creation.\n\n"
#define DOC_SDL2_CONTROLLER_CONTROLLER_INIT "init()\n\nInitialize the Controller\n\ninit() -> None\n\nInitialize a controller object. This should not be used much, since\nControllers are initialised on creation."
#define DOC_SDL2_CONTROLLER_CONTROLLER_QUIT "quit()\n\nuninitialize the Controller\n\nquit() -> None\n\nClose a Controller object. After this the pygame event queue will no longer\nreceive events from the device.\n\nIt is safe to call this more than once."
#define DOC_SDL2_CONTROLLER_CONTROLLER_GETINIT "get_init()\n\ncheck if the Controller is initialized\n\nget_init() -> bool\n\nReturns True if the Controller object is currently initialised."
#define DOC_SDL2_CONTROLLER_CONTROLLER_FROMJOYSTICK "static from_joystick()\n\nCreate a Controller from a pygame.joystick.Joystick object\n\nfrom_joystick(joystick) -> Controller\n\nCreate a Controller object from a pygame.joystick.Joystick object"
#define DOC_SDL2_CONTROLLER_CONTROLLER_ATTACHED "attached()\n\nCheck if the Controller has been opened and is currently connected.\n\nattached() -> bool\n\nReturns True if the Controller object is opened and connected."
#define DOC_SDL2_CONTROLLER_CONTROLLER_ASJOYSTICK "as_joystick()\n\nReturns a pygame.joystick.Joystick() object\n\nas_joystick() -> Joystick object\n\nReturns a pygame.joystick.Joystick() object created from this controller's index"
#define DOC_SDL2_CONTROLLER_CONTROLLER_GETAXIS "get_axis()\n\nGet the current state of a joystick axis\n\nget_axis(axis) -> int\n\nGet the current state of a trigger or joystick axis.\nThe axis argument must be one of the following constants:\n\nCONTROLLER_AXIS_LEFTX, CONTROLLER_AXIS_LEFTY,\nCONTROLLER_AXIS_RIGHTX, CONTROLLER_AXIS_RIGHTY,\nCONTROLLER_AXIS_TRIGGERLEFT, CONTROLLER_AXIS_TRIGGERRIGHT\n\nJoysticks can return a value between -32768 and 32767. Triggers however\ncan only return a value between 0 and 32768."
#define DOC_SDL2_CONTROLLER_CONTROLLER_GETBUTTON "get_button()\n\nGet the current state of a button\n\nget_button(button) -> bool\n\nGet the current state of a button, True meaning it is pressed down.\nThe button argument must be one of the following constants:\n\nCONTROLLER_BUTTON_A, CONTROLLER_BUTTON_B,\nCONTROLLER_BUTTON_X, CONTROLLER_BUTTON_Y\nCONTROLLER_BUTTON_DPAD_UP, CONTROLLER_BUTTON_DPAD_DOWN,\nCONTROLLER_BUTTON_DPAD_LEFT, CONTROLLER_BUTTON_DPAD_RIGHT,\nCONTROLLER_BUTTON_LEFTSHOULDER, CONTROLLER_BUTTON_RIGHTSHOULDER,\nCONTROLLER_BUTTON_LEFTSTICK, CONTROLLER_BUTTON_RIGHTSTICK,\nCONTROLLER_BUTTON_BACK, CONTROLLER_BUTTON_GUIDE,\nCONTROLLER_BUTTON_START"
#define DOC_SDL2_CONTROLLER_CONTROLLER_GETMAPPING "get_mapping()\n\nGet the mapping assigned to the controller\n\nget_mapping() -> mapping\n\nReturns a dict containing the mapping of the Controller. For more\ninformation see Controller.set_mapping()\n\nChanged in pygame 2.0.2:: Return type changed from str to dict"
#define DOC_SDL2_CONTROLLER_CONTROLLER_SETMAPPING "set_mapping()\n\nAssign a mapping to the controller\n\nset_mapping(mapping) -> int\n\nRebind buttons, axes, triggers and dpads. The mapping should be a\ndict containing all buttons, hats and axes. The easiest way to get this\nis to use the dict returned by Controller.get_mapping(). To edit\nthis mapping assign a value to the original button. The value of the\ndictionary must be a button, hat or axis represented in the following way:\n\nFor a button use: bX where X is the index of the button.\n\nFor a hat use: hX.Y where X is the index and the Y is the direction (up: 1, right: 2, down: 3, left: 4).\n\nFor an axis use: aX where x is the index of the axis.\n\nAn example of mapping:\n\nmapping = controller.get_mapping() # Get current mapping\nmapping[\"a\"] = \"b3\" # Remap button a to y\nmapping[\"y\"] = \"b0\" # Remap button y to a\ncontroller.set_mapping(mapping) # Set the mapping\n\nThe function will return 1 if a new mapping is added or 0 if an existing one is updated.\n\nChanged in pygame 2.0.2:: Renamed from add_mapping to set_mapping\n\nChanged in pygame 2.0.2:: Argument type changed from str to dict"
#define DOC_SDL2_CONTROLLER_CONTROLLER_RUMBLE "rumble()\n\nStart a rumbling effect\n\nrumble(low_frequency, high_frequency, duration) -> bool\n\nStart a rumble effect on the controller, with the specified strength ranging\nfrom 0 to 1. Duration is length of the effect, in ms. Setting the duration\nto 0 will play the effect until another one overwrites it or\nController.stop_rumble() is called. If an effect is already\nplaying, then it will be overwritten.\n\nReturns True if the rumble was played successfully or False if the\ncontroller does not support it.\n\nNew in pygame 2.0.2."
#define DOC_SDL2_CONTROLLER_CONTROLLER_STOPRUMBLE "stop_rumble()\n\nStop any rumble effect playing\n\nstop_rumble() -> None\n\nStops any rumble effect playing on the controller. See\nController.rumble() for more information.\n\nNew in pygame 2.0.2."
