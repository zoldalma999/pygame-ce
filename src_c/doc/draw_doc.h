/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_DRAW "pygame.draw\n\n\n\nPygame module for drawing shapes.\n\nDraw several simple shapes to a surface. These functions will work for\nrendering to any format of surface.\n\nMost of the functions take a width argument to represent the size of stroke\n(thickness) around the edge of the shape. If a width of 0 is passed the shape\nwill be filled (solid).\n\nAll the drawing functions respect the clip area for the surface and will be\nconstrained to that area. The functions return a rectangle representing the\nbounding area of changed pixels. This bounding rectangle is the 'minimum'\nbounding box that encloses the affected area.\n\nAll the drawing functions accept a color argument that is compatible with\npygame.typing.ColorLike.\n\nA color's alpha value will be written directly into the surface (if the\nsurface contains pixel alphas), but the draw function will not draw\ntransparently.\n\nThese functions temporarily lock the surface they are operating on. Many\nsequential drawing calls can be sped up by locking and unlocking the surface\nobject around the draw calls (see pygame.Surface.lock() and\npygame.Surface.unlock()).\n\nSee the pygame.gfxdraw module for alternative draw methods.\n\ndraw module example\n\nExample code for draw module.\n\nimport pygame\nfrom math import pi\n\n# Initialize pygame\npygame.init()\n\n# Set the height and width of the screen\nsize = [400, 300]\nscreen = pygame.display.set_mode(size)\n\npygame.display.set_caption(\"Example code for the draw module\")\n\n# Loop until the user clicks the close button.\ndone = False\nclock = pygame.time.Clock()\n\nwhile not done:\n    # This limits the while loop to a max of 60 times per second.\n    # Leave this out and we will use all CPU we can.\n    clock.tick(60)\n\n    for event in pygame.event.get():  # User did something\n        if event.type == pygame.QUIT:  # If user clicked close\n            done = True  # Flag that we are done so we exit this loop\n\n    # Clear the screen and set the screen background\n    screen.fill(\"white\")\n\n    # Draw on the screen a green line from (0, 0) to (50, 30)\n    # 5 pixels wide. Uses (r, g, b) color - medium sea green.\n    pygame.draw.line(screen, (60, 179, 113), [0, 0], [50, 30], 5)\n\n    # Draw on the screen a green antialiased line from (0, 25) to (50, 55)\n    # 5 pixels wide. Uses (r, g, b) color - medium sea green.\n    pygame.draw.aaline(screen, (60, 179, 113), [0, 25], [50, 55], 5)\n\n    # Draw on the screen a green line from (0, 50) to (50, 80)\n    # Because it is an antialiased line, it is 1 pixel wide.\n    # Uses (r, g, b) color - medium sea green.\n    pygame.draw.aaline(screen, (60, 179, 113), [0, 50], [50, 80], True)\n\n    # Draw on the screen 3 black lines, each 5 pixels wide.\n    # The 'False' means the first and last points are not connected.\n    pygame.draw.lines(\n        screen, \"black\", False, [[0, 80], [50, 90], [200, 80], [220, 30]], 5\n    )\n\n    # Draw a rectangle outline\n    pygame.draw.rect(screen, \"black\", [75, 10, 50, 20], 2)\n\n    # Draw a solid rectangle. Same color as \"black\" above, specified in a new way\n    pygame.draw.rect(screen, (0, 0, 0), [150, 10, 50, 20])\n\n    # Draw a rectangle with rounded corners\n    pygame.draw.rect(screen, \"green\", [115, 210, 70, 40], 10, border_radius=15)\n    pygame.draw.rect(\n        screen,\n        \"red\",\n        [135, 260, 50, 30],\n        0,\n        border_radius=10,\n        border_top_left_radius=0,\n        border_bottom_right_radius=15,\n    )\n\n    # Draw an ellipse outline, using a rectangle as the outside boundaries\n    pygame.draw.ellipse(screen, \"red\", [225, 10, 50, 20], 2)\n\n    # Draw an solid ellipse, using a rectangle as the outside boundaries\n    pygame.draw.ellipse(screen, \"red\", [300, 10, 50, 20])\n\n    # This draws a triangle using the polygon command\n    pygame.draw.polygon(screen, \"black\", [[100, 100], [0, 200], [200, 200]], 5)\n\n    # Draw an arc as part of an ellipse.\n    # Use radians to determine what angle to draw.\n    pygame.draw.arc(screen, \"black\", [210, 75, 150, 125], 0, pi / 2, 2)\n    pygame.draw.arc(screen, \"green\", [210, 75, 150, 125], pi / 2, pi, 2)\n    pygame.draw.arc(screen, \"blue\", [210, 75, 150, 125], pi, 3 * pi / 2, 2)\n    pygame.draw.arc(screen, \"red\", [210, 75, 150, 125], 3 * pi / 2, 2 * pi, 2)\n\n    # Draw a circle\n    pygame.draw.circle(screen, \"blue\", [60, 250], 40)\n\n    # Draw an antialiased circle with 3 pixels wide line\n    pygame.draw.aacircle(screen, \"green\", [340, 250], 40, 3)\n\n    # Draw an antialiased top right circle quadrant with 4 pixels wide line\n    pygame.draw.aacircle(screen, \"red\", [340, 250], 20, 4, draw_top_right=True)\n\n    # Draw an antialiased bottom left filled circle quadrant\n    pygame.draw.aacircle(screen, \"blue\", [340, 250], 20, draw_bottom_left=True)\n\n    # Draw only one circle quadrant\n    pygame.draw.circle(screen, \"blue\", [250, 250], 40, 0, draw_top_right=True)\n    pygame.draw.circle(screen, \"red\", [250, 250], 40, 30, draw_top_left=True)\n    pygame.draw.circle(screen, \"green\", [250, 250], 40, 20, draw_bottom_left=True)\n    pygame.draw.circle(screen, \"black\", [250, 250], 40, 10, draw_bottom_right=True)\n\n    # Go ahead and update the screen with what we've drawn.\n    # This MUST happen after all the other drawing commands.\n    pygame.display.flip()\n\n# Be IDLE friendly\npygame.quit()"
#define DOC_DRAW_RECT "pygame.draw.rect()\n\nDraw a rectangle.\n\nrect(surface, color, rect, width=0, border_radius=-1, border_top_left_radius=-1, border_top_right_radius=-1, border_bottom_left_radius=-1, border_bottom_right_radius=-1) -> Rect\n\nDraws a rectangle on the given surface.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\ncolor (pygame.typing.ColorLike) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nrect (Rect) -- rectangle to draw, position and dimensions\n\nwidth (int) -- (optional) used for line thickness or to indicate that\nthe rectangle is to be filled (not to be confused with the width value\nof the rect parameter)if width == 0, (default) fill the rectangle\n\nif width > 0, used for line thickness\n\nif width < 0, nothing will be drawn\n\n\n\nborder_radius (int) -- (optional) used for drawing rectangle with rounded corners.\nThe supported range is [0, min(height, width) / 2], with 0 representing a rectangle\nwithout rounded corners.\n\nborder_top_left_radius (int) -- (optional) used for setting the value of top left\nborder. If you don't set this value, it will use the border_radius value.\n\nborder_top_right_radius (int) -- (optional) used for setting the value of top right\nborder. If you don't set this value, it will use the border_radius value.\n\nborder_bottom_left_radius (int) -- (optional) used for setting the value of bottom left\nborder. If you don't set this value, it will use the border_radius value.\n\nborder_bottom_right_radius (int) -- (optional) used for setting the value of bottom right\nborder. If you don't set this value, it will use the border_radius value.if border_radius < 1 it will draw rectangle without rounded corners\n\nif any of border radii has the value < 0 it will use value of the border_radius\n\nIf sum of radii on the same side of the rectangle is greater than the rect size the radii\n\nwill get scaled\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the\nbounding rect's position will be the position of the given rect\nparameter and its width and height will be 0\n\nReturn type\n\nRect\n\nThe pygame.Surface.fill() method works just as well for drawing\nfilled rectangles and can be hardware accelerated on some platforms.\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nChanged in pygame 2.0.0.dev8: Added support for border radius.\n\nChanged in pygame 2.1.1: Drawing rects with width now draws the width correctly inside the\nrect's area, rather than using an internal call to draw.lines(),\nwhich had half the width spill outside the rect area."
#define DOC_DRAW_POLYGON "pygame.draw.polygon()\n\nDraw a polygon.\n\npolygon(surface, color, points, width=0) -> Rect\n\nDraws a polygon on the given surface.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\ncolor (pygame.typing.ColorLike) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\npoints (tuple(point) or list(point)) -- a sequence of 3 or more (x, y) coordinates that make up the\nvertices of the polygon, each point in the sequence must be a\ntuple/list/pygame.math.Vector2 of 2 ints/floats,\ne.g. [(x1, y1), (x2, y2), (x3, y3)]\n\nwidth (int) -- (optional) used for line thickness or to indicate that\nthe polygon is to be filledif width == 0, (default) fill the polygon\n\nif width > 0, used for line thickness\n\nif width < 0, nothing will be drawn\n\n\n\nWhen using width values > 1, the edge lines will grow\noutside the original boundary of the polygon. For more details on\nhow the thickness for edge lines grow, refer to the width notes\nof the pygame.draw.line() function.\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the\nbounding rect's position will be the position of the first point in the\npoints parameter (float values will be truncated) and its width and\nheight will be 0\n\nReturn type\n\nRect\n\nRaises\n\nValueError -- if len(points) < 3 (must have at least 3 points)\n\nTypeError -- if points is not a sequence or points does not\ncontain number pairs\n\nFor an aapolygon, use aalines() with closed=True.\n\nChanged in pygame 2.0.0: Added support for keyword arguments."
#define DOC_DRAW_CIRCLE "pygame.draw.circle()\n\nDraw a circle.\n\ncircle(surface, color, center, radius, width=0, draw_top_right=False, draw_top_left=False, draw_bottom_left=False, draw_bottom_right=False) -> Rect\n\nDraws a circle on the given surface.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\ncolor (pygame.typing.ColorLike) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\ncenter (tuple(int or float, int or float) or\nlist(int or float, int or float) or Vector2(int or float, int or float)) -- center point of the circle as a sequence of 2 ints/floats,\ne.g. (x, y)\n\nradius (int or float) -- radius of the circle, measured from the center parameter,\nnothing will be drawn if the radius is less than 1\n\nwidth (int) -- (optional) used for line thickness or to indicate that\nthe circle is to be filledif width == 0, (default) fill the circle\n\nif width > 0, used for line thickness\n\nif width < 0, nothing will be drawn\n\n\n\nWhen using width values > 1, the edge lines will only grow\ninward.\n\ndraw_top_right (bool) -- (optional) if this is set to True then the top right corner\nof the circle will be drawn\n\ndraw_top_left (bool) -- (optional) if this is set to True then the top left corner\nof the circle will be drawn\n\ndraw_bottom_left (bool) -- (optional) if this is set to True then the bottom left corner\nof the circle will be drawn\n\ndraw_bottom_right (bool) -- (optional) if this is set to True then the bottom right corner\nof the circle will be drawnif any of the draw_circle_part is True then it will draw all circle parts that have the True\n\nvalue, otherwise it will draw the entire circle.\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the\nbounding rect's position will be the center parameter value (float\nvalues will be truncated) and its width and height will be 0\n\nReturn type\n\nRect\n\nRaises\n\nTypeError -- if center is not a sequence of two numbers\n\nTypeError -- if radius is not a number\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\nNothing is drawn when the radius is 0 (a pixel at the center coordinates\nused to be drawn when the radius equaled 0).\nFloats, and Vector2 are accepted for the center param.\nThe drawing algorithm was improved to look more like a circle.\n\nChanged in pygame 2.0.0.dev8: Added support for drawing circle quadrants."
#define DOC_DRAW_AACIRCLE "pygame.draw.aacircle()\n\nDraw an antialiased circle.\n\naacircle(surface, color, center, radius, width=0) -> Rect\n\naacircle(surface, color, center, radius, width=0, draw_top_right=False, draw_top_left=False, draw_bottom_left=False, draw_bottom_right=False) -> Rect\n\nDraws an antialiased circle on the given surface.\nUses Xiaolin Wu Circle Algorithm.\nadapted from: https://cgg.mff.cuni.cz/~pepca/ref/WU.pdf\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\ncolor (pygame.typing.ColorLike) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\ncenter (tuple(int or float, int or float) or\nlist(int or float, int or float) or Vector2(int or float, int or float)) -- center point of the circle as a sequence of 2 ints/floats,\ne.g. (x, y)\n\nradius (int or float) -- radius of the circle, measured from the center parameter,\nnothing will be drawn if the radius is less than 1\n\nwidth (int) -- (optional) used for line thickness or to indicate that\nthe circle is to be filledif width == 0, (default) fill the circle\n\nif width > 0, used for line thickness\n\nif width < 0, nothing will be drawn\n\n\n\nWhen using width values > 1, the edge lines will only grow\ninward.\n\ndraw_top_right (bool) -- (optional) if this is set to True then the top right corner\nof the circle will be drawn\n\ndraw_top_left (bool) -- (optional) if this is set to True then the top left corner\nof the circle will be drawn\n\ndraw_bottom_left (bool) -- (optional) if this is set to True then the bottom left corner\nof the circle will be drawn\n\ndraw_bottom_right (bool) -- (optional) if this is set to True then the bottom right corner\nof the circle will be drawnif any of the draw_circle_part is True then it will draw all circle parts that have the True\n\nvalue, otherwise it will draw the entire circle.\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the\nbounding rect's position will be the center parameter value (float\nvalues will be truncated) and its width and height will be 0\n\nReturn type\n\nRect\n\nRaises\n\nTypeError -- if center is not a sequence of two numbers\n\nTypeError -- if radius is not a number\n\nNew in pygame-ce 2.5.0."
#define DOC_DRAW_ELLIPSE "pygame.draw.ellipse()\n\nDraw an ellipse.\n\nellipse(surface, color, rect, width=0) -> Rect\n\nDraws an ellipse on the given surface.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\ncolor (pygame.typing.ColorLike) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nrect (Rect) -- rectangle to indicate the position and dimensions of the\nellipse, the ellipse will be centered inside the rectangle and bounded\nby it\n\nwidth (int) -- (optional) used for line thickness or to indicate that\nthe ellipse is to be filled (not to be confused with the width value\nof the rect parameter)if width == 0, (default) fill the ellipse\n\nif width > 0, used for line thickness\n\nif width < 0, nothing will be drawn\n\n\n\nWhen using width values > 1, the edge lines will only grow\ninward from the original boundary of the rect parameter.\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the\nbounding rect's position will be the position of the given rect\nparameter and its width and height will be 0\n\nReturn type\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments."
#define DOC_DRAW_ARC "pygame.draw.arc()\n\nDraw an elliptical arc.\n\narc(surface, color, rect, start_angle, stop_angle, width=1) -> Rect\n\nDraws an elliptical arc on the given surface.\n\nThe two angle arguments are given in radians and indicate the start and stop\npositions of the arc. The arc is drawn in a counterclockwise direction from\nthe start_angle to the stop_angle.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\ncolor (pygame.typing.ColorLike) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nrect (Rect) -- rectangle to indicate the position and dimensions of the\nellipse which the arc will be based on, the ellipse will be centered\ninside the rectangle\n\nstart_angle (float) -- start angle of the arc in radians\n\nstop_angle (float) -- stop angle of the arc in\nradiansif start_angle < stop_angle, the arc is drawn in a\ncounterclockwise direction from the start_angle to the\nstop_angle\n\nif start_angle > stop_angle, tau (tau == 2 * pi) will be added\nto the stop_angle, if the resulting stop angle value is greater\nthan the start_angle the above start_angle < stop_angle case\napplies, otherwise nothing will be drawn\n\nif start_angle == stop_angle, nothing will be drawn\n\nwidth (int) -- (optional) used for line thickness (not to be confused\nwith the width value of the rect parameter)if width == 0, nothing will be drawn\n\nif width > 0, (default is 1) used for line thickness\n\nif width < 0, same as width == 0\n\nWhen using width values > 1, the edge lines will only grow\ninward from the original boundary of the rect parameter.\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the\nbounding rect's position will be the position of the given rect\nparameter and its width and height will be 0\n\nReturn type\n\nRect\n\nChanged in pygame 2.0.0: Added support for keyword arguments."
#define DOC_DRAW_LINE "pygame.draw.line()\n\nDraw a straight line.\n\nline(surface, color, start_pos, end_pos, width=1) -> Rect\n\nDraws a straight line on the given surface. There are no endcaps. For thick\nlines the ends are squared off.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\ncolor (pygame.typing.ColorLike) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nstart_pos (tuple(int or float, int or float) or\nlist(int or float, int or float) or Vector2(int or float, int or float)) -- start position of the line, (x, y)\n\nend_pos (tuple(int or float, int or float) or\nlist(int or float, int or float) or Vector2(int or float, int or float)) -- end position of the line, (x, y)\n\nwidth (int) -- (optional) used for line thicknessif width >= 1, used for line thickness (default is 1)\n\nif width < 1, nothing will be drawnWhen using width values > 1, lines will grow as follows.\n\nFor odd width values, the thickness of each line grows with the\noriginal line being in the center.\n\nFor even width values, the thickness of each line grows with the\noriginal line being offset from the center (as there is no exact\ncenter line drawn). As a result, lines with a slope < 1\n(horizontal-ish) will have 1 more pixel of thickness below the\noriginal line (in the y direction). Lines with a slope >= 1\n(vertical-ish) will have 1 more pixel of thickness to the right of\nthe original line (in the x direction).\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the\nbounding rect's position will be the start_pos parameter value (float\nvalues will be truncated) and its width and height will be 0\n\nReturn type\n\nRect\n\nRaises\n\nTypeError -- if start_pos or end_pos is not a sequence of\ntwo numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments."
#define DOC_DRAW_LINES "pygame.draw.lines()\n\nDraw multiple contiguous straight line segments.\n\nlines(surface, color, closed, points, width=1) -> Rect\n\nDraws a sequence of contiguous straight lines on the given surface. There are\nno endcaps or miter joints. For thick lines the ends are squared off.\nDrawing thick lines with sharp corners can have undesired looking results.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\ncolor (pygame.typing.ColorLike) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nclosed (bool) -- if True an additional line segment is drawn between\nthe first and last points in the points sequence\n\npoints (tuple(point) or list(point)) -- a sequence of 2 or more (x, y) coordinates, where each\npoint in the sequence must be a\ntuple/list/pygame.math.Vector2 of 2 ints/floats and adjacent\npoints will be connected by a line segment, e.g. for the\npoints [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn\nfrom (x1, y1) to (x2, y2) and from (x2, y2) to (x3, y3),\nadditionally if the closed parameter is True another line segment\nwill be drawn from (x3, y3) to (x1, y1)\n\nwidth (int) -- (optional) used for line thicknessif width >= 1, used for line thickness (default is 1)\n\nif width < 1, nothing will be drawnWhen using width values > 1 refer to the width notes\nof line() for details on how thick lines grow.\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the\nbounding rect's position will be the position of the first point in the\npoints parameter (float values will be truncated) and its width and\nheight will be 0\n\nReturn type\n\nRect\n\nRaises\n\nValueError -- if len(points) < 2 (must have at least 2 points)\n\nTypeError -- if points is not a sequence or points does not\ncontain number pairs\n\nChanged in pygame 2.0.0: Added support for keyword arguments."
#define DOC_DRAW_AALINE "pygame.draw.aaline()\n\nDraw a straight antialiased line.\n\naaline(surface, color, start_pos, end_pos, width=1) -> Rect\n\nDraws a straight antialiased line on the given surface. There are no endcaps.\nFor thick lines the ends are squared off.\n\nRegarding float values for coordinates, a point with coordinate\nconsisting of two whole numbers is considered being right in the center\nof said pixel (and having a height and width of 1 pixel would therefore\ncompletely cover it), while a point with coordinate where one (or both)\nof the numbers have non-zero decimal parts would be partially covering\ntwo (or four if both numbers have decimal parts) adjacent pixels, e.g.\nthe point (1.4, 2) covers 60% of the pixel (1, 2) and 40% of the\npixel (2,2).\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\ncolor (pygame.typing.ColorLike) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nstart_pos (tuple(int or float, int or float) or\nlist(int or float, int or float) or Vector2(int or float, int or float)) -- start position of the line, (x, y)\n\nend_pos (tuple(int or float, int or float) or\nlist(int or float, int or float) or Vector2(int or float, int or float)) -- end position of the line, (x, y)\n\nwidth (int) -- (optional) used for line thicknessif width >= 1, used for line thickness (default is 1)\n\nif width < 1, nothing will be drawn\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the\nbounding rect's position will be the start_pos parameter value (float\nvalues will be truncated) and its width and height will be 0\n\nReturn type\n\nRect\n\nRaises\n\nTypeError -- if start_pos or end_pos is not a sequence of\ntwo numbers\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nChanged in pygame-ce 2.4.0: Removed deprecated 'blend' argument\n\nChanged in pygame-ce 2.5.0: blend argument re-added for backcompat, but will\nalways raise a deprecation exception when used\n\nChanged in pygame-ce 2.5.3: Added line width"
#define DOC_DRAW_AALINES "pygame.draw.aalines()\n\nDraw multiple contiguous straight antialiased line segments.\n\naalines(surface, color, closed, points) -> Rect\n\nDraws a sequence of contiguous straight antialiased lines on the given\nsurface.\n\nParameters\n\nsurface (Surface) -- surface to draw on\n\ncolor (pygame.typing.ColorLike) -- color to draw with, the alpha value is optional if using a\ntuple (RGB[A])\n\nclosed (bool) -- if True an additional line segment is drawn between\nthe first and last points in the points sequence\n\npoints (tuple(point) or list(point)) -- a sequence of 2 or more (x, y) coordinates, where each\npoint in the sequence must be a\ntuple/list/pygame.math.Vector2 of 2 ints/floats and adjacent\npoints will be connected by a line segment, e.g. for the\npoints [(x1, y1), (x2, y2), (x3, y3)] a line segment will be drawn\nfrom (x1, y1) to (x2, y2) and from (x2, y2) to (x3, y3),\nadditionally if the closed parameter is True another line segment\nwill be drawn from (x3, y3) to (x1, y1)\n\nReturns\n\na rect bounding the changed pixels, if nothing is drawn the\nbounding rect's position will be the position of the first point in the\npoints parameter (float values will be truncated) and its width and\nheight will be 0\n\nReturn type\n\nRect\n\nRaises\n\nValueError -- if len(points) < 2 (must have at least 2 points)\n\nTypeError -- if points is not a sequence or points does not\ncontain number pairs\n\nChanged in pygame 2.0.0: Added support for keyword arguments.\n\nChanged in pygame-ce 2.4.0: Removed deprecated blend argument\n\nChanged in pygame-ce 2.5.0: blend argument re-added for backcompat, but will\nalways raise a deprecation exception when used"
