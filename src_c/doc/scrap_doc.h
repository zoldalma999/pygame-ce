/* Auto generated file: with make_docs.py .  Docs go in docs/reST/ref/ . */
#define DOC_SCRAP "pygame.scrap\n\n\n\npygame module for clipboard support.\n\nEXPERIMENTAL!: This API may change or disappear in later pygame releases. If\nyou use this, your code may break with the next pygame release.\n\nThe scrap module is for transferring data to/from the clipboard. This allows for\ntransferring of strings between pygame and other applications. Currently, only strings\nare supported with the scrap.put_text, scrap.get_text, and scrap.has_text\nfunctions. All other functions are deprecated as of pygame 2.2.0 and will be removed\nin a future release of pygame.\n\nscrap.put_text, scrap.get_text, and scrap.has_text use the same\nclipboard as the rest of the current API, but only strings are compatible with the\nnew API as of right now.\n\nTHE BELOW INFORMATION IS DEPRECATED IN PYGAME 2.2.0 AND WILL BE REMOVED IN THE FUTURE.\n\nThe scrap module is for transferring data to/from the clipboard. This allows\nfor cutting and pasting data between pygame and other applications. Some basic\ndata (MIME) types are defined and registered:\n\n pygame         string\nconstant        value        description\n--------------------------------------------------\nSCRAP_TEXT   \"text/plain\"    plain text\nSCRAP_BMP    \"image/bmp\"     BMP encoded image data\nSCRAP_PBM    \"image/pbm\"     PBM encoded image data\nSCRAP_PPM    \"image/ppm\"     PPM encoded image data\n\npygame.SCRAP_PPM, pygame.SCRAP_PBM and pygame.SCRAP_BMP are\nsuitable for surface buffers to be shared with other applications.\npygame.SCRAP_TEXT is an alias for the plain text clipboard type.\n\nDepending on the platform, additional types are automatically registered when\ndata is placed into the clipboard to guarantee a consistent sharing behaviour\nwith other applications. The following listed types can be used as strings to\nbe passed to the respective pygame.scrap module functions.\n\nFor Windows platforms, these additional types are supported automatically\nand resolve to their internal definitions:\n\n\"text/plain;charset=utf-8\"   UTF-8 encoded text\n\"audio/wav\"                  WAV encoded audio\n\"image/tiff\"                 TIFF encoded image data\n\nFor X11 platforms, these additional types are supported automatically and\nresolve to their internal definitions:\n\n\"text/plain;charset=utf-8\"   UTF-8 encoded text\n\"UTF8_STRING\"                UTF-8 encoded text\n\"COMPOUND_TEXT\"              COMPOUND text\n\nUser defined types can be used, but the data might not be accessible by other\napplications unless they know what data type to look for.\nExample: Data placed into the clipboard by\npygame.scrap.put(\"my_data_type\", byte_data) can only be accessed by\napplications which query the clipboard for the \"my_data_type\" data type.\n\nFor an example of how the scrap module works refer to the examples page\n(pygame.examples.scrap_clipboard.main()) or the code directly in GitHub\n(pygame/examples/scrap_clipboard.py).\n\nNew in pygame 1.8.\n\nThe scrap module is currently only supported for Windows, X11 and Mac OS X.\nOn Mac OS X only text works at the moment - other types may be supported in\nfuture releases."
#define DOC_SCRAP_PUTTEXT "pygame.scrap.put_text()\n\nPlaces text into the clipboard.\n\nput_text(text, /) -> None\n\nPlaces the input text into the clipboard. The data should be a string.\nThis is the same clipboard as the legacy scrap API when using SCRAP_TEXT.\n\nParameters\n\ntext (string) -- String to be placed into the clipboard\n\nReturn type\n\nNone\n\nRaises\n\npygame.error -- if video mode has not been set_mode\n\npygame.display.set_mode() should be called before using the scrap module\n\nNew in pygame-ce 2.2.0."
#define DOC_SCRAP_GETTEXT "pygame.scrap.get_text()\n\nGets text from the clipboard.\n\nget_text() -> str\n\nGets text from the clipboard and returns it. If the clipboard is empty,\nreturns an empty string. This is the same clipboard as the legacy scrap\nAPI when using SCRAP_TEXT.\n\nReturn type\n\nstr\n\nNew in pygame-ce 2.2.0."
#define DOC_SCRAP_HASTEXT "pygame.scrap.has_text()\n\nChecks if text is in the clipboard.\n\nhas_text() -> bool\n\nReturns True if the clipboard has a string, otherwise returns False.\nThis is the same clipboard as the legacy scrap API when using SCRAP_TEXT.\n\nReturn type\n\nbool\n\nNew in pygame-ce 2.2.0."
#define DOC_SCRAP_INIT "pygame.scrap.init()\n\nInitializes the scrap module.\n\ninit() -> None\n\nInitialize the scrap module.\n\nRaises\n\npygame.error -- if unable to initialize scrap module\n\nThe scrap module requires pygame.display.set_mode() be\ncalled before being initialized.\n\nDeprecated since pygame-ce 2.2.0."
#define DOC_SCRAP_GETINIT "pygame.scrap.get_init()\n\nReturns True if the scrap module is currently initialized.\n\nget_init() -> bool\n\nGets the scrap module's initialization state.\n\nReturns\n\nTrue if the pygame.scrap module is currently\ninitialized, False otherwise\n\nReturn type\n\nbool\n\nNew in pygame 1.9.5.\n\nDeprecated since pygame-ce 2.2.0."
#define DOC_SCRAP_GET "pygame.scrap.get()\n\nGets the data for the specified type from the clipboard.\n\nget(type, /) -> bytes | None\n\nRetrieves the data for the specified type from the clipboard. The data is\nreturned as a byte string and might need further processing (such as\ndecoding to Unicode).\n\nParameters\n\ntype (string) -- data type to retrieve from the clipboard\n\nReturns\n\ndata (bytes object) for the given type identifier or None if\nno data for the given type is available\n\nReturn type\n\nbytes | None\n\nDeprecated since pygame-ce 2.2.0.\n\ntext = pygame.scrap.get(pygame.SCRAP_TEXT)\nif text:\n    print(\"There is text in the clipboard.\")\nelse:\n    print(\"There does not seem to be text in the clipboard.\")"
#define DOC_SCRAP_GETTYPES "pygame.scrap.get_types()\n\nGets a list of the available clipboard types.\n\nget_types() -> list\n\nGets a list of data type string identifiers for the data currently\navailable on the clipboard. Each identifier can be used in the\npygame.scrap.get() method to get the clipboard content of the\nspecific type.\n\nReturns\n\nlist of strings of the available clipboard data types, if there\nis no data in the clipboard an empty list is returned\n\nReturn type\n\nlist\n\nDeprecated since pygame-ce 2.2.0.\n\nfor t in pygame.scrap.get_types():\n    if \"text\" in t:\n        # There is some content with the word \"text\" in its type string.\n        print(pygame.scrap.get(t))"
#define DOC_SCRAP_PUT "pygame.scrap.put()\n\nPlaces data into the clipboard.\n\nput(type, data, /) -> None\n\nPlaces data for a given clipboard type into the clipboard. The data must\nbe a string buffer. The type is a string identifying the type of data to be\nplaced into the clipboard. This can be one of the predefined\npygame.SCRAP_PBM, pygame.SCRAP_PPM, pygame.SCRAP_BMP or\npygame.SCRAP_TEXT values or a user defined string identifier.\n\nParameters\n\ntype (string) -- type identifier of the data to be placed into the\nclipboard\n\ndata (bytes) -- data to be place into the clipboard, a bytes object\n\nRaises\n\npygame.error -- if unable to put the data into the clipboard\n\nDeprecated since pygame-ce 2.2.0.\n\nwith open(\"example.bmp\", \"rb\") as fp:\n    pygame.scrap.put(pygame.SCRAP_BMP, fp.read())\n# The image data is now on the clipboard for other applications to access\n# it.\npygame.scrap.put(pygame.SCRAP_TEXT, b\"A text to copy\")\npygame.scrap.put(\"Plain text\", b\"Data for user defined type 'Plain text'\")"
#define DOC_SCRAP_CONTAINS "pygame.scrap.contains()\n\nChecks whether data for a given type is available in the clipboard.\n\ncontains(type, /) -> bool\n\nChecks whether data for the given type is currently available in the\nclipboard.\n\nParameters\n\ntype (string) -- data type to check availability of\n\nReturns\n\nTrue if data for the passed type is available in the\nclipboard, False otherwise\n\nReturn type\n\nbool\n\nDeprecated since pygame-ce 2.2.0.\n\nif pygame.scrap.contains(pygame.SCRAP_TEXT):\n    print(\"There is text in the clipboard.\")\nif pygame.scrap.contains(\"own_data_type\"):\n    print(\"There is stuff in the clipboard.\")"
#define DOC_SCRAP_LOST "pygame.scrap.lost()\n\nIndicates if the clipboard ownership has been lost by the pygame application.\n\nlost() -> bool\n\nIndicates if the clipboard ownership has been lost by the pygame\napplication.\n\nReturns\n\nTrue, if the clipboard ownership has been lost by the pygame\napplication, False if the pygame application still owns the clipboard\n\nReturn type\n\nbool\n\nDeprecated since pygame-ce 2.2.0.\n\nif pygame.scrap.lost():\n    print(\"The clipboard is in use by another application.\")"
#define DOC_SCRAP_SETMODE "pygame.scrap.set_mode()\n\nSets the clipboard access mode.\n\nset_mode(mode, /) -> None\n\nSets the access mode for the clipboard. This is only of interest for X11\nenvironments where clipboard modes pygame.SCRAP_SELECTION (for mouse\nselections) and pygame.SCRAP_CLIPBOARD (for the clipboard) are\navailable. Setting the mode to pygame.SCRAP_SELECTION in other\nenvironments will not change the mode from pygame.SCRAP_CLIPBOARD.\n\nParameters\n\nmode -- access mode, supported values are pygame.SCRAP_CLIPBOARD\nand pygame.SCRAP_SELECTION (pygame.SCRAP_SELECTION only has an\neffect when used on X11 platforms)\n\nRaises\n\nValueError -- if the mode parameter is not\npygame.SCRAP_CLIPBOARD or pygame.SCRAP_SELECTION\n\nDeprecated since pygame-ce 2.2.0."
